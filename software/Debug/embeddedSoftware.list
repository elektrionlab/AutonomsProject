
embeddedSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080035dc  080035dc  000135dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003874  08003874  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003874  08003874  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003874  08003874  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003878  08003878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800387c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  080038ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080038ec  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006dea  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4f  00000000  00000000  00026e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  00028bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  000293f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184a5  00000000  00000000  00029b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a942  00000000  00000000  00041fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083936  00000000  00000000  0004c90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0245  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000286c  00000000  00000000  000d0298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080035c4 	.word	0x080035c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080035c4 	.word	0x080035c4

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <UserSystemInit>:

#include "system.h"

struct System controlSystem;

void UserSystemInit(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	controlSystem.ledOnTime = 300;
 8000174:	4b08      	ldr	r3, [pc, #32]	; (8000198 <UserSystemInit+0x28>)
 8000176:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800017a:	605a      	str	r2, [r3, #4]
	controlSystem.ledOffTime = 700;
 800017c:	4b06      	ldr	r3, [pc, #24]	; (8000198 <UserSystemInit+0x28>)
 800017e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000182:	609a      	str	r2, [r3, #8]

	controlSystem.echoType = 1;	// echo yapıyor
 8000184:	4b04      	ldr	r3, [pc, #16]	; (8000198 <UserSystemInit+0x28>)
 8000186:	2201      	movs	r2, #1
 8000188:	751a      	strb	r2, [r3, #20]
	controlSystem.systemState = 1;
 800018a:	4b03      	ldr	r3, [pc, #12]	; (8000198 <UserSystemInit+0x28>)
 800018c:	2201      	movs	r2, #1
 800018e:	755a      	strb	r2, [r3, #21]

}
 8000190:	bf00      	nop
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	2000008c 	.word	0x2000008c

0800019c <task2>:
extern struct uartDataStr uartData;

char *parsedData[3];
int ledTime;

void task2(){
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0

	getUartMessage(&uartData);
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <task2+0x18>)
 80001a2:	f000 f8b9 	bl	8000318 <getUartMessage>
	dataParser();
 80001a6:	f000 f817 	bl	80001d8 <dataParser>
	echoTask();
 80001aa:	f000 f805 	bl	80001b8 <echoTask>



}
 80001ae:	bf00      	nop
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	200000c0 	.word	0x200000c0

080001b8 <echoTask>:

void echoTask(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	if(controlSystem.echoType == 1){
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <echoTask+0x18>)
 80001be:	7d1b      	ldrb	r3, [r3, #20]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d102      	bne.n	80001ca <echoTask+0x12>
		echoMessage(&uartData);
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <echoTask+0x1c>)
 80001c6:	f000 f8ed 	bl	80003a4 <echoMessage>
	}
}
 80001ca:	bf00      	nop
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	200000c0 	.word	0x200000c0

080001d8 <dataParser>:

void dataParser(){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	// dataların parse edilmesi ve ilgili ayarların yapılması
	if(!strcmp(controlSystem.uartMessageData, "stop\r\n\0")){
 80001de:	4b32      	ldr	r3, [pc, #200]	; (80002a8 <dataParser+0xd0>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4932      	ldr	r1, [pc, #200]	; (80002ac <dataParser+0xd4>)
 80001e4:	4618      	mov	r0, r3
 80001e6:	f7ff ffb1 	bl	800014c <strcmp>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d106      	bne.n	80001fe <dataParser+0x26>
		controlSystem.echoType = 0;
 80001f0:	4b2d      	ldr	r3, [pc, #180]	; (80002a8 <dataParser+0xd0>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	751a      	strb	r2, [r3, #20]
		controlSystem.systemState = 0;
 80001f6:	4b2c      	ldr	r3, [pc, #176]	; (80002a8 <dataParser+0xd0>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	755a      	strb	r2, [r3, #21]
		}
	}
	else{
		// TODO:
	}
}
 80001fc:	e050      	b.n	80002a0 <dataParser+0xc8>
	else if(!strcmp(controlSystem.uartMessageData, "start\r\n\0") || controlSystem.systemState == 1){
 80001fe:	4b2a      	ldr	r3, [pc, #168]	; (80002a8 <dataParser+0xd0>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	492b      	ldr	r1, [pc, #172]	; (80002b0 <dataParser+0xd8>)
 8000204:	4618      	mov	r0, r3
 8000206:	f7ff ffa1 	bl	800014c <strcmp>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d003      	beq.n	8000218 <dataParser+0x40>
 8000210:	4b25      	ldr	r3, [pc, #148]	; (80002a8 <dataParser+0xd0>)
 8000212:	7d5b      	ldrb	r3, [r3, #21]
 8000214:	2b01      	cmp	r3, #1
 8000216:	d143      	bne.n	80002a0 <dataParser+0xc8>
		controlSystem.echoType = 1;
 8000218:	4b23      	ldr	r3, [pc, #140]	; (80002a8 <dataParser+0xd0>)
 800021a:	2201      	movs	r2, #1
 800021c:	751a      	strb	r2, [r3, #20]
		controlSystem.systemState = 1;
 800021e:	4b22      	ldr	r3, [pc, #136]	; (80002a8 <dataParser+0xd0>)
 8000220:	2201      	movs	r2, #1
 8000222:	755a      	strb	r2, [r3, #21]
		int i = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	607b      	str	r3, [r7, #4]
		char *p = strtok(controlSystem.uartMessageData, "=");
 8000228:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <dataParser+0xd0>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4921      	ldr	r1, [pc, #132]	; (80002b4 <dataParser+0xdc>)
 800022e:	4618      	mov	r0, r3
 8000230:	f002 f9da 	bl	80025e8 <strtok>
 8000234:	6038      	str	r0, [r7, #0]
		while(p != NULL){
 8000236:	e00b      	b.n	8000250 <dataParser+0x78>
			parsedData[i++] = p;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	1c5a      	adds	r2, r3, #1
 800023c:	607a      	str	r2, [r7, #4]
 800023e:	491e      	ldr	r1, [pc, #120]	; (80002b8 <dataParser+0xe0>)
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p = strtok(NULL, "=");
 8000246:	491b      	ldr	r1, [pc, #108]	; (80002b4 <dataParser+0xdc>)
 8000248:	2000      	movs	r0, #0
 800024a:	f002 f9cd 	bl	80025e8 <strtok>
 800024e:	6038      	str	r0, [r7, #0]
		while(p != NULL){
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d1f0      	bne.n	8000238 <dataParser+0x60>
		if(!strcmp(parsedData[0], "ledon")){
 8000256:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <dataParser+0xe0>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4918      	ldr	r1, [pc, #96]	; (80002bc <dataParser+0xe4>)
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ff75 	bl	800014c <strcmp>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d109      	bne.n	800027c <dataParser+0xa4>
			controlSystem.ledOnTime =  atoi(parsedData[1]);
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <dataParser+0xe0>)
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	4618      	mov	r0, r3
 800026e:	f002 f86d 	bl	800234c <atoi>
 8000272:	4603      	mov	r3, r0
 8000274:	461a      	mov	r2, r3
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <dataParser+0xd0>)
 8000278:	605a      	str	r2, [r3, #4]
}
 800027a:	e011      	b.n	80002a0 <dataParser+0xc8>
		else if(!strcmp(parsedData[0], "ledoff")){
 800027c:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <dataParser+0xe0>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	490f      	ldr	r1, [pc, #60]	; (80002c0 <dataParser+0xe8>)
 8000282:	4618      	mov	r0, r3
 8000284:	f7ff ff62 	bl	800014c <strcmp>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d108      	bne.n	80002a0 <dataParser+0xc8>
			controlSystem.ledOffTime = atoi(parsedData[1]);
 800028e:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <dataParser+0xe0>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	4618      	mov	r0, r3
 8000294:	f002 f85a 	bl	800234c <atoi>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <dataParser+0xd0>)
 800029e:	609a      	str	r2, [r3, #8]
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000008c 	.word	0x2000008c
 80002ac:	080035dc 	.word	0x080035dc
 80002b0:	080035e4 	.word	0x080035e4
 80002b4:	080035f0 	.word	0x080035f0
 80002b8:	200000b4 	.word	0x200000b4
 80002bc:	080035f4 	.word	0x080035f4
 80002c0:	080035fc 	.word	0x080035fc

080002c4 <uartDataStorage>:
#include "system.h"

struct uartDataStr uartData;
extern struct System controlSystem;

void uartDataStorage(uint8_t *rxTempBuffer){
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]

	uartData.rxBuffer[uartData.rxIndex] = rxTempBuffer[0];
 80002cc:	4b11      	ldr	r3, [pc, #68]	; (8000314 <uartDataStorage+0x50>)
 80002ce:	7d1b      	ldrb	r3, [r3, #20]
 80002d0:	461a      	mov	r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	7819      	ldrb	r1, [r3, #0]
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <uartDataStorage+0x50>)
 80002d8:	5499      	strb	r1, [r3, r2]

	if(uartData.rxBuffer[uartData.rxIndex] == '\n'){	/* bir data gelmiş demektir. buffer'da okunması gereken data var. */
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <uartDataStorage+0x50>)
 80002dc:	7d1b      	ldrb	r3, [r3, #20]
 80002de:	461a      	mov	r2, r3
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <uartDataStorage+0x50>)
 80002e2:	5c9b      	ldrb	r3, [r3, r2]
 80002e4:	2b0a      	cmp	r3, #10
 80002e6:	d102      	bne.n	80002ee <uartDataStorage+0x2a>
		uartData.newDataFlag = 1;
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <uartDataStorage+0x50>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	759a      	strb	r2, [r3, #22]
	}

	uartData.rxIndex++;
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <uartDataStorage+0x50>)
 80002f0:	7d1b      	ldrb	r3, [r3, #20]
 80002f2:	3301      	adds	r3, #1
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4b07      	ldr	r3, [pc, #28]	; (8000314 <uartDataStorage+0x50>)
 80002f8:	751a      	strb	r2, [r3, #20]

	if(uartData.rxIndex == (rxBufferSize-1))
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <uartDataStorage+0x50>)
 80002fc:	7d1b      	ldrb	r3, [r3, #20]
 80002fe:	2b13      	cmp	r3, #19
 8000300:	d102      	bne.n	8000308 <uartDataStorage+0x44>
		uartData.rxIndex = 0;
 8000302:	4b04      	ldr	r3, [pc, #16]	; (8000314 <uartDataStorage+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	751a      	strb	r2, [r3, #20]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	200000c0 	.word	0x200000c0

08000318 <getUartMessage>:

char getUartMessage(struct uartDataStr *uartData){
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]

	if(uartData->newDataFlag == 1){
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	7d9b      	ldrb	r3, [r3, #22]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d134      	bne.n	8000392 <getUartMessage+0x7a>

		uint8_t newDataLineCounter = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	73fb      	strb	r3, [r7, #15]
		uartData->newDataLine = (char*) calloc(uartData->rxIndex+1, sizeof(char));
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	7d1b      	ldrb	r3, [r3, #20]
 8000330:	3301      	adds	r3, #1
 8000332:	2101      	movs	r1, #1
 8000334:	4618      	mov	r0, r3
 8000336:	f002 f80d 	bl	8002354 <calloc>
 800033a:	4603      	mov	r3, r0
 800033c:	461a      	mov	r2, r3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	619a      	str	r2, [r3, #24]

		for(uint8_t i = uartData->rxIndexOld; i < uartData->rxIndex; i++){
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	7d5b      	ldrb	r3, [r3, #21]
 8000346:	73bb      	strb	r3, [r7, #14]
 8000348:	e00c      	b.n	8000364 <getUartMessage+0x4c>
			uartData->newDataLine[newDataLineCounter++] = (char) uartData->rxBuffer[i];
 800034a:	7bba      	ldrb	r2, [r7, #14]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	6999      	ldr	r1, [r3, #24]
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	1c58      	adds	r0, r3, #1
 8000354:	73f8      	strb	r0, [r7, #15]
 8000356:	440b      	add	r3, r1
 8000358:	6879      	ldr	r1, [r7, #4]
 800035a:	5c8a      	ldrb	r2, [r1, r2]
 800035c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = uartData->rxIndexOld; i < uartData->rxIndex; i++){
 800035e:	7bbb      	ldrb	r3, [r7, #14]
 8000360:	3301      	adds	r3, #1
 8000362:	73bb      	strb	r3, [r7, #14]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	7d1b      	ldrb	r3, [r3, #20]
 8000368:	7bba      	ldrb	r2, [r7, #14]
 800036a:	429a      	cmp	r2, r3
 800036c:	d3ed      	bcc.n	800034a <getUartMessage+0x32>
		}

		/*if(controlSystem.echoType == 1)
			echoMessage(uartData);*/

		uartData->rxIndex = 0;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	751a      	strb	r2, [r3, #20]
		uartData->newDataFlag = 0;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2200      	movs	r2, #0
 8000378:	759a      	strb	r2, [r3, #22]
		uartData->echoFlag = 1;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2201      	movs	r2, #1
 800037e:	75da      	strb	r2, [r3, #23]

		controlSystem.uartMessageData = uartData->newDataLine;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <getUartMessage+0x88>)
 8000386:	6013      	str	r3, [r2, #0]

		free(uartData->newDataLine);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4618      	mov	r0, r3
 800038e:	f002 f81b 	bl	80023c8 <free>

	}

	return *uartData->newDataLine;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	781b      	ldrb	r3, [r3, #0]

}
 8000398:	4618      	mov	r0, r3
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000008c 	.word	0x2000008c

080003a4 <echoMessage>:

void echoMessage(struct uartDataStr *uartData){
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	if(uartData->echoFlag == 1){
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	7ddb      	ldrb	r3, [r3, #23]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d10f      	bne.n	80003d4 <echoMessage+0x30>
		uartTransmitData((uint8_t*)uartData->newDataLine, strlen(uartData->newDataLine));
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	699c      	ldr	r4, [r3, #24]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff fecf 	bl	8000160 <strlen>
 80003c2:	4603      	mov	r3, r0
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	4619      	mov	r1, r3
 80003c8:	4620      	mov	r0, r4
 80003ca:	f000 f82b 	bl	8000424 <uartTransmitData>
		uartData->echoFlag = 0;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2200      	movs	r2, #0
 80003d2:	75da      	strb	r2, [r3, #23]
	}
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd90      	pop	{r4, r7, pc}

080003dc <uartReceiveIT>:

#include "uartTransport.h"

uint8_t rxTempBuffer[5];

void uartReceiveIT(){
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, rxTempBuffer, 1);
 80003e0:	2201      	movs	r2, #1
 80003e2:	4903      	ldr	r1, [pc, #12]	; (80003f0 <uartReceiveIT+0x14>)
 80003e4:	4803      	ldr	r0, [pc, #12]	; (80003f4 <uartReceiveIT+0x18>)
 80003e6:	f001 fb58 	bl	8001a9a <HAL_UART_Receive_IT>
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	200000dc 	.word	0x200000dc
 80003f4:	200000e8 	.word	0x200000e8

080003f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]

	if(huart == &huart2){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a06      	ldr	r2, [pc, #24]	; (800041c <HAL_UART_RxCpltCallback+0x24>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d104      	bne.n	8000412 <HAL_UART_RxCpltCallback+0x1a>
		uartDataStorage(rxTempBuffer);
 8000408:	4805      	ldr	r0, [pc, #20]	; (8000420 <HAL_UART_RxCpltCallback+0x28>)
 800040a:	f7ff ff5b 	bl	80002c4 <uartDataStorage>
		uartReceiveIT();
 800040e:	f7ff ffe5 	bl	80003dc <uartReceiveIT>
	}

}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200000e8 	.word	0x200000e8
 8000420:	200000dc 	.word	0x200000dc

08000424 <uartTransmitData>:

void uartTransmitData(uint8_t *data, uint16_t size){
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	460b      	mov	r3, r1
 800042e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, data, size, 100);
 8000430:	887a      	ldrh	r2, [r7, #2]
 8000432:	2364      	movs	r3, #100	; 0x64
 8000434:	6879      	ldr	r1, [r7, #4]
 8000436:	4803      	ldr	r0, [pc, #12]	; (8000444 <uartTransmitData+0x20>)
 8000438:	f001 fa9d 	bl	8001976 <HAL_UART_Transmit>
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200000e8 	.word	0x200000e8

08000448 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <MX_GPIO_Init+0x90>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a1d      	ldr	r2, [pc, #116]	; (80004d8 <MX_GPIO_Init+0x90>)
 8000462:	f043 0310 	orr.w	r3, r3, #16
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_GPIO_Init+0x90>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0310 	and.w	r3, r3, #16
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_GPIO_Init+0x90>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a17      	ldr	r2, [pc, #92]	; (80004d8 <MX_GPIO_Init+0x90>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_GPIO_Init+0x90>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0320 	and.w	r3, r3, #32
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_GPIO_Init+0x90>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a11      	ldr	r2, [pc, #68]	; (80004d8 <MX_GPIO_Init+0x90>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MX_GPIO_Init+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004aa:	480c      	ldr	r0, [pc, #48]	; (80004dc <MX_GPIO_Init+0x94>)
 80004ac:	f000 fde4 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	2302      	movs	r3, #2
 80004c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	4619      	mov	r1, r3
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <MX_GPIO_Init+0x94>)
 80004ca:	f000 fc51 	bl	8000d70 <HAL_GPIO_Init>

}
 80004ce:	bf00      	nop
 80004d0:	3720      	adds	r7, #32
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40011000 	.word	0x40011000

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e4:	f000 fa24 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f80b 	bl	8000502 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f7ff ffac 	bl	8000448 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f97c 	bl	80007ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UserSystemInit();
 80004f4:	f7ff fe3c 	bl	8000170 <UserSystemInit>
  uartReceiveIT();
 80004f8:	f7ff ff70 	bl	80003dc <uartReceiveIT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  task2();
 80004fc:	f7ff fe4e 	bl	800019c <task2>
  {
 8000500:	e7fc      	b.n	80004fc <main+0x1c>

08000502 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b090      	sub	sp, #64	; 0x40
 8000506:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000508:	f107 0318 	add.w	r3, r7, #24
 800050c:	2228      	movs	r2, #40	; 0x28
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f001 ff61 	bl	80023d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000524:	2301      	movs	r3, #1
 8000526:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800052c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000532:	2301      	movs	r3, #1
 8000534:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000536:	2302      	movs	r3, #2
 8000538:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800053a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000540:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000544:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fdac 	bl	80010a8 <HAL_RCC_OscConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000556:	f000 f819 	bl	800058c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	230f      	movs	r3, #15
 800055c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055e:	2302      	movs	r3, #2
 8000560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2102      	movs	r1, #2
 8000574:	4618      	mov	r0, r3
 8000576:	f001 f819 	bl	80015ac <HAL_RCC_ClockConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000580:	f000 f804 	bl	800058c <Error_Handler>
  }
}
 8000584:	bf00      	nop
 8000586:	3740      	adds	r7, #64	; 0x40
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000590:	b672      	cpsid	i
}
 8000592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000594:	e7fe      	b.n	8000594 <Error_Handler+0x8>
	...

08000598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <HAL_MspInit+0x5c>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <HAL_MspInit+0x5c>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6193      	str	r3, [r2, #24]
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_MspInit+0x5c>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <HAL_MspInit+0x5c>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <HAL_MspInit+0x5c>)
 80005bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c0:	61d3      	str	r3, [r2, #28]
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_MspInit+0x5c>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <HAL_MspInit+0x60>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_MspInit+0x60>)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010000 	.word	0x40010000

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <NMI_Handler+0x4>

08000602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <HardFault_Handler+0x4>

08000608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <MemManage_Handler+0x4>

0800060e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <UsageFault_Handler+0x4>

0800061a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr

0800063e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000642:	f000 f9bb 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <USART2_IRQHandler+0x10>)
 8000652:	f001 fa53 	bl	8001afc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200000e8 	.word	0x200000e8

08000660 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	return 1;
 8000664:	2301      	movs	r3, #1
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <_kill>:

int _kill(int pid, int sig)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000678:	f001 fe74 	bl	8002364 <__errno>
 800067c:	4603      	mov	r3, r0
 800067e:	2216      	movs	r2, #22
 8000680:	601a      	str	r2, [r3, #0]
	return -1;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_exit>:

void _exit (int status)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000696:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ffe7 	bl	800066e <_kill>
	while (1) {}		/* Make sure we hang here */
 80006a0:	e7fe      	b.n	80006a0 <_exit+0x12>

080006a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b086      	sub	sp, #24
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e00a      	b.n	80006ca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006b4:	f3af 8000 	nop.w
 80006b8:	4601      	mov	r1, r0
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	60ba      	str	r2, [r7, #8]
 80006c0:	b2ca      	uxtb	r2, r1
 80006c2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	3301      	adds	r3, #1
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	dbf0      	blt.n	80006b4 <_read+0x12>
	}

return len;
 80006d2:	687b      	ldr	r3, [r7, #4]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	e009      	b.n	8000702 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	60ba      	str	r2, [r7, #8]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	3301      	adds	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	429a      	cmp	r2, r3
 8000708:	dbf1      	blt.n	80006ee <_write+0x12>
	}
	return len;
 800070a:	687b      	ldr	r3, [r7, #4]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <_close>:

int _close(int file)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	return -1;
 800071c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800073a:	605a      	str	r2, [r3, #4]
	return 0;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <_isatty>:

int _isatty(int file)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	return 1;
 8000750:	2301      	movs	r3, #1
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	return 0;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800077c:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <_sbrk+0x5c>)
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <_sbrk+0x60>)
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <_sbrk+0x64>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <_sbrk+0x64>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <_sbrk+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d207      	bcs.n	80007b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a4:	f001 fdde 	bl	8002364 <__errno>
 80007a8:	4603      	mov	r3, r0
 80007aa:	220c      	movs	r2, #12
 80007ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007b2:	e009      	b.n	80007c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <_sbrk+0x64>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <_sbrk+0x64>)
 80007c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007c6:	68fb      	ldr	r3, [r7, #12]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20005000 	.word	0x20005000
 80007d4:	00000400 	.word	0x00000400
 80007d8:	200000e4 	.word	0x200000e4
 80007dc:	20000140 	.word	0x20000140

080007e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <MX_USART2_UART_Init+0x50>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000824:	f001 f85a 	bl	80018dc <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082e:	f7ff fead 	bl	800058c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000e8 	.word	0x200000e8
 800083c:	40004400 	.word	0x40004400

08000840 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <HAL_UART_MspInit+0x98>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d137      	bne.n	80008d0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <HAL_UART_MspInit+0x9c>)
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <HAL_UART_MspInit+0x9c>)
 8000866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086a:	61d3      	str	r3, [r2, #28]
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <HAL_UART_MspInit+0x9c>)
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <HAL_UART_MspInit+0x9c>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a17      	ldr	r2, [pc, #92]	; (80008dc <HAL_UART_MspInit+0x9c>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_UART_MspInit+0x9c>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000890:	2304      	movs	r3, #4
 8000892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	480f      	ldr	r0, [pc, #60]	; (80008e0 <HAL_UART_MspInit+0xa0>)
 80008a4:	f000 fa64 	bl	8000d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008a8:	2308      	movs	r3, #8
 80008aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	4809      	ldr	r0, [pc, #36]	; (80008e0 <HAL_UART_MspInit+0xa0>)
 80008bc:	f000 fa58 	bl	8000d70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2101      	movs	r1, #1
 80008c4:	2026      	movs	r0, #38	; 0x26
 80008c6:	f000 f96c 	bl	8000ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ca:	2026      	movs	r0, #38	; 0x26
 80008cc:	f000 f985 	bl	8000bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40010800 	.word	0x40010800

080008e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800090a:	f7ff ff69 	bl	80007e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090e:	f001 fd2f 	bl	8002370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000912:	f7ff fde5 	bl	80004e0 <main>
  bx lr
 8000916:	4770      	bx	lr
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000920:	0800387c 	.word	0x0800387c
  ldr r2, =_sbss
 8000924:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000928:	20000140 	.word	0x20000140

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_Init+0x28>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a07      	ldr	r2, [pc, #28]	; (8000958 <HAL_Init+0x28>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 f923 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000946:	2000      	movs	r0, #0
 8000948:	f000 f808 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094c:	f7ff fe24 	bl	8000598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40022000 	.word	0x40022000

0800095c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x54>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x58>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	fbb3 f3f1 	udiv	r3, r3, r1
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f93b 	bl	8000bf6 <HAL_SYSTICK_Config>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e00e      	b.n	80009a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d80a      	bhi.n	80009a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000998:	f000 f903 	bl	8000ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <HAL_InitTick+0x5c>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000004 	.word	0x20000004

080009bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_IncTick+0x1c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x20>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a03      	ldr	r2, [pc, #12]	; (80009dc <HAL_IncTick+0x20>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	20000008 	.word	0x20000008
 80009dc:	2000012c 	.word	0x2000012c

080009e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <HAL_GetTick+0x10>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	2000012c 	.word	0x2000012c

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db0b      	blt.n	8000a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 021f 	and.w	r2, r3, #31
 8000a70:	4906      	ldr	r1, [pc, #24]	; (8000a8c <__NVIC_EnableIRQ+0x34>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	2001      	movs	r0, #1
 8000a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b58:	d301      	bcc.n	8000b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00f      	b.n	8000b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <SysTick_Config+0x40>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b66:	210f      	movs	r1, #15
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f7ff ff90 	bl	8000a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <SysTick_Config+0x40>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SysTick_Config+0x40>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	e000e010 	.word	0xe000e010

08000b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff2d 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb4:	f7ff ff42 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	6978      	ldr	r0, [r7, #20]
 8000bc0:	f7ff ff90 	bl	8000ae4 <NVIC_EncodePriority>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff5f 	bl	8000a90 <__NVIC_SetPriority>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff35 	bl	8000a58 <__NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ffa2 	bl	8000b48 <SysTick_Config>
 8000c04:	4603      	mov	r3, r0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b085      	sub	sp, #20
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d008      	beq.n	8000c36 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2204      	movs	r2, #4
 8000c28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e020      	b.n	8000c78 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 020e 	bic.w	r2, r2, #14
 8000c44:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 0201 	bic.w	r2, r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c5e:	2101      	movs	r1, #1
 8000c60:	fa01 f202 	lsl.w	r2, r1, r2
 8000c64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
	...

08000c84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d005      	beq.n	8000ca6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e051      	b.n	8000d4a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 020e 	bic.w	r2, r2, #14
 8000cb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0201 	bic.w	r2, r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a22      	ldr	r2, [pc, #136]	; (8000d54 <HAL_DMA_Abort_IT+0xd0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d029      	beq.n	8000d24 <HAL_DMA_Abort_IT+0xa0>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a20      	ldr	r2, [pc, #128]	; (8000d58 <HAL_DMA_Abort_IT+0xd4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d022      	beq.n	8000d20 <HAL_DMA_Abort_IT+0x9c>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <HAL_DMA_Abort_IT+0xd8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d01a      	beq.n	8000d1a <HAL_DMA_Abort_IT+0x96>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a1d      	ldr	r2, [pc, #116]	; (8000d60 <HAL_DMA_Abort_IT+0xdc>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d012      	beq.n	8000d14 <HAL_DMA_Abort_IT+0x90>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <HAL_DMA_Abort_IT+0xe0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d00a      	beq.n	8000d0e <HAL_DMA_Abort_IT+0x8a>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a1a      	ldr	r2, [pc, #104]	; (8000d68 <HAL_DMA_Abort_IT+0xe4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d102      	bne.n	8000d08 <HAL_DMA_Abort_IT+0x84>
 8000d02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d06:	e00e      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d0c:	e00b      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d12:	e008      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d18:	e005      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1e:	e002      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d20:	2310      	movs	r3, #16
 8000d22:	e000      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d24:	2301      	movs	r3, #1
 8000d26:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <HAL_DMA_Abort_IT+0xe8>)
 8000d28:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	4798      	blx	r3
    } 
  }
  return status;
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40020008 	.word	0x40020008
 8000d58:	4002001c 	.word	0x4002001c
 8000d5c:	40020030 	.word	0x40020030
 8000d60:	40020044 	.word	0x40020044
 8000d64:	40020058 	.word	0x40020058
 8000d68:	4002006c 	.word	0x4002006c
 8000d6c:	40020000 	.word	0x40020000

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b08b      	sub	sp, #44	; 0x2c
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	e169      	b.n	8001058 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d84:	2201      	movs	r2, #1
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f040 8158 	bne.w	8001052 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	4a9a      	ldr	r2, [pc, #616]	; (8001010 <HAL_GPIO_Init+0x2a0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d05e      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000dac:	4a98      	ldr	r2, [pc, #608]	; (8001010 <HAL_GPIO_Init+0x2a0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d875      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000db2:	4a98      	ldr	r2, [pc, #608]	; (8001014 <HAL_GPIO_Init+0x2a4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d058      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000db8:	4a96      	ldr	r2, [pc, #600]	; (8001014 <HAL_GPIO_Init+0x2a4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d86f      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000dbe:	4a96      	ldr	r2, [pc, #600]	; (8001018 <HAL_GPIO_Init+0x2a8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d052      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000dc4:	4a94      	ldr	r2, [pc, #592]	; (8001018 <HAL_GPIO_Init+0x2a8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d869      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000dca:	4a94      	ldr	r2, [pc, #592]	; (800101c <HAL_GPIO_Init+0x2ac>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d04c      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000dd0:	4a92      	ldr	r2, [pc, #584]	; (800101c <HAL_GPIO_Init+0x2ac>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d863      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000dd6:	4a92      	ldr	r2, [pc, #584]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d046      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000ddc:	4a90      	ldr	r2, [pc, #576]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d85d      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000de2:	2b12      	cmp	r3, #18
 8000de4:	d82a      	bhi.n	8000e3c <HAL_GPIO_Init+0xcc>
 8000de6:	2b12      	cmp	r3, #18
 8000de8:	d859      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000dea:	a201      	add	r2, pc, #4	; (adr r2, 8000df0 <HAL_GPIO_Init+0x80>)
 8000dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df0:	08000e6b 	.word	0x08000e6b
 8000df4:	08000e45 	.word	0x08000e45
 8000df8:	08000e57 	.word	0x08000e57
 8000dfc:	08000e99 	.word	0x08000e99
 8000e00:	08000e9f 	.word	0x08000e9f
 8000e04:	08000e9f 	.word	0x08000e9f
 8000e08:	08000e9f 	.word	0x08000e9f
 8000e0c:	08000e9f 	.word	0x08000e9f
 8000e10:	08000e9f 	.word	0x08000e9f
 8000e14:	08000e9f 	.word	0x08000e9f
 8000e18:	08000e9f 	.word	0x08000e9f
 8000e1c:	08000e9f 	.word	0x08000e9f
 8000e20:	08000e9f 	.word	0x08000e9f
 8000e24:	08000e9f 	.word	0x08000e9f
 8000e28:	08000e9f 	.word	0x08000e9f
 8000e2c:	08000e9f 	.word	0x08000e9f
 8000e30:	08000e9f 	.word	0x08000e9f
 8000e34:	08000e4d 	.word	0x08000e4d
 8000e38:	08000e61 	.word	0x08000e61
 8000e3c:	4a79      	ldr	r2, [pc, #484]	; (8001024 <HAL_GPIO_Init+0x2b4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e42:	e02c      	b.n	8000e9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	623b      	str	r3, [r7, #32]
          break;
 8000e4a:	e029      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	3304      	adds	r3, #4
 8000e52:	623b      	str	r3, [r7, #32]
          break;
 8000e54:	e024      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	3308      	adds	r3, #8
 8000e5c:	623b      	str	r3, [r7, #32]
          break;
 8000e5e:	e01f      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	330c      	adds	r3, #12
 8000e66:	623b      	str	r3, [r7, #32]
          break;
 8000e68:	e01a      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d102      	bne.n	8000e78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e72:	2304      	movs	r3, #4
 8000e74:	623b      	str	r3, [r7, #32]
          break;
 8000e76:	e013      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d105      	bne.n	8000e8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e80:	2308      	movs	r3, #8
 8000e82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	611a      	str	r2, [r3, #16]
          break;
 8000e8a:	e009      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	615a      	str	r2, [r3, #20]
          break;
 8000e96:	e003      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
          break;
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          break;
 8000e9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2bff      	cmp	r3, #255	; 0xff
 8000ea4:	d801      	bhi.n	8000eaa <HAL_GPIO_Init+0x13a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	e001      	b.n	8000eae <HAL_GPIO_Init+0x13e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3304      	adds	r3, #4
 8000eae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2bff      	cmp	r3, #255	; 0xff
 8000eb4:	d802      	bhi.n	8000ebc <HAL_GPIO_Init+0x14c>
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	e002      	b.n	8000ec2 <HAL_GPIO_Init+0x152>
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	3b08      	subs	r3, #8
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	210f      	movs	r1, #15
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	6a39      	ldr	r1, [r7, #32]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	431a      	orrs	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 80b1 	beq.w	8001052 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ef0:	4b4d      	ldr	r3, [pc, #308]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a4c      	ldr	r2, [pc, #304]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b4a      	ldr	r3, [pc, #296]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f08:	4a48      	ldr	r2, [pc, #288]	; (800102c <HAL_GPIO_Init+0x2bc>)
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a40      	ldr	r2, [pc, #256]	; (8001030 <HAL_GPIO_Init+0x2c0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d013      	beq.n	8000f5c <HAL_GPIO_Init+0x1ec>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a3f      	ldr	r2, [pc, #252]	; (8001034 <HAL_GPIO_Init+0x2c4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d00d      	beq.n	8000f58 <HAL_GPIO_Init+0x1e8>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a3e      	ldr	r2, [pc, #248]	; (8001038 <HAL_GPIO_Init+0x2c8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d007      	beq.n	8000f54 <HAL_GPIO_Init+0x1e4>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a3d      	ldr	r2, [pc, #244]	; (800103c <HAL_GPIO_Init+0x2cc>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d101      	bne.n	8000f50 <HAL_GPIO_Init+0x1e0>
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e006      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f50:	2304      	movs	r3, #4
 8000f52:	e004      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f54:	2302      	movs	r3, #2
 8000f56:	e002      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f60:	f002 0203 	and.w	r2, r2, #3
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	4093      	lsls	r3, r2
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f6e:	492f      	ldr	r1, [pc, #188]	; (800102c <HAL_GPIO_Init+0x2bc>)
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d006      	beq.n	8000f96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f88:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	492c      	ldr	r1, [pc, #176]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	600b      	str	r3, [r1, #0]
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4928      	ldr	r1, [pc, #160]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d006      	beq.n	8000fbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	4922      	ldr	r1, [pc, #136]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	491e      	ldr	r1, [pc, #120]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	4918      	ldr	r1, [pc, #96]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	608b      	str	r3, [r1, #8]
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	4914      	ldr	r1, [pc, #80]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d021      	beq.n	8001044 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	490e      	ldr	r1, [pc, #56]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	60cb      	str	r3, [r1, #12]
 800100c:	e021      	b.n	8001052 <HAL_GPIO_Init+0x2e2>
 800100e:	bf00      	nop
 8001010:	10320000 	.word	0x10320000
 8001014:	10310000 	.word	0x10310000
 8001018:	10220000 	.word	0x10220000
 800101c:	10210000 	.word	0x10210000
 8001020:	10120000 	.word	0x10120000
 8001024:	10110000 	.word	0x10110000
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000
 8001030:	40010800 	.word	0x40010800
 8001034:	40010c00 	.word	0x40010c00
 8001038:	40011000 	.word	0x40011000
 800103c:	40011400 	.word	0x40011400
 8001040:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_GPIO_Init+0x304>)
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	43db      	mvns	r3, r3
 800104c:	4909      	ldr	r1, [pc, #36]	; (8001074 <HAL_GPIO_Init+0x304>)
 800104e:	4013      	ands	r3, r2
 8001050:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	3301      	adds	r3, #1
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	fa22 f303 	lsr.w	r3, r2, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	f47f ae8e 	bne.w	8000d84 <HAL_GPIO_Init+0x14>
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	372c      	adds	r7, #44	; 0x2c
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	40010400 	.word	0x40010400

08001078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
 8001084:	4613      	mov	r3, r2
 8001086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001094:	e003      	b.n	800109e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	041a      	lsls	r2, r3, #16
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	611a      	str	r2, [r3, #16]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e272      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 8087 	beq.w	80011d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c8:	4b92      	ldr	r3, [pc, #584]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 030c 	and.w	r3, r3, #12
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d00c      	beq.n	80010ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d4:	4b8f      	ldr	r3, [pc, #572]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d112      	bne.n	8001106 <HAL_RCC_OscConfig+0x5e>
 80010e0:	4b8c      	ldr	r3, [pc, #560]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ec:	d10b      	bne.n	8001106 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ee:	4b89      	ldr	r3, [pc, #548]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d06c      	beq.n	80011d4 <HAL_RCC_OscConfig+0x12c>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d168      	bne.n	80011d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e24c      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x76>
 8001110:	4b80      	ldr	r3, [pc, #512]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a7f      	ldr	r2, [pc, #508]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	e02e      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0x98>
 8001126:	4b7b      	ldr	r3, [pc, #492]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a7a      	ldr	r2, [pc, #488]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800112c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b78      	ldr	r3, [pc, #480]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a77      	ldr	r2, [pc, #476]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e01d      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0xbc>
 800114a:	4b72      	ldr	r3, [pc, #456]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a71      	ldr	r2, [pc, #452]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b6f      	ldr	r3, [pc, #444]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a6e      	ldr	r2, [pc, #440]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e00b      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 8001164:	4b6b      	ldr	r3, [pc, #428]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a6a      	ldr	r2, [pc, #424]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800116a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b68      	ldr	r3, [pc, #416]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a67      	ldr	r2, [pc, #412]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d013      	beq.n	80011ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fc2c 	bl	80009e0 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fc28 	bl	80009e0 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e200      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0xe4>
 80011aa:	e014      	b.n	80011d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fc18 	bl	80009e0 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fc14 	bl	80009e0 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1ec      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c6:	4b53      	ldr	r3, [pc, #332]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x10c>
 80011d2:	e000      	b.n	80011d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d063      	beq.n	80012aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011e2:	4b4c      	ldr	r3, [pc, #304]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00b      	beq.n	8001206 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ee:	4b49      	ldr	r3, [pc, #292]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d11c      	bne.n	8001234 <HAL_RCC_OscConfig+0x18c>
 80011fa:	4b46      	ldr	r3, [pc, #280]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d116      	bne.n	8001234 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	4b43      	ldr	r3, [pc, #268]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_RCC_OscConfig+0x176>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d001      	beq.n	800121e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e1c0      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4939      	ldr	r1, [pc, #228]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001232:	e03a      	b.n	80012aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d020      	beq.n	800127e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800123c:	4b36      	ldr	r3, [pc, #216]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff fbcd 	bl	80009e0 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124a:	f7ff fbc9 	bl	80009e0 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e1a1      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4927      	ldr	r1, [pc, #156]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
 800127c:	e015      	b.n	80012aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fbac 	bl	80009e0 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128c:	f7ff fba8 	bl	80009e0 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e180      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d03a      	beq.n	800132c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d019      	beq.n	80012f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_RCC_OscConfig+0x274>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c4:	f7ff fb8c 	bl	80009e0 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012cc:	f7ff fb88 	bl	80009e0 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e160      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f000 fad8 	bl	80018a0 <RCC_Delay>
 80012f0:	e01c      	b.n	800132c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_RCC_OscConfig+0x274>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7ff fb72 	bl	80009e0 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fe:	e00f      	b.n	8001320 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fb6e 	bl	80009e0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d908      	bls.n	8001320 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e146      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	42420000 	.word	0x42420000
 800131c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	4b92      	ldr	r3, [pc, #584]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e9      	bne.n	8001300 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80a6 	beq.w	8001486 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133e:	4b8b      	ldr	r3, [pc, #556]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10d      	bne.n	8001366 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b88      	ldr	r3, [pc, #544]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a87      	ldr	r2, [pc, #540]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b85      	ldr	r3, [pc, #532]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001362:	2301      	movs	r3, #1
 8001364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001366:	4b82      	ldr	r3, [pc, #520]	; (8001570 <HAL_RCC_OscConfig+0x4c8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136e:	2b00      	cmp	r3, #0
 8001370:	d118      	bne.n	80013a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001372:	4b7f      	ldr	r3, [pc, #508]	; (8001570 <HAL_RCC_OscConfig+0x4c8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7e      	ldr	r2, [pc, #504]	; (8001570 <HAL_RCC_OscConfig+0x4c8>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137e:	f7ff fb2f 	bl	80009e0 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001386:	f7ff fb2b 	bl	80009e0 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b64      	cmp	r3, #100	; 0x64
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e103      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	4b75      	ldr	r3, [pc, #468]	; (8001570 <HAL_RCC_OscConfig+0x4c8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x312>
 80013ac:	4b6f      	ldr	r3, [pc, #444]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4a6e      	ldr	r2, [pc, #440]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6213      	str	r3, [r2, #32]
 80013b8:	e02d      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x334>
 80013c2:	4b6a      	ldr	r3, [pc, #424]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a69      	ldr	r2, [pc, #420]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6213      	str	r3, [r2, #32]
 80013ce:	4b67      	ldr	r3, [pc, #412]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4a66      	ldr	r2, [pc, #408]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	f023 0304 	bic.w	r3, r3, #4
 80013d8:	6213      	str	r3, [r2, #32]
 80013da:	e01c      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b05      	cmp	r3, #5
 80013e2:	d10c      	bne.n	80013fe <HAL_RCC_OscConfig+0x356>
 80013e4:	4b61      	ldr	r3, [pc, #388]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4a60      	ldr	r2, [pc, #384]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6213      	str	r3, [r2, #32]
 80013f0:	4b5e      	ldr	r3, [pc, #376]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4a5d      	ldr	r2, [pc, #372]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6213      	str	r3, [r2, #32]
 80013fc:	e00b      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013fe:	4b5b      	ldr	r3, [pc, #364]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a5a      	ldr	r2, [pc, #360]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6213      	str	r3, [r2, #32]
 800140a:	4b58      	ldr	r3, [pc, #352]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	4a57      	ldr	r2, [pc, #348]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001410:	f023 0304 	bic.w	r3, r3, #4
 8001414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d015      	beq.n	800144a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7ff fadf 	bl	80009e0 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001424:	e00a      	b.n	800143c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001426:	f7ff fadb 	bl	80009e0 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	f241 3288 	movw	r2, #5000	; 0x1388
 8001434:	4293      	cmp	r3, r2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e0b1      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143c:	4b4b      	ldr	r3, [pc, #300]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0ee      	beq.n	8001426 <HAL_RCC_OscConfig+0x37e>
 8001448:	e014      	b.n	8001474 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144a:	f7ff fac9 	bl	80009e0 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001450:	e00a      	b.n	8001468 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f7ff fac5 	bl	80009e0 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001460:	4293      	cmp	r3, r2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e09b      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001468:	4b40      	ldr	r3, [pc, #256]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1ee      	bne.n	8001452 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d105      	bne.n	8001486 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147a:	4b3c      	ldr	r3, [pc, #240]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a3b      	ldr	r2, [pc, #236]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001484:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8087 	beq.w	800159e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b08      	cmp	r3, #8
 800149a:	d061      	beq.n	8001560 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d146      	bne.n	8001532 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a4:	4b33      	ldr	r3, [pc, #204]	; (8001574 <HAL_RCC_OscConfig+0x4cc>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fa99 	bl	80009e0 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b2:	f7ff fa95 	bl	80009e0 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e06d      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c4:	4b29      	ldr	r3, [pc, #164]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f0      	bne.n	80014b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d8:	d108      	bne.n	80014ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	4921      	ldr	r1, [pc, #132]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a19      	ldr	r1, [r3, #32]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	430b      	orrs	r3, r1
 80014fe:	491b      	ldr	r1, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_RCC_OscConfig+0x4cc>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fa69 	bl	80009e0 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff fa65 	bl	80009e0 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e03d      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x46a>
 8001530:	e035      	b.n	800159e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_RCC_OscConfig+0x4cc>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fa52 	bl	80009e0 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff fa4e 	bl	80009e0 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e026      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_RCC_OscConfig+0x4c4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x498>
 800155e:	e01e      	b.n	800159e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e019      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
 800156c:	40021000 	.word	0x40021000
 8001570:	40007000 	.word	0x40007000
 8001574:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_RCC_OscConfig+0x500>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	429a      	cmp	r2, r3
 800158a:	d106      	bne.n	800159a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	429a      	cmp	r2, r3
 8001598:	d001      	beq.n	800159e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0d0      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c0:	4b6a      	ldr	r3, [pc, #424]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d910      	bls.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b67      	ldr	r3, [pc, #412]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 0207 	bic.w	r2, r3, #7
 80015d6:	4965      	ldr	r1, [pc, #404]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b63      	ldr	r3, [pc, #396]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0b8      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001608:	4b59      	ldr	r3, [pc, #356]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4a58      	ldr	r2, [pc, #352]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001612:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001620:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a52      	ldr	r2, [pc, #328]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800162a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162c:	4b50      	ldr	r3, [pc, #320]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	494d      	ldr	r1, [pc, #308]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d040      	beq.n	80016cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b47      	ldr	r3, [pc, #284]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d115      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e07f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e073      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167a:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e06b      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168a:	4b39      	ldr	r3, [pc, #228]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f023 0203 	bic.w	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4936      	ldr	r1, [pc, #216]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800169c:	f7ff f9a0 	bl	80009e0 <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	e00a      	b.n	80016ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a4:	f7ff f99c 	bl	80009e0 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e053      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 020c 	and.w	r2, r3, #12
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d1eb      	bne.n	80016a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d210      	bcs.n	80016fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 0207 	bic.w	r2, r3, #7
 80016e2:	4922      	ldr	r1, [pc, #136]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e032      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4916      	ldr	r1, [pc, #88]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	4313      	orrs	r3, r2
 8001718:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	490e      	ldr	r1, [pc, #56]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800173a:	f000 f821 	bl	8001780 <HAL_RCC_GetSysClockFreq>
 800173e:	4602      	mov	r2, r0
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	490a      	ldr	r1, [pc, #40]	; (8001774 <HAL_RCC_ClockConfig+0x1c8>)
 800174c:	5ccb      	ldrb	r3, [r1, r3]
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <HAL_RCC_ClockConfig+0x1cc>)
 8001754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_RCC_ClockConfig+0x1d0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff f8fe 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40022000 	.word	0x40022000
 8001770:	40021000 	.word	0x40021000
 8001774:	08003614 	.word	0x08003614
 8001778:	20000000 	.word	0x20000000
 800177c:	20000004 	.word	0x20000004

08001780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001780:	b490      	push	{r4, r7}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001786:	4b29      	ldr	r3, [pc, #164]	; (800182c <HAL_RCC_GetSysClockFreq+0xac>)
 8001788:	1d3c      	adds	r4, r7, #4
 800178a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800178c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001790:	f240 2301 	movw	r3, #513	; 0x201
 8001794:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d002      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x40>
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d003      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0x46>
 80017be:	e02b      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017c2:	623b      	str	r3, [r7, #32]
      break;
 80017c4:	e02b      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	0c9b      	lsrs	r3, r3, #18
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	3328      	adds	r3, #40	; 0x28
 80017d0:	443b      	add	r3, r7
 80017d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d012      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	0c5b      	lsrs	r3, r3, #17
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	3328      	adds	r3, #40	; 0x28
 80017ee:	443b      	add	r3, r7
 80017f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017fa:	fb03 f202 	mul.w	r2, r3, r2
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
 8001806:	e004      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <HAL_RCC_GetSysClockFreq+0xb8>)
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	623b      	str	r3, [r7, #32]
      break;
 8001816:	e002      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb4>)
 800181a:	623b      	str	r3, [r7, #32]
      break;
 800181c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800181e:	6a3b      	ldr	r3, [r7, #32]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bc90      	pop	{r4, r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	08003604 	.word	0x08003604
 8001830:	40021000 	.word	0x40021000
 8001834:	007a1200 	.word	0x007a1200
 8001838:	003d0900 	.word	0x003d0900

0800183c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001840:	4b02      	ldr	r3, [pc, #8]	; (800184c <HAL_RCC_GetHCLKFreq+0x10>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	20000000 	.word	0x20000000

08001850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001854:	f7ff fff2 	bl	800183c <HAL_RCC_GetHCLKFreq>
 8001858:	4602      	mov	r2, r0
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	4903      	ldr	r1, [pc, #12]	; (8001874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001866:	5ccb      	ldrb	r3, [r1, r3]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800186c:	4618      	mov	r0, r3
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000
 8001874:	08003624 	.word	0x08003624

08001878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800187c:	f7ff ffde 	bl	800183c <HAL_RCC_GetHCLKFreq>
 8001880:	4602      	mov	r2, r0
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	0adb      	lsrs	r3, r3, #11
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	4903      	ldr	r1, [pc, #12]	; (800189c <HAL_RCC_GetPCLK2Freq+0x24>)
 800188e:	5ccb      	ldrb	r3, [r1, r3]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	08003624 	.word	0x08003624

080018a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <RCC_Delay+0x34>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <RCC_Delay+0x38>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0a5b      	lsrs	r3, r3, #9
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	fb02 f303 	mul.w	r3, r2, r3
 80018ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018bc:	bf00      	nop
  }
  while (Delay --);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1e5a      	subs	r2, r3, #1
 80018c2:	60fa      	str	r2, [r7, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f9      	bne.n	80018bc <RCC_Delay+0x1c>
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	20000000 	.word	0x20000000
 80018d8:	10624dd3 	.word	0x10624dd3

080018dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e03f      	b.n	800196e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d106      	bne.n	8001908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7fe ff9c 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2224      	movs	r2, #36	; 0x24
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800191e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 fc85 	bl	8002230 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2220      	movs	r2, #32
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2220      	movs	r2, #32
 8001968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b08a      	sub	sp, #40	; 0x28
 800197a:	af02      	add	r7, sp, #8
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	4613      	mov	r3, r2
 8001984:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b20      	cmp	r3, #32
 8001994:	d17c      	bne.n	8001a90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <HAL_UART_Transmit+0x2c>
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e075      	b.n	8001a92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_UART_Transmit+0x3e>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e06e      	b.n	8001a92 <HAL_UART_Transmit+0x11c>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2221      	movs	r2, #33	; 0x21
 80019c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019ca:	f7ff f809 	bl	80009e0 <HAL_GetTick>
 80019ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	88fa      	ldrh	r2, [r7, #6]
 80019da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e4:	d108      	bne.n	80019f8 <HAL_UART_Transmit+0x82>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d104      	bne.n	80019f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	e003      	b.n	8001a00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a08:	e02a      	b.n	8001a60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2200      	movs	r2, #0
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 fa38 	bl	8001e8a <UART_WaitOnFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e036      	b.n	8001a92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10b      	bne.n	8001a42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	e007      	b.n	8001a52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1cf      	bne.n	8001a0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2200      	movs	r2, #0
 8001a72:	2140      	movs	r1, #64	; 0x40
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 fa08 	bl	8001e8a <UART_WaitOnFlagUntilTimeout>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e006      	b.n	8001a92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e000      	b.n	8001a92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001a90:	2302      	movs	r3, #2
  }
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	d11d      	bne.n	8001af0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_UART_Receive_IT+0x26>
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e016      	b.n	8001af2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_UART_Receive_IT+0x38>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e00f      	b.n	8001af2 <HAL_UART_Receive_IT+0x58>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 fa19 	bl	8001f1e <UART_Start_Receive_IT>
 8001aec:	4603      	mov	r3, r0
 8001aee:	e000      	b.n	8001af2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001af0:	2302      	movs	r3, #2
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10d      	bne.n	8001b4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_UART_IRQHandler+0x52>
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	f003 0320 	and.w	r3, r3, #32
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fac9 	bl	80020de <UART_Receive_IT>
      return;
 8001b4c:	e17b      	b.n	8001e46 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80b1 	beq.w	8001cb8 <HAL_UART_IRQHandler+0x1bc>
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <HAL_UART_IRQHandler+0x70>
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80a6 	beq.w	8001cb8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00a      	beq.n	8001b8c <HAL_UART_IRQHandler+0x90>
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00a      	beq.n	8001bac <HAL_UART_IRQHandler+0xb0>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f043 0202 	orr.w	r2, r3, #2
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <HAL_UART_IRQHandler+0xd0>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f043 0204 	orr.w	r2, r3, #4
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00f      	beq.n	8001bf6 <HAL_UART_IRQHandler+0xfa>
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d104      	bne.n	8001bea <HAL_UART_IRQHandler+0xee>
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f043 0208 	orr.w	r2, r3, #8
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 811e 	beq.w	8001e3c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_UART_IRQHandler+0x11e>
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fa62 	bl	80020de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <HAL_UART_IRQHandler+0x146>
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d031      	beq.n	8001ca6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f9a4 	bl	8001f90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d023      	beq.n	8001c9e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c64:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d013      	beq.n	8001c96 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c72:	4a76      	ldr	r2, [pc, #472]	; (8001e4c <HAL_UART_IRQHandler+0x350>)
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f802 	bl	8000c84 <HAL_DMA_Abort_IT>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d016      	beq.n	8001cb4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c90:	4610      	mov	r0, r2
 8001c92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c94:	e00e      	b.n	8001cb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f8e3 	bl	8001e62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c9c:	e00a      	b.n	8001cb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f8df 	bl	8001e62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ca4:	e006      	b.n	8001cb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8db 	bl	8001e62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001cb2:	e0c3      	b.n	8001e3c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cb4:	bf00      	nop
    return;
 8001cb6:	e0c1      	b.n	8001e3c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	f040 80a1 	bne.w	8001e04 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 809b 	beq.w	8001e04 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 8095 	beq.w	8001e04 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d04e      	beq.n	8001d9c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001d08:	8a3b      	ldrh	r3, [r7, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8098 	beq.w	8001e40 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001d14:	8a3a      	ldrh	r2, [r7, #16]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	f080 8092 	bcs.w	8001e40 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	8a3a      	ldrh	r2, [r7, #16]
 8001d20:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d02b      	beq.n	8001d84 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d3a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d5a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0210 	bic.w	r2, r2, #16
 8001d78:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe ff45 	bl	8000c0e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	4619      	mov	r1, r3
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f86d 	bl	8001e74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001d9a:	e051      	b.n	8001e40 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d047      	beq.n	8001e44 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001db4:	8a7b      	ldrh	r3, [r7, #18]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d044      	beq.n	8001e44 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001dc8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0201 	bic.w	r2, r2, #1
 8001dd8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0210 	bic.w	r2, r2, #16
 8001df6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001df8:	8a7b      	ldrh	r3, [r7, #18]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f839 	bl	8001e74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001e02:	e01f      	b.n	8001e44 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d008      	beq.n	8001e20 <HAL_UART_IRQHandler+0x324>
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f8f9 	bl	8002010 <UART_Transmit_IT>
    return;
 8001e1e:	e012      	b.n	8001e46 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00d      	beq.n	8001e46 <HAL_UART_IRQHandler+0x34a>
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f93a 	bl	80020ae <UART_EndTransmit_IT>
    return;
 8001e3a:	e004      	b.n	8001e46 <HAL_UART_IRQHandler+0x34a>
    return;
 8001e3c:	bf00      	nop
 8001e3e:	e002      	b.n	8001e46 <HAL_UART_IRQHandler+0x34a>
      return;
 8001e40:	bf00      	nop
 8001e42:	e000      	b.n	8001e46 <HAL_UART_IRQHandler+0x34a>
      return;
 8001e44:	bf00      	nop
  }
}
 8001e46:	3728      	adds	r7, #40	; 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	08001fe9 	.word	0x08001fe9

08001e50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr

08001e62 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	4613      	mov	r3, r2
 8001e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e9a:	e02c      	b.n	8001ef6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea2:	d028      	beq.n	8001ef6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <UART_WaitOnFlagUntilTimeout+0x30>
 8001eaa:	f7fe fd99 	bl	80009e0 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d21d      	bcs.n	8001ef6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ec8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e00f      	b.n	8001f16 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4013      	ands	r3, r2
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	bf0c      	ite	eq
 8001f06:	2301      	moveq	r3, #1
 8001f08:	2300      	movne	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d0c3      	beq.n	8001e9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	88fa      	ldrh	r2, [r7, #6]
 8001f36:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	88fa      	ldrh	r2, [r7, #6]
 8001f3c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2222      	movs	r2, #34	; 0x22
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f62:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0220 	orr.w	r2, r2, #32
 8001f82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001fa6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0201 	bic.w	r2, r2, #1
 8001fb6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d107      	bne.n	8001fd0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0210 	bic.w	r2, r2, #16
 8001fce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f7ff ff2d 	bl	8001e62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b21      	cmp	r3, #33	; 0x21
 8002022:	d13e      	bne.n	80020a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800202c:	d114      	bne.n	8002058 <UART_Transmit_IT+0x48>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d110      	bne.n	8002058 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800204a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	1c9a      	adds	r2, r3, #2
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	621a      	str	r2, [r3, #32]
 8002056:	e008      	b.n	800206a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	1c59      	adds	r1, r3, #1
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6211      	str	r1, [r2, #32]
 8002062:	781a      	ldrb	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800206e:	b29b      	uxth	r3, r3
 8002070:	3b01      	subs	r3, #1
 8002072:	b29b      	uxth	r3, r3
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4619      	mov	r1, r3
 8002078:	84d1      	strh	r1, [r2, #38]	; 0x26
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10f      	bne.n	800209e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800208c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800209c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e000      	b.n	80020a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80020a2:	2302      	movs	r3, #2
  }
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff febe 	bl	8001e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b22      	cmp	r3, #34	; 0x22
 80020f0:	f040 8099 	bne.w	8002226 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fc:	d117      	bne.n	800212e <UART_Receive_IT+0x50>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d113      	bne.n	800212e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	b29b      	uxth	r3, r3
 8002118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800211c:	b29a      	uxth	r2, r3
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	1c9a      	adds	r2, r3, #2
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
 800212c:	e026      	b.n	800217c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002134:	2300      	movs	r3, #0
 8002136:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002140:	d007      	beq.n	8002152 <UART_Receive_IT+0x74>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10a      	bne.n	8002160 <UART_Receive_IT+0x82>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	e008      	b.n	8002172 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800216c:	b2da      	uxtb	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002180:	b29b      	uxth	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b29b      	uxth	r3, r3
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	4619      	mov	r1, r3
 800218a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800218c:	2b00      	cmp	r3, #0
 800218e:	d148      	bne.n	8002222 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0220 	bic.w	r2, r2, #32
 800219e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d123      	bne.n	8002218 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0210 	bic.w	r2, r2, #16
 80021e4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b10      	cmp	r3, #16
 80021f2:	d10a      	bne.n	800220a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800220e:	4619      	mov	r1, r3
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff fe2f 	bl	8001e74 <HAL_UARTEx_RxEventCallback>
 8002216:	e002      	b.n	800221e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7fe f8ed 	bl	80003f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e002      	b.n	8002228 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e000      	b.n	8002228 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002226:	2302      	movs	r3, #2
  }
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800226a:	f023 030c 	bic.w	r3, r3, #12
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	430b      	orrs	r3, r1
 8002276:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <UART_SetConfig+0x114>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d103      	bne.n	80022a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002298:	f7ff faee 	bl	8001878 <HAL_RCC_GetPCLK2Freq>
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	e002      	b.n	80022a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022a0:	f7ff fad6 	bl	8001850 <HAL_RCC_GetPCLK1Freq>
 80022a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	009a      	lsls	r2, r3, #2
 80022b0:	441a      	add	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022bc:	4a22      	ldr	r2, [pc, #136]	; (8002348 <UART_SetConfig+0x118>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	0119      	lsls	r1, r3, #4
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	009a      	lsls	r2, r3, #2
 80022d0:	441a      	add	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <UART_SetConfig+0x118>)
 80022de:	fba3 0302 	umull	r0, r3, r3, r2
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2064      	movs	r0, #100	; 0x64
 80022e6:	fb00 f303 	mul.w	r3, r0, r3
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	3332      	adds	r3, #50	; 0x32
 80022f0:	4a15      	ldr	r2, [pc, #84]	; (8002348 <UART_SetConfig+0x118>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022fc:	4419      	add	r1, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	009a      	lsls	r2, r3, #2
 8002308:	441a      	add	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	fbb2 f2f3 	udiv	r2, r2, r3
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <UART_SetConfig+0x118>)
 8002316:	fba3 0302 	umull	r0, r3, r3, r2
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2064      	movs	r0, #100	; 0x64
 800231e:	fb00 f303 	mul.w	r3, r0, r3
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	3332      	adds	r3, #50	; 0x32
 8002328:	4a07      	ldr	r2, [pc, #28]	; (8002348 <UART_SetConfig+0x118>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	f003 020f 	and.w	r2, r3, #15
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	440a      	add	r2, r1
 800233a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40013800 	.word	0x40013800
 8002348:	51eb851f 	.word	0x51eb851f

0800234c <atoi>:
 800234c:	220a      	movs	r2, #10
 800234e:	2100      	movs	r1, #0
 8002350:	f000 ba22 	b.w	8002798 <strtol>

08002354 <calloc>:
 8002354:	4b02      	ldr	r3, [pc, #8]	; (8002360 <calloc+0xc>)
 8002356:	460a      	mov	r2, r1
 8002358:	4601      	mov	r1, r0
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	f000 b844 	b.w	80023e8 <_calloc_r>
 8002360:	2000000c 	.word	0x2000000c

08002364 <__errno>:
 8002364:	4b01      	ldr	r3, [pc, #4]	; (800236c <__errno+0x8>)
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	2000000c 	.word	0x2000000c

08002370 <__libc_init_array>:
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	2600      	movs	r6, #0
 8002374:	4d0c      	ldr	r5, [pc, #48]	; (80023a8 <__libc_init_array+0x38>)
 8002376:	4c0d      	ldr	r4, [pc, #52]	; (80023ac <__libc_init_array+0x3c>)
 8002378:	1b64      	subs	r4, r4, r5
 800237a:	10a4      	asrs	r4, r4, #2
 800237c:	42a6      	cmp	r6, r4
 800237e:	d109      	bne.n	8002394 <__libc_init_array+0x24>
 8002380:	f001 f920 	bl	80035c4 <_init>
 8002384:	2600      	movs	r6, #0
 8002386:	4d0a      	ldr	r5, [pc, #40]	; (80023b0 <__libc_init_array+0x40>)
 8002388:	4c0a      	ldr	r4, [pc, #40]	; (80023b4 <__libc_init_array+0x44>)
 800238a:	1b64      	subs	r4, r4, r5
 800238c:	10a4      	asrs	r4, r4, #2
 800238e:	42a6      	cmp	r6, r4
 8002390:	d105      	bne.n	800239e <__libc_init_array+0x2e>
 8002392:	bd70      	pop	{r4, r5, r6, pc}
 8002394:	f855 3b04 	ldr.w	r3, [r5], #4
 8002398:	4798      	blx	r3
 800239a:	3601      	adds	r6, #1
 800239c:	e7ee      	b.n	800237c <__libc_init_array+0xc>
 800239e:	f855 3b04 	ldr.w	r3, [r5], #4
 80023a2:	4798      	blx	r3
 80023a4:	3601      	adds	r6, #1
 80023a6:	e7f2      	b.n	800238e <__libc_init_array+0x1e>
 80023a8:	08003874 	.word	0x08003874
 80023ac:	08003874 	.word	0x08003874
 80023b0:	08003874 	.word	0x08003874
 80023b4:	08003878 	.word	0x08003878

080023b8 <malloc>:
 80023b8:	4b02      	ldr	r3, [pc, #8]	; (80023c4 <malloc+0xc>)
 80023ba:	4601      	mov	r1, r0
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	f000 b88f 	b.w	80024e0 <_malloc_r>
 80023c2:	bf00      	nop
 80023c4:	2000000c 	.word	0x2000000c

080023c8 <free>:
 80023c8:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <free+0xc>)
 80023ca:	4601      	mov	r1, r0
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	f000 b81f 	b.w	8002410 <_free_r>
 80023d2:	bf00      	nop
 80023d4:	2000000c 	.word	0x2000000c

080023d8 <memset>:
 80023d8:	4603      	mov	r3, r0
 80023da:	4402      	add	r2, r0
 80023dc:	4293      	cmp	r3, r2
 80023de:	d100      	bne.n	80023e2 <memset+0xa>
 80023e0:	4770      	bx	lr
 80023e2:	f803 1b01 	strb.w	r1, [r3], #1
 80023e6:	e7f9      	b.n	80023dc <memset+0x4>

080023e8 <_calloc_r>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	fba1 5402 	umull	r5, r4, r1, r2
 80023ee:	b934      	cbnz	r4, 80023fe <_calloc_r+0x16>
 80023f0:	4629      	mov	r1, r5
 80023f2:	f000 f875 	bl	80024e0 <_malloc_r>
 80023f6:	4606      	mov	r6, r0
 80023f8:	b928      	cbnz	r0, 8002406 <_calloc_r+0x1e>
 80023fa:	4630      	mov	r0, r6
 80023fc:	bd70      	pop	{r4, r5, r6, pc}
 80023fe:	220c      	movs	r2, #12
 8002400:	2600      	movs	r6, #0
 8002402:	6002      	str	r2, [r0, #0]
 8002404:	e7f9      	b.n	80023fa <_calloc_r+0x12>
 8002406:	462a      	mov	r2, r5
 8002408:	4621      	mov	r1, r4
 800240a:	f7ff ffe5 	bl	80023d8 <memset>
 800240e:	e7f4      	b.n	80023fa <_calloc_r+0x12>

08002410 <_free_r>:
 8002410:	b538      	push	{r3, r4, r5, lr}
 8002412:	4605      	mov	r5, r0
 8002414:	2900      	cmp	r1, #0
 8002416:	d040      	beq.n	800249a <_free_r+0x8a>
 8002418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800241c:	1f0c      	subs	r4, r1, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	bfb8      	it	lt
 8002422:	18e4      	addlt	r4, r4, r3
 8002424:	f000 f9f2 	bl	800280c <__malloc_lock>
 8002428:	4a1c      	ldr	r2, [pc, #112]	; (800249c <_free_r+0x8c>)
 800242a:	6813      	ldr	r3, [r2, #0]
 800242c:	b933      	cbnz	r3, 800243c <_free_r+0x2c>
 800242e:	6063      	str	r3, [r4, #4]
 8002430:	6014      	str	r4, [r2, #0]
 8002432:	4628      	mov	r0, r5
 8002434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002438:	f000 b9ee 	b.w	8002818 <__malloc_unlock>
 800243c:	42a3      	cmp	r3, r4
 800243e:	d908      	bls.n	8002452 <_free_r+0x42>
 8002440:	6820      	ldr	r0, [r4, #0]
 8002442:	1821      	adds	r1, r4, r0
 8002444:	428b      	cmp	r3, r1
 8002446:	bf01      	itttt	eq
 8002448:	6819      	ldreq	r1, [r3, #0]
 800244a:	685b      	ldreq	r3, [r3, #4]
 800244c:	1809      	addeq	r1, r1, r0
 800244e:	6021      	streq	r1, [r4, #0]
 8002450:	e7ed      	b.n	800242e <_free_r+0x1e>
 8002452:	461a      	mov	r2, r3
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	b10b      	cbz	r3, 800245c <_free_r+0x4c>
 8002458:	42a3      	cmp	r3, r4
 800245a:	d9fa      	bls.n	8002452 <_free_r+0x42>
 800245c:	6811      	ldr	r1, [r2, #0]
 800245e:	1850      	adds	r0, r2, r1
 8002460:	42a0      	cmp	r0, r4
 8002462:	d10b      	bne.n	800247c <_free_r+0x6c>
 8002464:	6820      	ldr	r0, [r4, #0]
 8002466:	4401      	add	r1, r0
 8002468:	1850      	adds	r0, r2, r1
 800246a:	4283      	cmp	r3, r0
 800246c:	6011      	str	r1, [r2, #0]
 800246e:	d1e0      	bne.n	8002432 <_free_r+0x22>
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4401      	add	r1, r0
 8002476:	6011      	str	r1, [r2, #0]
 8002478:	6053      	str	r3, [r2, #4]
 800247a:	e7da      	b.n	8002432 <_free_r+0x22>
 800247c:	d902      	bls.n	8002484 <_free_r+0x74>
 800247e:	230c      	movs	r3, #12
 8002480:	602b      	str	r3, [r5, #0]
 8002482:	e7d6      	b.n	8002432 <_free_r+0x22>
 8002484:	6820      	ldr	r0, [r4, #0]
 8002486:	1821      	adds	r1, r4, r0
 8002488:	428b      	cmp	r3, r1
 800248a:	bf01      	itttt	eq
 800248c:	6819      	ldreq	r1, [r3, #0]
 800248e:	685b      	ldreq	r3, [r3, #4]
 8002490:	1809      	addeq	r1, r1, r0
 8002492:	6021      	streq	r1, [r4, #0]
 8002494:	6063      	str	r3, [r4, #4]
 8002496:	6054      	str	r4, [r2, #4]
 8002498:	e7cb      	b.n	8002432 <_free_r+0x22>
 800249a:	bd38      	pop	{r3, r4, r5, pc}
 800249c:	20000130 	.word	0x20000130

080024a0 <sbrk_aligned>:
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	4e0e      	ldr	r6, [pc, #56]	; (80024dc <sbrk_aligned+0x3c>)
 80024a4:	460c      	mov	r4, r1
 80024a6:	6831      	ldr	r1, [r6, #0]
 80024a8:	4605      	mov	r5, r0
 80024aa:	b911      	cbnz	r1, 80024b2 <sbrk_aligned+0x12>
 80024ac:	f000 f88c 	bl	80025c8 <_sbrk_r>
 80024b0:	6030      	str	r0, [r6, #0]
 80024b2:	4621      	mov	r1, r4
 80024b4:	4628      	mov	r0, r5
 80024b6:	f000 f887 	bl	80025c8 <_sbrk_r>
 80024ba:	1c43      	adds	r3, r0, #1
 80024bc:	d00a      	beq.n	80024d4 <sbrk_aligned+0x34>
 80024be:	1cc4      	adds	r4, r0, #3
 80024c0:	f024 0403 	bic.w	r4, r4, #3
 80024c4:	42a0      	cmp	r0, r4
 80024c6:	d007      	beq.n	80024d8 <sbrk_aligned+0x38>
 80024c8:	1a21      	subs	r1, r4, r0
 80024ca:	4628      	mov	r0, r5
 80024cc:	f000 f87c 	bl	80025c8 <_sbrk_r>
 80024d0:	3001      	adds	r0, #1
 80024d2:	d101      	bne.n	80024d8 <sbrk_aligned+0x38>
 80024d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80024d8:	4620      	mov	r0, r4
 80024da:	bd70      	pop	{r4, r5, r6, pc}
 80024dc:	20000134 	.word	0x20000134

080024e0 <_malloc_r>:
 80024e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024e4:	1ccd      	adds	r5, r1, #3
 80024e6:	f025 0503 	bic.w	r5, r5, #3
 80024ea:	3508      	adds	r5, #8
 80024ec:	2d0c      	cmp	r5, #12
 80024ee:	bf38      	it	cc
 80024f0:	250c      	movcc	r5, #12
 80024f2:	2d00      	cmp	r5, #0
 80024f4:	4607      	mov	r7, r0
 80024f6:	db01      	blt.n	80024fc <_malloc_r+0x1c>
 80024f8:	42a9      	cmp	r1, r5
 80024fa:	d905      	bls.n	8002508 <_malloc_r+0x28>
 80024fc:	230c      	movs	r3, #12
 80024fe:	2600      	movs	r6, #0
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	4630      	mov	r0, r6
 8002504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002508:	4e2e      	ldr	r6, [pc, #184]	; (80025c4 <_malloc_r+0xe4>)
 800250a:	f000 f97f 	bl	800280c <__malloc_lock>
 800250e:	6833      	ldr	r3, [r6, #0]
 8002510:	461c      	mov	r4, r3
 8002512:	bb34      	cbnz	r4, 8002562 <_malloc_r+0x82>
 8002514:	4629      	mov	r1, r5
 8002516:	4638      	mov	r0, r7
 8002518:	f7ff ffc2 	bl	80024a0 <sbrk_aligned>
 800251c:	1c43      	adds	r3, r0, #1
 800251e:	4604      	mov	r4, r0
 8002520:	d14d      	bne.n	80025be <_malloc_r+0xde>
 8002522:	6834      	ldr	r4, [r6, #0]
 8002524:	4626      	mov	r6, r4
 8002526:	2e00      	cmp	r6, #0
 8002528:	d140      	bne.n	80025ac <_malloc_r+0xcc>
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	4631      	mov	r1, r6
 800252e:	4638      	mov	r0, r7
 8002530:	eb04 0803 	add.w	r8, r4, r3
 8002534:	f000 f848 	bl	80025c8 <_sbrk_r>
 8002538:	4580      	cmp	r8, r0
 800253a:	d13a      	bne.n	80025b2 <_malloc_r+0xd2>
 800253c:	6821      	ldr	r1, [r4, #0]
 800253e:	3503      	adds	r5, #3
 8002540:	1a6d      	subs	r5, r5, r1
 8002542:	f025 0503 	bic.w	r5, r5, #3
 8002546:	3508      	adds	r5, #8
 8002548:	2d0c      	cmp	r5, #12
 800254a:	bf38      	it	cc
 800254c:	250c      	movcc	r5, #12
 800254e:	4638      	mov	r0, r7
 8002550:	4629      	mov	r1, r5
 8002552:	f7ff ffa5 	bl	80024a0 <sbrk_aligned>
 8002556:	3001      	adds	r0, #1
 8002558:	d02b      	beq.n	80025b2 <_malloc_r+0xd2>
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	442b      	add	r3, r5
 800255e:	6023      	str	r3, [r4, #0]
 8002560:	e00e      	b.n	8002580 <_malloc_r+0xa0>
 8002562:	6822      	ldr	r2, [r4, #0]
 8002564:	1b52      	subs	r2, r2, r5
 8002566:	d41e      	bmi.n	80025a6 <_malloc_r+0xc6>
 8002568:	2a0b      	cmp	r2, #11
 800256a:	d916      	bls.n	800259a <_malloc_r+0xba>
 800256c:	1961      	adds	r1, r4, r5
 800256e:	42a3      	cmp	r3, r4
 8002570:	6025      	str	r5, [r4, #0]
 8002572:	bf18      	it	ne
 8002574:	6059      	strne	r1, [r3, #4]
 8002576:	6863      	ldr	r3, [r4, #4]
 8002578:	bf08      	it	eq
 800257a:	6031      	streq	r1, [r6, #0]
 800257c:	5162      	str	r2, [r4, r5]
 800257e:	604b      	str	r3, [r1, #4]
 8002580:	4638      	mov	r0, r7
 8002582:	f104 060b 	add.w	r6, r4, #11
 8002586:	f000 f947 	bl	8002818 <__malloc_unlock>
 800258a:	f026 0607 	bic.w	r6, r6, #7
 800258e:	1d23      	adds	r3, r4, #4
 8002590:	1af2      	subs	r2, r6, r3
 8002592:	d0b6      	beq.n	8002502 <_malloc_r+0x22>
 8002594:	1b9b      	subs	r3, r3, r6
 8002596:	50a3      	str	r3, [r4, r2]
 8002598:	e7b3      	b.n	8002502 <_malloc_r+0x22>
 800259a:	6862      	ldr	r2, [r4, #4]
 800259c:	42a3      	cmp	r3, r4
 800259e:	bf0c      	ite	eq
 80025a0:	6032      	streq	r2, [r6, #0]
 80025a2:	605a      	strne	r2, [r3, #4]
 80025a4:	e7ec      	b.n	8002580 <_malloc_r+0xa0>
 80025a6:	4623      	mov	r3, r4
 80025a8:	6864      	ldr	r4, [r4, #4]
 80025aa:	e7b2      	b.n	8002512 <_malloc_r+0x32>
 80025ac:	4634      	mov	r4, r6
 80025ae:	6876      	ldr	r6, [r6, #4]
 80025b0:	e7b9      	b.n	8002526 <_malloc_r+0x46>
 80025b2:	230c      	movs	r3, #12
 80025b4:	4638      	mov	r0, r7
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	f000 f92e 	bl	8002818 <__malloc_unlock>
 80025bc:	e7a1      	b.n	8002502 <_malloc_r+0x22>
 80025be:	6025      	str	r5, [r4, #0]
 80025c0:	e7de      	b.n	8002580 <_malloc_r+0xa0>
 80025c2:	bf00      	nop
 80025c4:	20000130 	.word	0x20000130

080025c8 <_sbrk_r>:
 80025c8:	b538      	push	{r3, r4, r5, lr}
 80025ca:	2300      	movs	r3, #0
 80025cc:	4d05      	ldr	r5, [pc, #20]	; (80025e4 <_sbrk_r+0x1c>)
 80025ce:	4604      	mov	r4, r0
 80025d0:	4608      	mov	r0, r1
 80025d2:	602b      	str	r3, [r5, #0]
 80025d4:	f7fe f8ce 	bl	8000774 <_sbrk>
 80025d8:	1c43      	adds	r3, r0, #1
 80025da:	d102      	bne.n	80025e2 <_sbrk_r+0x1a>
 80025dc:	682b      	ldr	r3, [r5, #0]
 80025de:	b103      	cbz	r3, 80025e2 <_sbrk_r+0x1a>
 80025e0:	6023      	str	r3, [r4, #0]
 80025e2:	bd38      	pop	{r3, r4, r5, pc}
 80025e4:	20000138 	.word	0x20000138

080025e8 <strtok>:
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <strtok+0x5c>)
 80025ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ee:	681f      	ldr	r7, [r3, #0]
 80025f0:	4605      	mov	r5, r0
 80025f2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80025f4:	460e      	mov	r6, r1
 80025f6:	b9ec      	cbnz	r4, 8002634 <strtok+0x4c>
 80025f8:	2050      	movs	r0, #80	; 0x50
 80025fa:	f7ff fedd 	bl	80023b8 <malloc>
 80025fe:	4602      	mov	r2, r0
 8002600:	65b8      	str	r0, [r7, #88]	; 0x58
 8002602:	b920      	cbnz	r0, 800260e <strtok+0x26>
 8002604:	2157      	movs	r1, #87	; 0x57
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <strtok+0x60>)
 8002608:	4810      	ldr	r0, [pc, #64]	; (800264c <strtok+0x64>)
 800260a:	f000 f8cf 	bl	80027ac <__assert_func>
 800260e:	e9c0 4400 	strd	r4, r4, [r0]
 8002612:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8002616:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800261a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800261e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8002622:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8002626:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800262a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800262e:	6184      	str	r4, [r0, #24]
 8002630:	7704      	strb	r4, [r0, #28]
 8002632:	6244      	str	r4, [r0, #36]	; 0x24
 8002634:	4631      	mov	r1, r6
 8002636:	4628      	mov	r0, r5
 8002638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800263a:	2301      	movs	r3, #1
 800263c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002640:	f000 b806 	b.w	8002650 <__strtok_r>
 8002644:	2000000c 	.word	0x2000000c
 8002648:	08003630 	.word	0x08003630
 800264c:	08003647 	.word	0x08003647

08002650 <__strtok_r>:
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002652:	b908      	cbnz	r0, 8002658 <__strtok_r+0x8>
 8002654:	6810      	ldr	r0, [r2, #0]
 8002656:	b188      	cbz	r0, 800267c <__strtok_r+0x2c>
 8002658:	4604      	mov	r4, r0
 800265a:	460f      	mov	r7, r1
 800265c:	4620      	mov	r0, r4
 800265e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002662:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002666:	b91e      	cbnz	r6, 8002670 <__strtok_r+0x20>
 8002668:	b965      	cbnz	r5, 8002684 <__strtok_r+0x34>
 800266a:	4628      	mov	r0, r5
 800266c:	6015      	str	r5, [r2, #0]
 800266e:	e005      	b.n	800267c <__strtok_r+0x2c>
 8002670:	42b5      	cmp	r5, r6
 8002672:	d1f6      	bne.n	8002662 <__strtok_r+0x12>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <__strtok_r+0xa>
 8002678:	6014      	str	r4, [r2, #0]
 800267a:	7003      	strb	r3, [r0, #0]
 800267c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800267e:	461c      	mov	r4, r3
 8002680:	e00c      	b.n	800269c <__strtok_r+0x4c>
 8002682:	b915      	cbnz	r5, 800268a <__strtok_r+0x3a>
 8002684:	460e      	mov	r6, r1
 8002686:	f814 3b01 	ldrb.w	r3, [r4], #1
 800268a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800268e:	42ab      	cmp	r3, r5
 8002690:	d1f7      	bne.n	8002682 <__strtok_r+0x32>
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f3      	beq.n	800267e <__strtok_r+0x2e>
 8002696:	2300      	movs	r3, #0
 8002698:	f804 3c01 	strb.w	r3, [r4, #-1]
 800269c:	6014      	str	r4, [r2, #0]
 800269e:	e7ed      	b.n	800267c <__strtok_r+0x2c>

080026a0 <_strtol_l.constprop.0>:
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026a6:	4680      	mov	r8, r0
 80026a8:	d001      	beq.n	80026ae <_strtol_l.constprop.0+0xe>
 80026aa:	2b24      	cmp	r3, #36	; 0x24
 80026ac:	d906      	bls.n	80026bc <_strtol_l.constprop.0+0x1c>
 80026ae:	f7ff fe59 	bl	8002364 <__errno>
 80026b2:	2316      	movs	r3, #22
 80026b4:	6003      	str	r3, [r0, #0]
 80026b6:	2000      	movs	r0, #0
 80026b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026bc:	460d      	mov	r5, r1
 80026be:	4f35      	ldr	r7, [pc, #212]	; (8002794 <_strtol_l.constprop.0+0xf4>)
 80026c0:	4628      	mov	r0, r5
 80026c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80026c6:	5de6      	ldrb	r6, [r4, r7]
 80026c8:	f016 0608 	ands.w	r6, r6, #8
 80026cc:	d1f8      	bne.n	80026c0 <_strtol_l.constprop.0+0x20>
 80026ce:	2c2d      	cmp	r4, #45	; 0x2d
 80026d0:	d12f      	bne.n	8002732 <_strtol_l.constprop.0+0x92>
 80026d2:	2601      	movs	r6, #1
 80026d4:	782c      	ldrb	r4, [r5, #0]
 80026d6:	1c85      	adds	r5, r0, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d057      	beq.n	800278c <_strtol_l.constprop.0+0xec>
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d109      	bne.n	80026f4 <_strtol_l.constprop.0+0x54>
 80026e0:	2c30      	cmp	r4, #48	; 0x30
 80026e2:	d107      	bne.n	80026f4 <_strtol_l.constprop.0+0x54>
 80026e4:	7828      	ldrb	r0, [r5, #0]
 80026e6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80026ea:	2858      	cmp	r0, #88	; 0x58
 80026ec:	d149      	bne.n	8002782 <_strtol_l.constprop.0+0xe2>
 80026ee:	2310      	movs	r3, #16
 80026f0:	786c      	ldrb	r4, [r5, #1]
 80026f2:	3502      	adds	r5, #2
 80026f4:	2700      	movs	r7, #0
 80026f6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80026fa:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80026fe:	fbbe f9f3 	udiv	r9, lr, r3
 8002702:	4638      	mov	r0, r7
 8002704:	fb03 ea19 	mls	sl, r3, r9, lr
 8002708:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800270c:	f1bc 0f09 	cmp.w	ip, #9
 8002710:	d814      	bhi.n	800273c <_strtol_l.constprop.0+0x9c>
 8002712:	4664      	mov	r4, ip
 8002714:	42a3      	cmp	r3, r4
 8002716:	dd22      	ble.n	800275e <_strtol_l.constprop.0+0xbe>
 8002718:	2f00      	cmp	r7, #0
 800271a:	db1d      	blt.n	8002758 <_strtol_l.constprop.0+0xb8>
 800271c:	4581      	cmp	r9, r0
 800271e:	d31b      	bcc.n	8002758 <_strtol_l.constprop.0+0xb8>
 8002720:	d101      	bne.n	8002726 <_strtol_l.constprop.0+0x86>
 8002722:	45a2      	cmp	sl, r4
 8002724:	db18      	blt.n	8002758 <_strtol_l.constprop.0+0xb8>
 8002726:	2701      	movs	r7, #1
 8002728:	fb00 4003 	mla	r0, r0, r3, r4
 800272c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002730:	e7ea      	b.n	8002708 <_strtol_l.constprop.0+0x68>
 8002732:	2c2b      	cmp	r4, #43	; 0x2b
 8002734:	bf04      	itt	eq
 8002736:	782c      	ldrbeq	r4, [r5, #0]
 8002738:	1c85      	addeq	r5, r0, #2
 800273a:	e7cd      	b.n	80026d8 <_strtol_l.constprop.0+0x38>
 800273c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002740:	f1bc 0f19 	cmp.w	ip, #25
 8002744:	d801      	bhi.n	800274a <_strtol_l.constprop.0+0xaa>
 8002746:	3c37      	subs	r4, #55	; 0x37
 8002748:	e7e4      	b.n	8002714 <_strtol_l.constprop.0+0x74>
 800274a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800274e:	f1bc 0f19 	cmp.w	ip, #25
 8002752:	d804      	bhi.n	800275e <_strtol_l.constprop.0+0xbe>
 8002754:	3c57      	subs	r4, #87	; 0x57
 8002756:	e7dd      	b.n	8002714 <_strtol_l.constprop.0+0x74>
 8002758:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800275c:	e7e6      	b.n	800272c <_strtol_l.constprop.0+0x8c>
 800275e:	2f00      	cmp	r7, #0
 8002760:	da07      	bge.n	8002772 <_strtol_l.constprop.0+0xd2>
 8002762:	2322      	movs	r3, #34	; 0x22
 8002764:	4670      	mov	r0, lr
 8002766:	f8c8 3000 	str.w	r3, [r8]
 800276a:	2a00      	cmp	r2, #0
 800276c:	d0a4      	beq.n	80026b8 <_strtol_l.constprop.0+0x18>
 800276e:	1e69      	subs	r1, r5, #1
 8002770:	e005      	b.n	800277e <_strtol_l.constprop.0+0xde>
 8002772:	b106      	cbz	r6, 8002776 <_strtol_l.constprop.0+0xd6>
 8002774:	4240      	negs	r0, r0
 8002776:	2a00      	cmp	r2, #0
 8002778:	d09e      	beq.n	80026b8 <_strtol_l.constprop.0+0x18>
 800277a:	2f00      	cmp	r7, #0
 800277c:	d1f7      	bne.n	800276e <_strtol_l.constprop.0+0xce>
 800277e:	6011      	str	r1, [r2, #0]
 8002780:	e79a      	b.n	80026b8 <_strtol_l.constprop.0+0x18>
 8002782:	2430      	movs	r4, #48	; 0x30
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1b5      	bne.n	80026f4 <_strtol_l.constprop.0+0x54>
 8002788:	2308      	movs	r3, #8
 800278a:	e7b3      	b.n	80026f4 <_strtol_l.constprop.0+0x54>
 800278c:	2c30      	cmp	r4, #48	; 0x30
 800278e:	d0a9      	beq.n	80026e4 <_strtol_l.constprop.0+0x44>
 8002790:	230a      	movs	r3, #10
 8002792:	e7af      	b.n	80026f4 <_strtol_l.constprop.0+0x54>
 8002794:	080036e1 	.word	0x080036e1

08002798 <strtol>:
 8002798:	4613      	mov	r3, r2
 800279a:	460a      	mov	r2, r1
 800279c:	4601      	mov	r1, r0
 800279e:	4802      	ldr	r0, [pc, #8]	; (80027a8 <strtol+0x10>)
 80027a0:	6800      	ldr	r0, [r0, #0]
 80027a2:	f7ff bf7d 	b.w	80026a0 <_strtol_l.constprop.0>
 80027a6:	bf00      	nop
 80027a8:	2000000c 	.word	0x2000000c

080027ac <__assert_func>:
 80027ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80027ae:	4614      	mov	r4, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <__assert_func+0x2c>)
 80027b4:	4605      	mov	r5, r0
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68d8      	ldr	r0, [r3, #12]
 80027ba:	b14c      	cbz	r4, 80027d0 <__assert_func+0x24>
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <__assert_func+0x30>)
 80027be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80027c2:	9100      	str	r1, [sp, #0]
 80027c4:	462b      	mov	r3, r5
 80027c6:	4906      	ldr	r1, [pc, #24]	; (80027e0 <__assert_func+0x34>)
 80027c8:	f000 f80e 	bl	80027e8 <fiprintf>
 80027cc:	f000 fbd8 	bl	8002f80 <abort>
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <__assert_func+0x38>)
 80027d2:	461c      	mov	r4, r3
 80027d4:	e7f3      	b.n	80027be <__assert_func+0x12>
 80027d6:	bf00      	nop
 80027d8:	2000000c 	.word	0x2000000c
 80027dc:	080036a4 	.word	0x080036a4
 80027e0:	080036b1 	.word	0x080036b1
 80027e4:	080036df 	.word	0x080036df

080027e8 <fiprintf>:
 80027e8:	b40e      	push	{r1, r2, r3}
 80027ea:	b503      	push	{r0, r1, lr}
 80027ec:	4601      	mov	r1, r0
 80027ee:	ab03      	add	r3, sp, #12
 80027f0:	4805      	ldr	r0, [pc, #20]	; (8002808 <fiprintf+0x20>)
 80027f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80027f6:	6800      	ldr	r0, [r0, #0]
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	f000 f83b 	bl	8002874 <_vfiprintf_r>
 80027fe:	b002      	add	sp, #8
 8002800:	f85d eb04 	ldr.w	lr, [sp], #4
 8002804:	b003      	add	sp, #12
 8002806:	4770      	bx	lr
 8002808:	2000000c 	.word	0x2000000c

0800280c <__malloc_lock>:
 800280c:	4801      	ldr	r0, [pc, #4]	; (8002814 <__malloc_lock+0x8>)
 800280e:	f000 bd73 	b.w	80032f8 <__retarget_lock_acquire_recursive>
 8002812:	bf00      	nop
 8002814:	2000013c 	.word	0x2000013c

08002818 <__malloc_unlock>:
 8002818:	4801      	ldr	r0, [pc, #4]	; (8002820 <__malloc_unlock+0x8>)
 800281a:	f000 bd6e 	b.w	80032fa <__retarget_lock_release_recursive>
 800281e:	bf00      	nop
 8002820:	2000013c 	.word	0x2000013c

08002824 <__sfputc_r>:
 8002824:	6893      	ldr	r3, [r2, #8]
 8002826:	b410      	push	{r4}
 8002828:	3b01      	subs	r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	6093      	str	r3, [r2, #8]
 800282e:	da07      	bge.n	8002840 <__sfputc_r+0x1c>
 8002830:	6994      	ldr	r4, [r2, #24]
 8002832:	42a3      	cmp	r3, r4
 8002834:	db01      	blt.n	800283a <__sfputc_r+0x16>
 8002836:	290a      	cmp	r1, #10
 8002838:	d102      	bne.n	8002840 <__sfputc_r+0x1c>
 800283a:	bc10      	pop	{r4}
 800283c:	f000 bae0 	b.w	8002e00 <__swbuf_r>
 8002840:	6813      	ldr	r3, [r2, #0]
 8002842:	1c58      	adds	r0, r3, #1
 8002844:	6010      	str	r0, [r2, #0]
 8002846:	7019      	strb	r1, [r3, #0]
 8002848:	4608      	mov	r0, r1
 800284a:	bc10      	pop	{r4}
 800284c:	4770      	bx	lr

0800284e <__sfputs_r>:
 800284e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002850:	4606      	mov	r6, r0
 8002852:	460f      	mov	r7, r1
 8002854:	4614      	mov	r4, r2
 8002856:	18d5      	adds	r5, r2, r3
 8002858:	42ac      	cmp	r4, r5
 800285a:	d101      	bne.n	8002860 <__sfputs_r+0x12>
 800285c:	2000      	movs	r0, #0
 800285e:	e007      	b.n	8002870 <__sfputs_r+0x22>
 8002860:	463a      	mov	r2, r7
 8002862:	4630      	mov	r0, r6
 8002864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002868:	f7ff ffdc 	bl	8002824 <__sfputc_r>
 800286c:	1c43      	adds	r3, r0, #1
 800286e:	d1f3      	bne.n	8002858 <__sfputs_r+0xa>
 8002870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002874 <_vfiprintf_r>:
 8002874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002878:	460d      	mov	r5, r1
 800287a:	4614      	mov	r4, r2
 800287c:	4698      	mov	r8, r3
 800287e:	4606      	mov	r6, r0
 8002880:	b09d      	sub	sp, #116	; 0x74
 8002882:	b118      	cbz	r0, 800288c <_vfiprintf_r+0x18>
 8002884:	6983      	ldr	r3, [r0, #24]
 8002886:	b90b      	cbnz	r3, 800288c <_vfiprintf_r+0x18>
 8002888:	f000 fc98 	bl	80031bc <__sinit>
 800288c:	4b89      	ldr	r3, [pc, #548]	; (8002ab4 <_vfiprintf_r+0x240>)
 800288e:	429d      	cmp	r5, r3
 8002890:	d11b      	bne.n	80028ca <_vfiprintf_r+0x56>
 8002892:	6875      	ldr	r5, [r6, #4]
 8002894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002896:	07d9      	lsls	r1, r3, #31
 8002898:	d405      	bmi.n	80028a6 <_vfiprintf_r+0x32>
 800289a:	89ab      	ldrh	r3, [r5, #12]
 800289c:	059a      	lsls	r2, r3, #22
 800289e:	d402      	bmi.n	80028a6 <_vfiprintf_r+0x32>
 80028a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028a2:	f000 fd29 	bl	80032f8 <__retarget_lock_acquire_recursive>
 80028a6:	89ab      	ldrh	r3, [r5, #12]
 80028a8:	071b      	lsls	r3, r3, #28
 80028aa:	d501      	bpl.n	80028b0 <_vfiprintf_r+0x3c>
 80028ac:	692b      	ldr	r3, [r5, #16]
 80028ae:	b9eb      	cbnz	r3, 80028ec <_vfiprintf_r+0x78>
 80028b0:	4629      	mov	r1, r5
 80028b2:	4630      	mov	r0, r6
 80028b4:	f000 faf6 	bl	8002ea4 <__swsetup_r>
 80028b8:	b1c0      	cbz	r0, 80028ec <_vfiprintf_r+0x78>
 80028ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028bc:	07dc      	lsls	r4, r3, #31
 80028be:	d50e      	bpl.n	80028de <_vfiprintf_r+0x6a>
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028c4:	b01d      	add	sp, #116	; 0x74
 80028c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028ca:	4b7b      	ldr	r3, [pc, #492]	; (8002ab8 <_vfiprintf_r+0x244>)
 80028cc:	429d      	cmp	r5, r3
 80028ce:	d101      	bne.n	80028d4 <_vfiprintf_r+0x60>
 80028d0:	68b5      	ldr	r5, [r6, #8]
 80028d2:	e7df      	b.n	8002894 <_vfiprintf_r+0x20>
 80028d4:	4b79      	ldr	r3, [pc, #484]	; (8002abc <_vfiprintf_r+0x248>)
 80028d6:	429d      	cmp	r5, r3
 80028d8:	bf08      	it	eq
 80028da:	68f5      	ldreq	r5, [r6, #12]
 80028dc:	e7da      	b.n	8002894 <_vfiprintf_r+0x20>
 80028de:	89ab      	ldrh	r3, [r5, #12]
 80028e0:	0598      	lsls	r0, r3, #22
 80028e2:	d4ed      	bmi.n	80028c0 <_vfiprintf_r+0x4c>
 80028e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028e6:	f000 fd08 	bl	80032fa <__retarget_lock_release_recursive>
 80028ea:	e7e9      	b.n	80028c0 <_vfiprintf_r+0x4c>
 80028ec:	2300      	movs	r3, #0
 80028ee:	9309      	str	r3, [sp, #36]	; 0x24
 80028f0:	2320      	movs	r3, #32
 80028f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028f6:	2330      	movs	r3, #48	; 0x30
 80028f8:	f04f 0901 	mov.w	r9, #1
 80028fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002900:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002ac0 <_vfiprintf_r+0x24c>
 8002904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002908:	4623      	mov	r3, r4
 800290a:	469a      	mov	sl, r3
 800290c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002910:	b10a      	cbz	r2, 8002916 <_vfiprintf_r+0xa2>
 8002912:	2a25      	cmp	r2, #37	; 0x25
 8002914:	d1f9      	bne.n	800290a <_vfiprintf_r+0x96>
 8002916:	ebba 0b04 	subs.w	fp, sl, r4
 800291a:	d00b      	beq.n	8002934 <_vfiprintf_r+0xc0>
 800291c:	465b      	mov	r3, fp
 800291e:	4622      	mov	r2, r4
 8002920:	4629      	mov	r1, r5
 8002922:	4630      	mov	r0, r6
 8002924:	f7ff ff93 	bl	800284e <__sfputs_r>
 8002928:	3001      	adds	r0, #1
 800292a:	f000 80aa 	beq.w	8002a82 <_vfiprintf_r+0x20e>
 800292e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002930:	445a      	add	r2, fp
 8002932:	9209      	str	r2, [sp, #36]	; 0x24
 8002934:	f89a 3000 	ldrb.w	r3, [sl]
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80a2 	beq.w	8002a82 <_vfiprintf_r+0x20e>
 800293e:	2300      	movs	r3, #0
 8002940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002948:	f10a 0a01 	add.w	sl, sl, #1
 800294c:	9304      	str	r3, [sp, #16]
 800294e:	9307      	str	r3, [sp, #28]
 8002950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002954:	931a      	str	r3, [sp, #104]	; 0x68
 8002956:	4654      	mov	r4, sl
 8002958:	2205      	movs	r2, #5
 800295a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800295e:	4858      	ldr	r0, [pc, #352]	; (8002ac0 <_vfiprintf_r+0x24c>)
 8002960:	f000 fd32 	bl	80033c8 <memchr>
 8002964:	9a04      	ldr	r2, [sp, #16]
 8002966:	b9d8      	cbnz	r0, 80029a0 <_vfiprintf_r+0x12c>
 8002968:	06d1      	lsls	r1, r2, #27
 800296a:	bf44      	itt	mi
 800296c:	2320      	movmi	r3, #32
 800296e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002972:	0713      	lsls	r3, r2, #28
 8002974:	bf44      	itt	mi
 8002976:	232b      	movmi	r3, #43	; 0x2b
 8002978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800297c:	f89a 3000 	ldrb.w	r3, [sl]
 8002980:	2b2a      	cmp	r3, #42	; 0x2a
 8002982:	d015      	beq.n	80029b0 <_vfiprintf_r+0x13c>
 8002984:	4654      	mov	r4, sl
 8002986:	2000      	movs	r0, #0
 8002988:	f04f 0c0a 	mov.w	ip, #10
 800298c:	9a07      	ldr	r2, [sp, #28]
 800298e:	4621      	mov	r1, r4
 8002990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002994:	3b30      	subs	r3, #48	; 0x30
 8002996:	2b09      	cmp	r3, #9
 8002998:	d94e      	bls.n	8002a38 <_vfiprintf_r+0x1c4>
 800299a:	b1b0      	cbz	r0, 80029ca <_vfiprintf_r+0x156>
 800299c:	9207      	str	r2, [sp, #28]
 800299e:	e014      	b.n	80029ca <_vfiprintf_r+0x156>
 80029a0:	eba0 0308 	sub.w	r3, r0, r8
 80029a4:	fa09 f303 	lsl.w	r3, r9, r3
 80029a8:	4313      	orrs	r3, r2
 80029aa:	46a2      	mov	sl, r4
 80029ac:	9304      	str	r3, [sp, #16]
 80029ae:	e7d2      	b.n	8002956 <_vfiprintf_r+0xe2>
 80029b0:	9b03      	ldr	r3, [sp, #12]
 80029b2:	1d19      	adds	r1, r3, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	9103      	str	r1, [sp, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bfbb      	ittet	lt
 80029bc:	425b      	neglt	r3, r3
 80029be:	f042 0202 	orrlt.w	r2, r2, #2
 80029c2:	9307      	strge	r3, [sp, #28]
 80029c4:	9307      	strlt	r3, [sp, #28]
 80029c6:	bfb8      	it	lt
 80029c8:	9204      	strlt	r2, [sp, #16]
 80029ca:	7823      	ldrb	r3, [r4, #0]
 80029cc:	2b2e      	cmp	r3, #46	; 0x2e
 80029ce:	d10c      	bne.n	80029ea <_vfiprintf_r+0x176>
 80029d0:	7863      	ldrb	r3, [r4, #1]
 80029d2:	2b2a      	cmp	r3, #42	; 0x2a
 80029d4:	d135      	bne.n	8002a42 <_vfiprintf_r+0x1ce>
 80029d6:	9b03      	ldr	r3, [sp, #12]
 80029d8:	3402      	adds	r4, #2
 80029da:	1d1a      	adds	r2, r3, #4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	9203      	str	r2, [sp, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bfb8      	it	lt
 80029e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80029e8:	9305      	str	r3, [sp, #20]
 80029ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002ac4 <_vfiprintf_r+0x250>
 80029ee:	2203      	movs	r2, #3
 80029f0:	4650      	mov	r0, sl
 80029f2:	7821      	ldrb	r1, [r4, #0]
 80029f4:	f000 fce8 	bl	80033c8 <memchr>
 80029f8:	b140      	cbz	r0, 8002a0c <_vfiprintf_r+0x198>
 80029fa:	2340      	movs	r3, #64	; 0x40
 80029fc:	eba0 000a 	sub.w	r0, r0, sl
 8002a00:	fa03 f000 	lsl.w	r0, r3, r0
 8002a04:	9b04      	ldr	r3, [sp, #16]
 8002a06:	3401      	adds	r4, #1
 8002a08:	4303      	orrs	r3, r0
 8002a0a:	9304      	str	r3, [sp, #16]
 8002a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a10:	2206      	movs	r2, #6
 8002a12:	482d      	ldr	r0, [pc, #180]	; (8002ac8 <_vfiprintf_r+0x254>)
 8002a14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a18:	f000 fcd6 	bl	80033c8 <memchr>
 8002a1c:	2800      	cmp	r0, #0
 8002a1e:	d03f      	beq.n	8002aa0 <_vfiprintf_r+0x22c>
 8002a20:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <_vfiprintf_r+0x258>)
 8002a22:	bb1b      	cbnz	r3, 8002a6c <_vfiprintf_r+0x1f8>
 8002a24:	9b03      	ldr	r3, [sp, #12]
 8002a26:	3307      	adds	r3, #7
 8002a28:	f023 0307 	bic.w	r3, r3, #7
 8002a2c:	3308      	adds	r3, #8
 8002a2e:	9303      	str	r3, [sp, #12]
 8002a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a32:	443b      	add	r3, r7
 8002a34:	9309      	str	r3, [sp, #36]	; 0x24
 8002a36:	e767      	b.n	8002908 <_vfiprintf_r+0x94>
 8002a38:	460c      	mov	r4, r1
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a40:	e7a5      	b.n	800298e <_vfiprintf_r+0x11a>
 8002a42:	2300      	movs	r3, #0
 8002a44:	f04f 0c0a 	mov.w	ip, #10
 8002a48:	4619      	mov	r1, r3
 8002a4a:	3401      	adds	r4, #1
 8002a4c:	9305      	str	r3, [sp, #20]
 8002a4e:	4620      	mov	r0, r4
 8002a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a54:	3a30      	subs	r2, #48	; 0x30
 8002a56:	2a09      	cmp	r2, #9
 8002a58:	d903      	bls.n	8002a62 <_vfiprintf_r+0x1ee>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0c5      	beq.n	80029ea <_vfiprintf_r+0x176>
 8002a5e:	9105      	str	r1, [sp, #20]
 8002a60:	e7c3      	b.n	80029ea <_vfiprintf_r+0x176>
 8002a62:	4604      	mov	r4, r0
 8002a64:	2301      	movs	r3, #1
 8002a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a6a:	e7f0      	b.n	8002a4e <_vfiprintf_r+0x1da>
 8002a6c:	ab03      	add	r3, sp, #12
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	462a      	mov	r2, r5
 8002a72:	4630      	mov	r0, r6
 8002a74:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <_vfiprintf_r+0x25c>)
 8002a76:	a904      	add	r1, sp, #16
 8002a78:	f3af 8000 	nop.w
 8002a7c:	4607      	mov	r7, r0
 8002a7e:	1c78      	adds	r0, r7, #1
 8002a80:	d1d6      	bne.n	8002a30 <_vfiprintf_r+0x1bc>
 8002a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a84:	07d9      	lsls	r1, r3, #31
 8002a86:	d405      	bmi.n	8002a94 <_vfiprintf_r+0x220>
 8002a88:	89ab      	ldrh	r3, [r5, #12]
 8002a8a:	059a      	lsls	r2, r3, #22
 8002a8c:	d402      	bmi.n	8002a94 <_vfiprintf_r+0x220>
 8002a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a90:	f000 fc33 	bl	80032fa <__retarget_lock_release_recursive>
 8002a94:	89ab      	ldrh	r3, [r5, #12]
 8002a96:	065b      	lsls	r3, r3, #25
 8002a98:	f53f af12 	bmi.w	80028c0 <_vfiprintf_r+0x4c>
 8002a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a9e:	e711      	b.n	80028c4 <_vfiprintf_r+0x50>
 8002aa0:	ab03      	add	r3, sp, #12
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	462a      	mov	r2, r5
 8002aa6:	4630      	mov	r0, r6
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <_vfiprintf_r+0x25c>)
 8002aaa:	a904      	add	r1, sp, #16
 8002aac:	f000 f882 	bl	8002bb4 <_printf_i>
 8002ab0:	e7e4      	b.n	8002a7c <_vfiprintf_r+0x208>
 8002ab2:	bf00      	nop
 8002ab4:	08003834 	.word	0x08003834
 8002ab8:	08003854 	.word	0x08003854
 8002abc:	08003814 	.word	0x08003814
 8002ac0:	080037e1 	.word	0x080037e1
 8002ac4:	080037e7 	.word	0x080037e7
 8002ac8:	080037eb 	.word	0x080037eb
 8002acc:	00000000 	.word	0x00000000
 8002ad0:	0800284f 	.word	0x0800284f

08002ad4 <_printf_common>:
 8002ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ad8:	4616      	mov	r6, r2
 8002ada:	4699      	mov	r9, r3
 8002adc:	688a      	ldr	r2, [r1, #8]
 8002ade:	690b      	ldr	r3, [r1, #16]
 8002ae0:	4607      	mov	r7, r0
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	bfb8      	it	lt
 8002ae6:	4613      	movlt	r3, r2
 8002ae8:	6033      	str	r3, [r6, #0]
 8002aea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002aee:	460c      	mov	r4, r1
 8002af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002af4:	b10a      	cbz	r2, 8002afa <_printf_common+0x26>
 8002af6:	3301      	adds	r3, #1
 8002af8:	6033      	str	r3, [r6, #0]
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	0699      	lsls	r1, r3, #26
 8002afe:	bf42      	ittt	mi
 8002b00:	6833      	ldrmi	r3, [r6, #0]
 8002b02:	3302      	addmi	r3, #2
 8002b04:	6033      	strmi	r3, [r6, #0]
 8002b06:	6825      	ldr	r5, [r4, #0]
 8002b08:	f015 0506 	ands.w	r5, r5, #6
 8002b0c:	d106      	bne.n	8002b1c <_printf_common+0x48>
 8002b0e:	f104 0a19 	add.w	sl, r4, #25
 8002b12:	68e3      	ldr	r3, [r4, #12]
 8002b14:	6832      	ldr	r2, [r6, #0]
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	42ab      	cmp	r3, r5
 8002b1a:	dc28      	bgt.n	8002b6e <_printf_common+0x9a>
 8002b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b20:	1e13      	subs	r3, r2, #0
 8002b22:	6822      	ldr	r2, [r4, #0]
 8002b24:	bf18      	it	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	0692      	lsls	r2, r2, #26
 8002b2a:	d42d      	bmi.n	8002b88 <_printf_common+0xb4>
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	4638      	mov	r0, r7
 8002b30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b34:	47c0      	blx	r8
 8002b36:	3001      	adds	r0, #1
 8002b38:	d020      	beq.n	8002b7c <_printf_common+0xa8>
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	68e5      	ldr	r5, [r4, #12]
 8002b3e:	f003 0306 	and.w	r3, r3, #6
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	bf18      	it	ne
 8002b46:	2500      	movne	r5, #0
 8002b48:	6832      	ldr	r2, [r6, #0]
 8002b4a:	f04f 0600 	mov.w	r6, #0
 8002b4e:	68a3      	ldr	r3, [r4, #8]
 8002b50:	bf08      	it	eq
 8002b52:	1aad      	subeq	r5, r5, r2
 8002b54:	6922      	ldr	r2, [r4, #16]
 8002b56:	bf08      	it	eq
 8002b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	bfc4      	itt	gt
 8002b60:	1a9b      	subgt	r3, r3, r2
 8002b62:	18ed      	addgt	r5, r5, r3
 8002b64:	341a      	adds	r4, #26
 8002b66:	42b5      	cmp	r5, r6
 8002b68:	d11a      	bne.n	8002ba0 <_printf_common+0xcc>
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	e008      	b.n	8002b80 <_printf_common+0xac>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	4652      	mov	r2, sl
 8002b72:	4649      	mov	r1, r9
 8002b74:	4638      	mov	r0, r7
 8002b76:	47c0      	blx	r8
 8002b78:	3001      	adds	r0, #1
 8002b7a:	d103      	bne.n	8002b84 <_printf_common+0xb0>
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b84:	3501      	adds	r5, #1
 8002b86:	e7c4      	b.n	8002b12 <_printf_common+0x3e>
 8002b88:	2030      	movs	r0, #48	; 0x30
 8002b8a:	18e1      	adds	r1, r4, r3
 8002b8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b96:	4422      	add	r2, r4
 8002b98:	3302      	adds	r3, #2
 8002b9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b9e:	e7c5      	b.n	8002b2c <_printf_common+0x58>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	4649      	mov	r1, r9
 8002ba6:	4638      	mov	r0, r7
 8002ba8:	47c0      	blx	r8
 8002baa:	3001      	adds	r0, #1
 8002bac:	d0e6      	beq.n	8002b7c <_printf_common+0xa8>
 8002bae:	3601      	adds	r6, #1
 8002bb0:	e7d9      	b.n	8002b66 <_printf_common+0x92>
	...

08002bb4 <_printf_i>:
 8002bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bb8:	7e0f      	ldrb	r7, [r1, #24]
 8002bba:	4691      	mov	r9, r2
 8002bbc:	2f78      	cmp	r7, #120	; 0x78
 8002bbe:	4680      	mov	r8, r0
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	469a      	mov	sl, r3
 8002bc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002bc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002bca:	d807      	bhi.n	8002bdc <_printf_i+0x28>
 8002bcc:	2f62      	cmp	r7, #98	; 0x62
 8002bce:	d80a      	bhi.n	8002be6 <_printf_i+0x32>
 8002bd0:	2f00      	cmp	r7, #0
 8002bd2:	f000 80d9 	beq.w	8002d88 <_printf_i+0x1d4>
 8002bd6:	2f58      	cmp	r7, #88	; 0x58
 8002bd8:	f000 80a4 	beq.w	8002d24 <_printf_i+0x170>
 8002bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002be0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002be4:	e03a      	b.n	8002c5c <_printf_i+0xa8>
 8002be6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002bea:	2b15      	cmp	r3, #21
 8002bec:	d8f6      	bhi.n	8002bdc <_printf_i+0x28>
 8002bee:	a101      	add	r1, pc, #4	; (adr r1, 8002bf4 <_printf_i+0x40>)
 8002bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002bf4:	08002c4d 	.word	0x08002c4d
 8002bf8:	08002c61 	.word	0x08002c61
 8002bfc:	08002bdd 	.word	0x08002bdd
 8002c00:	08002bdd 	.word	0x08002bdd
 8002c04:	08002bdd 	.word	0x08002bdd
 8002c08:	08002bdd 	.word	0x08002bdd
 8002c0c:	08002c61 	.word	0x08002c61
 8002c10:	08002bdd 	.word	0x08002bdd
 8002c14:	08002bdd 	.word	0x08002bdd
 8002c18:	08002bdd 	.word	0x08002bdd
 8002c1c:	08002bdd 	.word	0x08002bdd
 8002c20:	08002d6f 	.word	0x08002d6f
 8002c24:	08002c91 	.word	0x08002c91
 8002c28:	08002d51 	.word	0x08002d51
 8002c2c:	08002bdd 	.word	0x08002bdd
 8002c30:	08002bdd 	.word	0x08002bdd
 8002c34:	08002d91 	.word	0x08002d91
 8002c38:	08002bdd 	.word	0x08002bdd
 8002c3c:	08002c91 	.word	0x08002c91
 8002c40:	08002bdd 	.word	0x08002bdd
 8002c44:	08002bdd 	.word	0x08002bdd
 8002c48:	08002d59 	.word	0x08002d59
 8002c4c:	682b      	ldr	r3, [r5, #0]
 8002c4e:	1d1a      	adds	r2, r3, #4
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	602a      	str	r2, [r5, #0]
 8002c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0a4      	b.n	8002daa <_printf_i+0x1f6>
 8002c60:	6820      	ldr	r0, [r4, #0]
 8002c62:	6829      	ldr	r1, [r5, #0]
 8002c64:	0606      	lsls	r6, r0, #24
 8002c66:	f101 0304 	add.w	r3, r1, #4
 8002c6a:	d50a      	bpl.n	8002c82 <_printf_i+0xce>
 8002c6c:	680e      	ldr	r6, [r1, #0]
 8002c6e:	602b      	str	r3, [r5, #0]
 8002c70:	2e00      	cmp	r6, #0
 8002c72:	da03      	bge.n	8002c7c <_printf_i+0xc8>
 8002c74:	232d      	movs	r3, #45	; 0x2d
 8002c76:	4276      	negs	r6, r6
 8002c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c7c:	230a      	movs	r3, #10
 8002c7e:	485e      	ldr	r0, [pc, #376]	; (8002df8 <_printf_i+0x244>)
 8002c80:	e019      	b.n	8002cb6 <_printf_i+0x102>
 8002c82:	680e      	ldr	r6, [r1, #0]
 8002c84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c88:	602b      	str	r3, [r5, #0]
 8002c8a:	bf18      	it	ne
 8002c8c:	b236      	sxthne	r6, r6
 8002c8e:	e7ef      	b.n	8002c70 <_printf_i+0xbc>
 8002c90:	682b      	ldr	r3, [r5, #0]
 8002c92:	6820      	ldr	r0, [r4, #0]
 8002c94:	1d19      	adds	r1, r3, #4
 8002c96:	6029      	str	r1, [r5, #0]
 8002c98:	0601      	lsls	r1, r0, #24
 8002c9a:	d501      	bpl.n	8002ca0 <_printf_i+0xec>
 8002c9c:	681e      	ldr	r6, [r3, #0]
 8002c9e:	e002      	b.n	8002ca6 <_printf_i+0xf2>
 8002ca0:	0646      	lsls	r6, r0, #25
 8002ca2:	d5fb      	bpl.n	8002c9c <_printf_i+0xe8>
 8002ca4:	881e      	ldrh	r6, [r3, #0]
 8002ca6:	2f6f      	cmp	r7, #111	; 0x6f
 8002ca8:	bf0c      	ite	eq
 8002caa:	2308      	moveq	r3, #8
 8002cac:	230a      	movne	r3, #10
 8002cae:	4852      	ldr	r0, [pc, #328]	; (8002df8 <_printf_i+0x244>)
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cb6:	6865      	ldr	r5, [r4, #4]
 8002cb8:	2d00      	cmp	r5, #0
 8002cba:	bfa8      	it	ge
 8002cbc:	6821      	ldrge	r1, [r4, #0]
 8002cbe:	60a5      	str	r5, [r4, #8]
 8002cc0:	bfa4      	itt	ge
 8002cc2:	f021 0104 	bicge.w	r1, r1, #4
 8002cc6:	6021      	strge	r1, [r4, #0]
 8002cc8:	b90e      	cbnz	r6, 8002cce <_printf_i+0x11a>
 8002cca:	2d00      	cmp	r5, #0
 8002ccc:	d04d      	beq.n	8002d6a <_printf_i+0x1b6>
 8002cce:	4615      	mov	r5, r2
 8002cd0:	fbb6 f1f3 	udiv	r1, r6, r3
 8002cd4:	fb03 6711 	mls	r7, r3, r1, r6
 8002cd8:	5dc7      	ldrb	r7, [r0, r7]
 8002cda:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002cde:	4637      	mov	r7, r6
 8002ce0:	42bb      	cmp	r3, r7
 8002ce2:	460e      	mov	r6, r1
 8002ce4:	d9f4      	bls.n	8002cd0 <_printf_i+0x11c>
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d10b      	bne.n	8002d02 <_printf_i+0x14e>
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	07de      	lsls	r6, r3, #31
 8002cee:	d508      	bpl.n	8002d02 <_printf_i+0x14e>
 8002cf0:	6923      	ldr	r3, [r4, #16]
 8002cf2:	6861      	ldr	r1, [r4, #4]
 8002cf4:	4299      	cmp	r1, r3
 8002cf6:	bfde      	ittt	le
 8002cf8:	2330      	movle	r3, #48	; 0x30
 8002cfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002cfe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002d02:	1b52      	subs	r2, r2, r5
 8002d04:	6122      	str	r2, [r4, #16]
 8002d06:	464b      	mov	r3, r9
 8002d08:	4621      	mov	r1, r4
 8002d0a:	4640      	mov	r0, r8
 8002d0c:	f8cd a000 	str.w	sl, [sp]
 8002d10:	aa03      	add	r2, sp, #12
 8002d12:	f7ff fedf 	bl	8002ad4 <_printf_common>
 8002d16:	3001      	adds	r0, #1
 8002d18:	d14c      	bne.n	8002db4 <_printf_i+0x200>
 8002d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d1e:	b004      	add	sp, #16
 8002d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d24:	4834      	ldr	r0, [pc, #208]	; (8002df8 <_printf_i+0x244>)
 8002d26:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d2a:	6829      	ldr	r1, [r5, #0]
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d32:	6029      	str	r1, [r5, #0]
 8002d34:	061d      	lsls	r5, r3, #24
 8002d36:	d514      	bpl.n	8002d62 <_printf_i+0x1ae>
 8002d38:	07df      	lsls	r7, r3, #31
 8002d3a:	bf44      	itt	mi
 8002d3c:	f043 0320 	orrmi.w	r3, r3, #32
 8002d40:	6023      	strmi	r3, [r4, #0]
 8002d42:	b91e      	cbnz	r6, 8002d4c <_printf_i+0x198>
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	f023 0320 	bic.w	r3, r3, #32
 8002d4a:	6023      	str	r3, [r4, #0]
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	e7af      	b.n	8002cb0 <_printf_i+0xfc>
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	f043 0320 	orr.w	r3, r3, #32
 8002d56:	6023      	str	r3, [r4, #0]
 8002d58:	2378      	movs	r3, #120	; 0x78
 8002d5a:	4828      	ldr	r0, [pc, #160]	; (8002dfc <_printf_i+0x248>)
 8002d5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d60:	e7e3      	b.n	8002d2a <_printf_i+0x176>
 8002d62:	0659      	lsls	r1, r3, #25
 8002d64:	bf48      	it	mi
 8002d66:	b2b6      	uxthmi	r6, r6
 8002d68:	e7e6      	b.n	8002d38 <_printf_i+0x184>
 8002d6a:	4615      	mov	r5, r2
 8002d6c:	e7bb      	b.n	8002ce6 <_printf_i+0x132>
 8002d6e:	682b      	ldr	r3, [r5, #0]
 8002d70:	6826      	ldr	r6, [r4, #0]
 8002d72:	1d18      	adds	r0, r3, #4
 8002d74:	6961      	ldr	r1, [r4, #20]
 8002d76:	6028      	str	r0, [r5, #0]
 8002d78:	0635      	lsls	r5, r6, #24
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	d501      	bpl.n	8002d82 <_printf_i+0x1ce>
 8002d7e:	6019      	str	r1, [r3, #0]
 8002d80:	e002      	b.n	8002d88 <_printf_i+0x1d4>
 8002d82:	0670      	lsls	r0, r6, #25
 8002d84:	d5fb      	bpl.n	8002d7e <_printf_i+0x1ca>
 8002d86:	8019      	strh	r1, [r3, #0]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	4615      	mov	r5, r2
 8002d8c:	6123      	str	r3, [r4, #16]
 8002d8e:	e7ba      	b.n	8002d06 <_printf_i+0x152>
 8002d90:	682b      	ldr	r3, [r5, #0]
 8002d92:	2100      	movs	r1, #0
 8002d94:	1d1a      	adds	r2, r3, #4
 8002d96:	602a      	str	r2, [r5, #0]
 8002d98:	681d      	ldr	r5, [r3, #0]
 8002d9a:	6862      	ldr	r2, [r4, #4]
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	f000 fb13 	bl	80033c8 <memchr>
 8002da2:	b108      	cbz	r0, 8002da8 <_printf_i+0x1f4>
 8002da4:	1b40      	subs	r0, r0, r5
 8002da6:	6060      	str	r0, [r4, #4]
 8002da8:	6863      	ldr	r3, [r4, #4]
 8002daa:	6123      	str	r3, [r4, #16]
 8002dac:	2300      	movs	r3, #0
 8002dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002db2:	e7a8      	b.n	8002d06 <_printf_i+0x152>
 8002db4:	462a      	mov	r2, r5
 8002db6:	4649      	mov	r1, r9
 8002db8:	4640      	mov	r0, r8
 8002dba:	6923      	ldr	r3, [r4, #16]
 8002dbc:	47d0      	blx	sl
 8002dbe:	3001      	adds	r0, #1
 8002dc0:	d0ab      	beq.n	8002d1a <_printf_i+0x166>
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	079b      	lsls	r3, r3, #30
 8002dc6:	d413      	bmi.n	8002df0 <_printf_i+0x23c>
 8002dc8:	68e0      	ldr	r0, [r4, #12]
 8002dca:	9b03      	ldr	r3, [sp, #12]
 8002dcc:	4298      	cmp	r0, r3
 8002dce:	bfb8      	it	lt
 8002dd0:	4618      	movlt	r0, r3
 8002dd2:	e7a4      	b.n	8002d1e <_printf_i+0x16a>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	4632      	mov	r2, r6
 8002dd8:	4649      	mov	r1, r9
 8002dda:	4640      	mov	r0, r8
 8002ddc:	47d0      	blx	sl
 8002dde:	3001      	adds	r0, #1
 8002de0:	d09b      	beq.n	8002d1a <_printf_i+0x166>
 8002de2:	3501      	adds	r5, #1
 8002de4:	68e3      	ldr	r3, [r4, #12]
 8002de6:	9903      	ldr	r1, [sp, #12]
 8002de8:	1a5b      	subs	r3, r3, r1
 8002dea:	42ab      	cmp	r3, r5
 8002dec:	dcf2      	bgt.n	8002dd4 <_printf_i+0x220>
 8002dee:	e7eb      	b.n	8002dc8 <_printf_i+0x214>
 8002df0:	2500      	movs	r5, #0
 8002df2:	f104 0619 	add.w	r6, r4, #25
 8002df6:	e7f5      	b.n	8002de4 <_printf_i+0x230>
 8002df8:	080037f2 	.word	0x080037f2
 8002dfc:	08003803 	.word	0x08003803

08002e00 <__swbuf_r>:
 8002e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e02:	460e      	mov	r6, r1
 8002e04:	4614      	mov	r4, r2
 8002e06:	4605      	mov	r5, r0
 8002e08:	b118      	cbz	r0, 8002e12 <__swbuf_r+0x12>
 8002e0a:	6983      	ldr	r3, [r0, #24]
 8002e0c:	b90b      	cbnz	r3, 8002e12 <__swbuf_r+0x12>
 8002e0e:	f000 f9d5 	bl	80031bc <__sinit>
 8002e12:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <__swbuf_r+0x98>)
 8002e14:	429c      	cmp	r4, r3
 8002e16:	d12b      	bne.n	8002e70 <__swbuf_r+0x70>
 8002e18:	686c      	ldr	r4, [r5, #4]
 8002e1a:	69a3      	ldr	r3, [r4, #24]
 8002e1c:	60a3      	str	r3, [r4, #8]
 8002e1e:	89a3      	ldrh	r3, [r4, #12]
 8002e20:	071a      	lsls	r2, r3, #28
 8002e22:	d52f      	bpl.n	8002e84 <__swbuf_r+0x84>
 8002e24:	6923      	ldr	r3, [r4, #16]
 8002e26:	b36b      	cbz	r3, 8002e84 <__swbuf_r+0x84>
 8002e28:	6923      	ldr	r3, [r4, #16]
 8002e2a:	6820      	ldr	r0, [r4, #0]
 8002e2c:	b2f6      	uxtb	r6, r6
 8002e2e:	1ac0      	subs	r0, r0, r3
 8002e30:	6963      	ldr	r3, [r4, #20]
 8002e32:	4637      	mov	r7, r6
 8002e34:	4283      	cmp	r3, r0
 8002e36:	dc04      	bgt.n	8002e42 <__swbuf_r+0x42>
 8002e38:	4621      	mov	r1, r4
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	f000 f92a 	bl	8003094 <_fflush_r>
 8002e40:	bb30      	cbnz	r0, 8002e90 <__swbuf_r+0x90>
 8002e42:	68a3      	ldr	r3, [r4, #8]
 8002e44:	3001      	adds	r0, #1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	60a3      	str	r3, [r4, #8]
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	6022      	str	r2, [r4, #0]
 8002e50:	701e      	strb	r6, [r3, #0]
 8002e52:	6963      	ldr	r3, [r4, #20]
 8002e54:	4283      	cmp	r3, r0
 8002e56:	d004      	beq.n	8002e62 <__swbuf_r+0x62>
 8002e58:	89a3      	ldrh	r3, [r4, #12]
 8002e5a:	07db      	lsls	r3, r3, #31
 8002e5c:	d506      	bpl.n	8002e6c <__swbuf_r+0x6c>
 8002e5e:	2e0a      	cmp	r6, #10
 8002e60:	d104      	bne.n	8002e6c <__swbuf_r+0x6c>
 8002e62:	4621      	mov	r1, r4
 8002e64:	4628      	mov	r0, r5
 8002e66:	f000 f915 	bl	8003094 <_fflush_r>
 8002e6a:	b988      	cbnz	r0, 8002e90 <__swbuf_r+0x90>
 8002e6c:	4638      	mov	r0, r7
 8002e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <__swbuf_r+0x9c>)
 8002e72:	429c      	cmp	r4, r3
 8002e74:	d101      	bne.n	8002e7a <__swbuf_r+0x7a>
 8002e76:	68ac      	ldr	r4, [r5, #8]
 8002e78:	e7cf      	b.n	8002e1a <__swbuf_r+0x1a>
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <__swbuf_r+0xa0>)
 8002e7c:	429c      	cmp	r4, r3
 8002e7e:	bf08      	it	eq
 8002e80:	68ec      	ldreq	r4, [r5, #12]
 8002e82:	e7ca      	b.n	8002e1a <__swbuf_r+0x1a>
 8002e84:	4621      	mov	r1, r4
 8002e86:	4628      	mov	r0, r5
 8002e88:	f000 f80c 	bl	8002ea4 <__swsetup_r>
 8002e8c:	2800      	cmp	r0, #0
 8002e8e:	d0cb      	beq.n	8002e28 <__swbuf_r+0x28>
 8002e90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002e94:	e7ea      	b.n	8002e6c <__swbuf_r+0x6c>
 8002e96:	bf00      	nop
 8002e98:	08003834 	.word	0x08003834
 8002e9c:	08003854 	.word	0x08003854
 8002ea0:	08003814 	.word	0x08003814

08002ea4 <__swsetup_r>:
 8002ea4:	4b32      	ldr	r3, [pc, #200]	; (8002f70 <__swsetup_r+0xcc>)
 8002ea6:	b570      	push	{r4, r5, r6, lr}
 8002ea8:	681d      	ldr	r5, [r3, #0]
 8002eaa:	4606      	mov	r6, r0
 8002eac:	460c      	mov	r4, r1
 8002eae:	b125      	cbz	r5, 8002eba <__swsetup_r+0x16>
 8002eb0:	69ab      	ldr	r3, [r5, #24]
 8002eb2:	b913      	cbnz	r3, 8002eba <__swsetup_r+0x16>
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	f000 f981 	bl	80031bc <__sinit>
 8002eba:	4b2e      	ldr	r3, [pc, #184]	; (8002f74 <__swsetup_r+0xd0>)
 8002ebc:	429c      	cmp	r4, r3
 8002ebe:	d10f      	bne.n	8002ee0 <__swsetup_r+0x3c>
 8002ec0:	686c      	ldr	r4, [r5, #4]
 8002ec2:	89a3      	ldrh	r3, [r4, #12]
 8002ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ec8:	0719      	lsls	r1, r3, #28
 8002eca:	d42c      	bmi.n	8002f26 <__swsetup_r+0x82>
 8002ecc:	06dd      	lsls	r5, r3, #27
 8002ece:	d411      	bmi.n	8002ef4 <__swsetup_r+0x50>
 8002ed0:	2309      	movs	r3, #9
 8002ed2:	6033      	str	r3, [r6, #0]
 8002ed4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002edc:	81a3      	strh	r3, [r4, #12]
 8002ede:	e03e      	b.n	8002f5e <__swsetup_r+0xba>
 8002ee0:	4b25      	ldr	r3, [pc, #148]	; (8002f78 <__swsetup_r+0xd4>)
 8002ee2:	429c      	cmp	r4, r3
 8002ee4:	d101      	bne.n	8002eea <__swsetup_r+0x46>
 8002ee6:	68ac      	ldr	r4, [r5, #8]
 8002ee8:	e7eb      	b.n	8002ec2 <__swsetup_r+0x1e>
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <__swsetup_r+0xd8>)
 8002eec:	429c      	cmp	r4, r3
 8002eee:	bf08      	it	eq
 8002ef0:	68ec      	ldreq	r4, [r5, #12]
 8002ef2:	e7e6      	b.n	8002ec2 <__swsetup_r+0x1e>
 8002ef4:	0758      	lsls	r0, r3, #29
 8002ef6:	d512      	bpl.n	8002f1e <__swsetup_r+0x7a>
 8002ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002efa:	b141      	cbz	r1, 8002f0e <__swsetup_r+0x6a>
 8002efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f00:	4299      	cmp	r1, r3
 8002f02:	d002      	beq.n	8002f0a <__swsetup_r+0x66>
 8002f04:	4630      	mov	r0, r6
 8002f06:	f7ff fa83 	bl	8002410 <_free_r>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	6363      	str	r3, [r4, #52]	; 0x34
 8002f0e:	89a3      	ldrh	r3, [r4, #12]
 8002f10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f14:	81a3      	strh	r3, [r4, #12]
 8002f16:	2300      	movs	r3, #0
 8002f18:	6063      	str	r3, [r4, #4]
 8002f1a:	6923      	ldr	r3, [r4, #16]
 8002f1c:	6023      	str	r3, [r4, #0]
 8002f1e:	89a3      	ldrh	r3, [r4, #12]
 8002f20:	f043 0308 	orr.w	r3, r3, #8
 8002f24:	81a3      	strh	r3, [r4, #12]
 8002f26:	6923      	ldr	r3, [r4, #16]
 8002f28:	b94b      	cbnz	r3, 8002f3e <__swsetup_r+0x9a>
 8002f2a:	89a3      	ldrh	r3, [r4, #12]
 8002f2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f34:	d003      	beq.n	8002f3e <__swsetup_r+0x9a>
 8002f36:	4621      	mov	r1, r4
 8002f38:	4630      	mov	r0, r6
 8002f3a:	f000 fa05 	bl	8003348 <__smakebuf_r>
 8002f3e:	89a0      	ldrh	r0, [r4, #12]
 8002f40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f44:	f010 0301 	ands.w	r3, r0, #1
 8002f48:	d00a      	beq.n	8002f60 <__swsetup_r+0xbc>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60a3      	str	r3, [r4, #8]
 8002f4e:	6963      	ldr	r3, [r4, #20]
 8002f50:	425b      	negs	r3, r3
 8002f52:	61a3      	str	r3, [r4, #24]
 8002f54:	6923      	ldr	r3, [r4, #16]
 8002f56:	b943      	cbnz	r3, 8002f6a <__swsetup_r+0xc6>
 8002f58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f5c:	d1ba      	bne.n	8002ed4 <__swsetup_r+0x30>
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	0781      	lsls	r1, r0, #30
 8002f62:	bf58      	it	pl
 8002f64:	6963      	ldrpl	r3, [r4, #20]
 8002f66:	60a3      	str	r3, [r4, #8]
 8002f68:	e7f4      	b.n	8002f54 <__swsetup_r+0xb0>
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	e7f7      	b.n	8002f5e <__swsetup_r+0xba>
 8002f6e:	bf00      	nop
 8002f70:	2000000c 	.word	0x2000000c
 8002f74:	08003834 	.word	0x08003834
 8002f78:	08003854 	.word	0x08003854
 8002f7c:	08003814 	.word	0x08003814

08002f80 <abort>:
 8002f80:	2006      	movs	r0, #6
 8002f82:	b508      	push	{r3, lr}
 8002f84:	f000 fa56 	bl	8003434 <raise>
 8002f88:	2001      	movs	r0, #1
 8002f8a:	f7fd fb80 	bl	800068e <_exit>
	...

08002f90 <__sflush_r>:
 8002f90:	898a      	ldrh	r2, [r1, #12]
 8002f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f94:	4605      	mov	r5, r0
 8002f96:	0710      	lsls	r0, r2, #28
 8002f98:	460c      	mov	r4, r1
 8002f9a:	d457      	bmi.n	800304c <__sflush_r+0xbc>
 8002f9c:	684b      	ldr	r3, [r1, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	dc04      	bgt.n	8002fac <__sflush_r+0x1c>
 8002fa2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	dc01      	bgt.n	8002fac <__sflush_r+0x1c>
 8002fa8:	2000      	movs	r0, #0
 8002faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fae:	2e00      	cmp	r6, #0
 8002fb0:	d0fa      	beq.n	8002fa8 <__sflush_r+0x18>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fb8:	682f      	ldr	r7, [r5, #0]
 8002fba:	602b      	str	r3, [r5, #0]
 8002fbc:	d032      	beq.n	8003024 <__sflush_r+0x94>
 8002fbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fc0:	89a3      	ldrh	r3, [r4, #12]
 8002fc2:	075a      	lsls	r2, r3, #29
 8002fc4:	d505      	bpl.n	8002fd2 <__sflush_r+0x42>
 8002fc6:	6863      	ldr	r3, [r4, #4]
 8002fc8:	1ac0      	subs	r0, r0, r3
 8002fca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fcc:	b10b      	cbz	r3, 8002fd2 <__sflush_r+0x42>
 8002fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fd0:	1ac0      	subs	r0, r0, r3
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fd8:	4628      	mov	r0, r5
 8002fda:	6a21      	ldr	r1, [r4, #32]
 8002fdc:	47b0      	blx	r6
 8002fde:	1c43      	adds	r3, r0, #1
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	d106      	bne.n	8002ff2 <__sflush_r+0x62>
 8002fe4:	6829      	ldr	r1, [r5, #0]
 8002fe6:	291d      	cmp	r1, #29
 8002fe8:	d82c      	bhi.n	8003044 <__sflush_r+0xb4>
 8002fea:	4a29      	ldr	r2, [pc, #164]	; (8003090 <__sflush_r+0x100>)
 8002fec:	40ca      	lsrs	r2, r1
 8002fee:	07d6      	lsls	r6, r2, #31
 8002ff0:	d528      	bpl.n	8003044 <__sflush_r+0xb4>
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	6062      	str	r2, [r4, #4]
 8002ff6:	6922      	ldr	r2, [r4, #16]
 8002ff8:	04d9      	lsls	r1, r3, #19
 8002ffa:	6022      	str	r2, [r4, #0]
 8002ffc:	d504      	bpl.n	8003008 <__sflush_r+0x78>
 8002ffe:	1c42      	adds	r2, r0, #1
 8003000:	d101      	bne.n	8003006 <__sflush_r+0x76>
 8003002:	682b      	ldr	r3, [r5, #0]
 8003004:	b903      	cbnz	r3, 8003008 <__sflush_r+0x78>
 8003006:	6560      	str	r0, [r4, #84]	; 0x54
 8003008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800300a:	602f      	str	r7, [r5, #0]
 800300c:	2900      	cmp	r1, #0
 800300e:	d0cb      	beq.n	8002fa8 <__sflush_r+0x18>
 8003010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003014:	4299      	cmp	r1, r3
 8003016:	d002      	beq.n	800301e <__sflush_r+0x8e>
 8003018:	4628      	mov	r0, r5
 800301a:	f7ff f9f9 	bl	8002410 <_free_r>
 800301e:	2000      	movs	r0, #0
 8003020:	6360      	str	r0, [r4, #52]	; 0x34
 8003022:	e7c2      	b.n	8002faa <__sflush_r+0x1a>
 8003024:	6a21      	ldr	r1, [r4, #32]
 8003026:	2301      	movs	r3, #1
 8003028:	4628      	mov	r0, r5
 800302a:	47b0      	blx	r6
 800302c:	1c41      	adds	r1, r0, #1
 800302e:	d1c7      	bne.n	8002fc0 <__sflush_r+0x30>
 8003030:	682b      	ldr	r3, [r5, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0c4      	beq.n	8002fc0 <__sflush_r+0x30>
 8003036:	2b1d      	cmp	r3, #29
 8003038:	d001      	beq.n	800303e <__sflush_r+0xae>
 800303a:	2b16      	cmp	r3, #22
 800303c:	d101      	bne.n	8003042 <__sflush_r+0xb2>
 800303e:	602f      	str	r7, [r5, #0]
 8003040:	e7b2      	b.n	8002fa8 <__sflush_r+0x18>
 8003042:	89a3      	ldrh	r3, [r4, #12]
 8003044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003048:	81a3      	strh	r3, [r4, #12]
 800304a:	e7ae      	b.n	8002faa <__sflush_r+0x1a>
 800304c:	690f      	ldr	r7, [r1, #16]
 800304e:	2f00      	cmp	r7, #0
 8003050:	d0aa      	beq.n	8002fa8 <__sflush_r+0x18>
 8003052:	0793      	lsls	r3, r2, #30
 8003054:	bf18      	it	ne
 8003056:	2300      	movne	r3, #0
 8003058:	680e      	ldr	r6, [r1, #0]
 800305a:	bf08      	it	eq
 800305c:	694b      	ldreq	r3, [r1, #20]
 800305e:	1bf6      	subs	r6, r6, r7
 8003060:	600f      	str	r7, [r1, #0]
 8003062:	608b      	str	r3, [r1, #8]
 8003064:	2e00      	cmp	r6, #0
 8003066:	dd9f      	ble.n	8002fa8 <__sflush_r+0x18>
 8003068:	4633      	mov	r3, r6
 800306a:	463a      	mov	r2, r7
 800306c:	4628      	mov	r0, r5
 800306e:	6a21      	ldr	r1, [r4, #32]
 8003070:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003074:	47e0      	blx	ip
 8003076:	2800      	cmp	r0, #0
 8003078:	dc06      	bgt.n	8003088 <__sflush_r+0xf8>
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003084:	81a3      	strh	r3, [r4, #12]
 8003086:	e790      	b.n	8002faa <__sflush_r+0x1a>
 8003088:	4407      	add	r7, r0
 800308a:	1a36      	subs	r6, r6, r0
 800308c:	e7ea      	b.n	8003064 <__sflush_r+0xd4>
 800308e:	bf00      	nop
 8003090:	20400001 	.word	0x20400001

08003094 <_fflush_r>:
 8003094:	b538      	push	{r3, r4, r5, lr}
 8003096:	690b      	ldr	r3, [r1, #16]
 8003098:	4605      	mov	r5, r0
 800309a:	460c      	mov	r4, r1
 800309c:	b913      	cbnz	r3, 80030a4 <_fflush_r+0x10>
 800309e:	2500      	movs	r5, #0
 80030a0:	4628      	mov	r0, r5
 80030a2:	bd38      	pop	{r3, r4, r5, pc}
 80030a4:	b118      	cbz	r0, 80030ae <_fflush_r+0x1a>
 80030a6:	6983      	ldr	r3, [r0, #24]
 80030a8:	b90b      	cbnz	r3, 80030ae <_fflush_r+0x1a>
 80030aa:	f000 f887 	bl	80031bc <__sinit>
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <_fflush_r+0x6c>)
 80030b0:	429c      	cmp	r4, r3
 80030b2:	d11b      	bne.n	80030ec <_fflush_r+0x58>
 80030b4:	686c      	ldr	r4, [r5, #4]
 80030b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0ef      	beq.n	800309e <_fflush_r+0xa>
 80030be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030c0:	07d0      	lsls	r0, r2, #31
 80030c2:	d404      	bmi.n	80030ce <_fflush_r+0x3a>
 80030c4:	0599      	lsls	r1, r3, #22
 80030c6:	d402      	bmi.n	80030ce <_fflush_r+0x3a>
 80030c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ca:	f000 f915 	bl	80032f8 <__retarget_lock_acquire_recursive>
 80030ce:	4628      	mov	r0, r5
 80030d0:	4621      	mov	r1, r4
 80030d2:	f7ff ff5d 	bl	8002f90 <__sflush_r>
 80030d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030d8:	4605      	mov	r5, r0
 80030da:	07da      	lsls	r2, r3, #31
 80030dc:	d4e0      	bmi.n	80030a0 <_fflush_r+0xc>
 80030de:	89a3      	ldrh	r3, [r4, #12]
 80030e0:	059b      	lsls	r3, r3, #22
 80030e2:	d4dd      	bmi.n	80030a0 <_fflush_r+0xc>
 80030e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030e6:	f000 f908 	bl	80032fa <__retarget_lock_release_recursive>
 80030ea:	e7d9      	b.n	80030a0 <_fflush_r+0xc>
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <_fflush_r+0x70>)
 80030ee:	429c      	cmp	r4, r3
 80030f0:	d101      	bne.n	80030f6 <_fflush_r+0x62>
 80030f2:	68ac      	ldr	r4, [r5, #8]
 80030f4:	e7df      	b.n	80030b6 <_fflush_r+0x22>
 80030f6:	4b04      	ldr	r3, [pc, #16]	; (8003108 <_fflush_r+0x74>)
 80030f8:	429c      	cmp	r4, r3
 80030fa:	bf08      	it	eq
 80030fc:	68ec      	ldreq	r4, [r5, #12]
 80030fe:	e7da      	b.n	80030b6 <_fflush_r+0x22>
 8003100:	08003834 	.word	0x08003834
 8003104:	08003854 	.word	0x08003854
 8003108:	08003814 	.word	0x08003814

0800310c <std>:
 800310c:	2300      	movs	r3, #0
 800310e:	b510      	push	{r4, lr}
 8003110:	4604      	mov	r4, r0
 8003112:	e9c0 3300 	strd	r3, r3, [r0]
 8003116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800311a:	6083      	str	r3, [r0, #8]
 800311c:	8181      	strh	r1, [r0, #12]
 800311e:	6643      	str	r3, [r0, #100]	; 0x64
 8003120:	81c2      	strh	r2, [r0, #14]
 8003122:	6183      	str	r3, [r0, #24]
 8003124:	4619      	mov	r1, r3
 8003126:	2208      	movs	r2, #8
 8003128:	305c      	adds	r0, #92	; 0x5c
 800312a:	f7ff f955 	bl	80023d8 <memset>
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <std+0x38>)
 8003130:	6224      	str	r4, [r4, #32]
 8003132:	6263      	str	r3, [r4, #36]	; 0x24
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <std+0x3c>)
 8003136:	62a3      	str	r3, [r4, #40]	; 0x28
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <std+0x40>)
 800313a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <std+0x44>)
 800313e:	6323      	str	r3, [r4, #48]	; 0x30
 8003140:	bd10      	pop	{r4, pc}
 8003142:	bf00      	nop
 8003144:	0800346d 	.word	0x0800346d
 8003148:	0800348f 	.word	0x0800348f
 800314c:	080034c7 	.word	0x080034c7
 8003150:	080034eb 	.word	0x080034eb

08003154 <_cleanup_r>:
 8003154:	4901      	ldr	r1, [pc, #4]	; (800315c <_cleanup_r+0x8>)
 8003156:	f000 b8af 	b.w	80032b8 <_fwalk_reent>
 800315a:	bf00      	nop
 800315c:	08003095 	.word	0x08003095

08003160 <__sfmoreglue>:
 8003160:	2268      	movs	r2, #104	; 0x68
 8003162:	b570      	push	{r4, r5, r6, lr}
 8003164:	1e4d      	subs	r5, r1, #1
 8003166:	4355      	muls	r5, r2
 8003168:	460e      	mov	r6, r1
 800316a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800316e:	f7ff f9b7 	bl	80024e0 <_malloc_r>
 8003172:	4604      	mov	r4, r0
 8003174:	b140      	cbz	r0, 8003188 <__sfmoreglue+0x28>
 8003176:	2100      	movs	r1, #0
 8003178:	e9c0 1600 	strd	r1, r6, [r0]
 800317c:	300c      	adds	r0, #12
 800317e:	60a0      	str	r0, [r4, #8]
 8003180:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003184:	f7ff f928 	bl	80023d8 <memset>
 8003188:	4620      	mov	r0, r4
 800318a:	bd70      	pop	{r4, r5, r6, pc}

0800318c <__sfp_lock_acquire>:
 800318c:	4801      	ldr	r0, [pc, #4]	; (8003194 <__sfp_lock_acquire+0x8>)
 800318e:	f000 b8b3 	b.w	80032f8 <__retarget_lock_acquire_recursive>
 8003192:	bf00      	nop
 8003194:	2000013d 	.word	0x2000013d

08003198 <__sfp_lock_release>:
 8003198:	4801      	ldr	r0, [pc, #4]	; (80031a0 <__sfp_lock_release+0x8>)
 800319a:	f000 b8ae 	b.w	80032fa <__retarget_lock_release_recursive>
 800319e:	bf00      	nop
 80031a0:	2000013d 	.word	0x2000013d

080031a4 <__sinit_lock_acquire>:
 80031a4:	4801      	ldr	r0, [pc, #4]	; (80031ac <__sinit_lock_acquire+0x8>)
 80031a6:	f000 b8a7 	b.w	80032f8 <__retarget_lock_acquire_recursive>
 80031aa:	bf00      	nop
 80031ac:	2000013e 	.word	0x2000013e

080031b0 <__sinit_lock_release>:
 80031b0:	4801      	ldr	r0, [pc, #4]	; (80031b8 <__sinit_lock_release+0x8>)
 80031b2:	f000 b8a2 	b.w	80032fa <__retarget_lock_release_recursive>
 80031b6:	bf00      	nop
 80031b8:	2000013e 	.word	0x2000013e

080031bc <__sinit>:
 80031bc:	b510      	push	{r4, lr}
 80031be:	4604      	mov	r4, r0
 80031c0:	f7ff fff0 	bl	80031a4 <__sinit_lock_acquire>
 80031c4:	69a3      	ldr	r3, [r4, #24]
 80031c6:	b11b      	cbz	r3, 80031d0 <__sinit+0x14>
 80031c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031cc:	f7ff bff0 	b.w	80031b0 <__sinit_lock_release>
 80031d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80031d4:	6523      	str	r3, [r4, #80]	; 0x50
 80031d6:	4b13      	ldr	r3, [pc, #76]	; (8003224 <__sinit+0x68>)
 80031d8:	4a13      	ldr	r2, [pc, #76]	; (8003228 <__sinit+0x6c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80031de:	42a3      	cmp	r3, r4
 80031e0:	bf08      	it	eq
 80031e2:	2301      	moveq	r3, #1
 80031e4:	4620      	mov	r0, r4
 80031e6:	bf08      	it	eq
 80031e8:	61a3      	streq	r3, [r4, #24]
 80031ea:	f000 f81f 	bl	800322c <__sfp>
 80031ee:	6060      	str	r0, [r4, #4]
 80031f0:	4620      	mov	r0, r4
 80031f2:	f000 f81b 	bl	800322c <__sfp>
 80031f6:	60a0      	str	r0, [r4, #8]
 80031f8:	4620      	mov	r0, r4
 80031fa:	f000 f817 	bl	800322c <__sfp>
 80031fe:	2200      	movs	r2, #0
 8003200:	2104      	movs	r1, #4
 8003202:	60e0      	str	r0, [r4, #12]
 8003204:	6860      	ldr	r0, [r4, #4]
 8003206:	f7ff ff81 	bl	800310c <std>
 800320a:	2201      	movs	r2, #1
 800320c:	2109      	movs	r1, #9
 800320e:	68a0      	ldr	r0, [r4, #8]
 8003210:	f7ff ff7c 	bl	800310c <std>
 8003214:	2202      	movs	r2, #2
 8003216:	2112      	movs	r1, #18
 8003218:	68e0      	ldr	r0, [r4, #12]
 800321a:	f7ff ff77 	bl	800310c <std>
 800321e:	2301      	movs	r3, #1
 8003220:	61a3      	str	r3, [r4, #24]
 8003222:	e7d1      	b.n	80031c8 <__sinit+0xc>
 8003224:	0800362c 	.word	0x0800362c
 8003228:	08003155 	.word	0x08003155

0800322c <__sfp>:
 800322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322e:	4607      	mov	r7, r0
 8003230:	f7ff ffac 	bl	800318c <__sfp_lock_acquire>
 8003234:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <__sfp+0x84>)
 8003236:	681e      	ldr	r6, [r3, #0]
 8003238:	69b3      	ldr	r3, [r6, #24]
 800323a:	b913      	cbnz	r3, 8003242 <__sfp+0x16>
 800323c:	4630      	mov	r0, r6
 800323e:	f7ff ffbd 	bl	80031bc <__sinit>
 8003242:	3648      	adds	r6, #72	; 0x48
 8003244:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003248:	3b01      	subs	r3, #1
 800324a:	d503      	bpl.n	8003254 <__sfp+0x28>
 800324c:	6833      	ldr	r3, [r6, #0]
 800324e:	b30b      	cbz	r3, 8003294 <__sfp+0x68>
 8003250:	6836      	ldr	r6, [r6, #0]
 8003252:	e7f7      	b.n	8003244 <__sfp+0x18>
 8003254:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003258:	b9d5      	cbnz	r5, 8003290 <__sfp+0x64>
 800325a:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <__sfp+0x88>)
 800325c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003260:	60e3      	str	r3, [r4, #12]
 8003262:	6665      	str	r5, [r4, #100]	; 0x64
 8003264:	f000 f847 	bl	80032f6 <__retarget_lock_init_recursive>
 8003268:	f7ff ff96 	bl	8003198 <__sfp_lock_release>
 800326c:	2208      	movs	r2, #8
 800326e:	4629      	mov	r1, r5
 8003270:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003274:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003278:	6025      	str	r5, [r4, #0]
 800327a:	61a5      	str	r5, [r4, #24]
 800327c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003280:	f7ff f8aa 	bl	80023d8 <memset>
 8003284:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003288:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800328c:	4620      	mov	r0, r4
 800328e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003290:	3468      	adds	r4, #104	; 0x68
 8003292:	e7d9      	b.n	8003248 <__sfp+0x1c>
 8003294:	2104      	movs	r1, #4
 8003296:	4638      	mov	r0, r7
 8003298:	f7ff ff62 	bl	8003160 <__sfmoreglue>
 800329c:	4604      	mov	r4, r0
 800329e:	6030      	str	r0, [r6, #0]
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d1d5      	bne.n	8003250 <__sfp+0x24>
 80032a4:	f7ff ff78 	bl	8003198 <__sfp_lock_release>
 80032a8:	230c      	movs	r3, #12
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	e7ee      	b.n	800328c <__sfp+0x60>
 80032ae:	bf00      	nop
 80032b0:	0800362c 	.word	0x0800362c
 80032b4:	ffff0001 	.word	0xffff0001

080032b8 <_fwalk_reent>:
 80032b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032bc:	4606      	mov	r6, r0
 80032be:	4688      	mov	r8, r1
 80032c0:	2700      	movs	r7, #0
 80032c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032ca:	f1b9 0901 	subs.w	r9, r9, #1
 80032ce:	d505      	bpl.n	80032dc <_fwalk_reent+0x24>
 80032d0:	6824      	ldr	r4, [r4, #0]
 80032d2:	2c00      	cmp	r4, #0
 80032d4:	d1f7      	bne.n	80032c6 <_fwalk_reent+0xe>
 80032d6:	4638      	mov	r0, r7
 80032d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032dc:	89ab      	ldrh	r3, [r5, #12]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d907      	bls.n	80032f2 <_fwalk_reent+0x3a>
 80032e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032e6:	3301      	adds	r3, #1
 80032e8:	d003      	beq.n	80032f2 <_fwalk_reent+0x3a>
 80032ea:	4629      	mov	r1, r5
 80032ec:	4630      	mov	r0, r6
 80032ee:	47c0      	blx	r8
 80032f0:	4307      	orrs	r7, r0
 80032f2:	3568      	adds	r5, #104	; 0x68
 80032f4:	e7e9      	b.n	80032ca <_fwalk_reent+0x12>

080032f6 <__retarget_lock_init_recursive>:
 80032f6:	4770      	bx	lr

080032f8 <__retarget_lock_acquire_recursive>:
 80032f8:	4770      	bx	lr

080032fa <__retarget_lock_release_recursive>:
 80032fa:	4770      	bx	lr

080032fc <__swhatbuf_r>:
 80032fc:	b570      	push	{r4, r5, r6, lr}
 80032fe:	460e      	mov	r6, r1
 8003300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003304:	4614      	mov	r4, r2
 8003306:	2900      	cmp	r1, #0
 8003308:	461d      	mov	r5, r3
 800330a:	b096      	sub	sp, #88	; 0x58
 800330c:	da08      	bge.n	8003320 <__swhatbuf_r+0x24>
 800330e:	2200      	movs	r2, #0
 8003310:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003314:	602a      	str	r2, [r5, #0]
 8003316:	061a      	lsls	r2, r3, #24
 8003318:	d410      	bmi.n	800333c <__swhatbuf_r+0x40>
 800331a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800331e:	e00e      	b.n	800333e <__swhatbuf_r+0x42>
 8003320:	466a      	mov	r2, sp
 8003322:	f000 f909 	bl	8003538 <_fstat_r>
 8003326:	2800      	cmp	r0, #0
 8003328:	dbf1      	blt.n	800330e <__swhatbuf_r+0x12>
 800332a:	9a01      	ldr	r2, [sp, #4]
 800332c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003330:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003334:	425a      	negs	r2, r3
 8003336:	415a      	adcs	r2, r3
 8003338:	602a      	str	r2, [r5, #0]
 800333a:	e7ee      	b.n	800331a <__swhatbuf_r+0x1e>
 800333c:	2340      	movs	r3, #64	; 0x40
 800333e:	2000      	movs	r0, #0
 8003340:	6023      	str	r3, [r4, #0]
 8003342:	b016      	add	sp, #88	; 0x58
 8003344:	bd70      	pop	{r4, r5, r6, pc}
	...

08003348 <__smakebuf_r>:
 8003348:	898b      	ldrh	r3, [r1, #12]
 800334a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800334c:	079d      	lsls	r5, r3, #30
 800334e:	4606      	mov	r6, r0
 8003350:	460c      	mov	r4, r1
 8003352:	d507      	bpl.n	8003364 <__smakebuf_r+0x1c>
 8003354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	6123      	str	r3, [r4, #16]
 800335c:	2301      	movs	r3, #1
 800335e:	6163      	str	r3, [r4, #20]
 8003360:	b002      	add	sp, #8
 8003362:	bd70      	pop	{r4, r5, r6, pc}
 8003364:	466a      	mov	r2, sp
 8003366:	ab01      	add	r3, sp, #4
 8003368:	f7ff ffc8 	bl	80032fc <__swhatbuf_r>
 800336c:	9900      	ldr	r1, [sp, #0]
 800336e:	4605      	mov	r5, r0
 8003370:	4630      	mov	r0, r6
 8003372:	f7ff f8b5 	bl	80024e0 <_malloc_r>
 8003376:	b948      	cbnz	r0, 800338c <__smakebuf_r+0x44>
 8003378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800337c:	059a      	lsls	r2, r3, #22
 800337e:	d4ef      	bmi.n	8003360 <__smakebuf_r+0x18>
 8003380:	f023 0303 	bic.w	r3, r3, #3
 8003384:	f043 0302 	orr.w	r3, r3, #2
 8003388:	81a3      	strh	r3, [r4, #12]
 800338a:	e7e3      	b.n	8003354 <__smakebuf_r+0xc>
 800338c:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <__smakebuf_r+0x7c>)
 800338e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003390:	89a3      	ldrh	r3, [r4, #12]
 8003392:	6020      	str	r0, [r4, #0]
 8003394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003398:	81a3      	strh	r3, [r4, #12]
 800339a:	9b00      	ldr	r3, [sp, #0]
 800339c:	6120      	str	r0, [r4, #16]
 800339e:	6163      	str	r3, [r4, #20]
 80033a0:	9b01      	ldr	r3, [sp, #4]
 80033a2:	b15b      	cbz	r3, 80033bc <__smakebuf_r+0x74>
 80033a4:	4630      	mov	r0, r6
 80033a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033aa:	f000 f8d7 	bl	800355c <_isatty_r>
 80033ae:	b128      	cbz	r0, 80033bc <__smakebuf_r+0x74>
 80033b0:	89a3      	ldrh	r3, [r4, #12]
 80033b2:	f023 0303 	bic.w	r3, r3, #3
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	81a3      	strh	r3, [r4, #12]
 80033bc:	89a0      	ldrh	r0, [r4, #12]
 80033be:	4305      	orrs	r5, r0
 80033c0:	81a5      	strh	r5, [r4, #12]
 80033c2:	e7cd      	b.n	8003360 <__smakebuf_r+0x18>
 80033c4:	08003155 	.word	0x08003155

080033c8 <memchr>:
 80033c8:	4603      	mov	r3, r0
 80033ca:	b510      	push	{r4, lr}
 80033cc:	b2c9      	uxtb	r1, r1
 80033ce:	4402      	add	r2, r0
 80033d0:	4293      	cmp	r3, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	d101      	bne.n	80033da <memchr+0x12>
 80033d6:	2000      	movs	r0, #0
 80033d8:	e003      	b.n	80033e2 <memchr+0x1a>
 80033da:	7804      	ldrb	r4, [r0, #0]
 80033dc:	3301      	adds	r3, #1
 80033de:	428c      	cmp	r4, r1
 80033e0:	d1f6      	bne.n	80033d0 <memchr+0x8>
 80033e2:	bd10      	pop	{r4, pc}

080033e4 <_raise_r>:
 80033e4:	291f      	cmp	r1, #31
 80033e6:	b538      	push	{r3, r4, r5, lr}
 80033e8:	4604      	mov	r4, r0
 80033ea:	460d      	mov	r5, r1
 80033ec:	d904      	bls.n	80033f8 <_raise_r+0x14>
 80033ee:	2316      	movs	r3, #22
 80033f0:	6003      	str	r3, [r0, #0]
 80033f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033f6:	bd38      	pop	{r3, r4, r5, pc}
 80033f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80033fa:	b112      	cbz	r2, 8003402 <_raise_r+0x1e>
 80033fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003400:	b94b      	cbnz	r3, 8003416 <_raise_r+0x32>
 8003402:	4620      	mov	r0, r4
 8003404:	f000 f830 	bl	8003468 <_getpid_r>
 8003408:	462a      	mov	r2, r5
 800340a:	4601      	mov	r1, r0
 800340c:	4620      	mov	r0, r4
 800340e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003412:	f000 b817 	b.w	8003444 <_kill_r>
 8003416:	2b01      	cmp	r3, #1
 8003418:	d00a      	beq.n	8003430 <_raise_r+0x4c>
 800341a:	1c59      	adds	r1, r3, #1
 800341c:	d103      	bne.n	8003426 <_raise_r+0x42>
 800341e:	2316      	movs	r3, #22
 8003420:	6003      	str	r3, [r0, #0]
 8003422:	2001      	movs	r0, #1
 8003424:	e7e7      	b.n	80033f6 <_raise_r+0x12>
 8003426:	2400      	movs	r4, #0
 8003428:	4628      	mov	r0, r5
 800342a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800342e:	4798      	blx	r3
 8003430:	2000      	movs	r0, #0
 8003432:	e7e0      	b.n	80033f6 <_raise_r+0x12>

08003434 <raise>:
 8003434:	4b02      	ldr	r3, [pc, #8]	; (8003440 <raise+0xc>)
 8003436:	4601      	mov	r1, r0
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	f7ff bfd3 	b.w	80033e4 <_raise_r>
 800343e:	bf00      	nop
 8003440:	2000000c 	.word	0x2000000c

08003444 <_kill_r>:
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	2300      	movs	r3, #0
 8003448:	4d06      	ldr	r5, [pc, #24]	; (8003464 <_kill_r+0x20>)
 800344a:	4604      	mov	r4, r0
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	602b      	str	r3, [r5, #0]
 8003452:	f7fd f90c 	bl	800066e <_kill>
 8003456:	1c43      	adds	r3, r0, #1
 8003458:	d102      	bne.n	8003460 <_kill_r+0x1c>
 800345a:	682b      	ldr	r3, [r5, #0]
 800345c:	b103      	cbz	r3, 8003460 <_kill_r+0x1c>
 800345e:	6023      	str	r3, [r4, #0]
 8003460:	bd38      	pop	{r3, r4, r5, pc}
 8003462:	bf00      	nop
 8003464:	20000138 	.word	0x20000138

08003468 <_getpid_r>:
 8003468:	f7fd b8fa 	b.w	8000660 <_getpid>

0800346c <__sread>:
 800346c:	b510      	push	{r4, lr}
 800346e:	460c      	mov	r4, r1
 8003470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003474:	f000 f894 	bl	80035a0 <_read_r>
 8003478:	2800      	cmp	r0, #0
 800347a:	bfab      	itete	ge
 800347c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800347e:	89a3      	ldrhlt	r3, [r4, #12]
 8003480:	181b      	addge	r3, r3, r0
 8003482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003486:	bfac      	ite	ge
 8003488:	6563      	strge	r3, [r4, #84]	; 0x54
 800348a:	81a3      	strhlt	r3, [r4, #12]
 800348c:	bd10      	pop	{r4, pc}

0800348e <__swrite>:
 800348e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003492:	461f      	mov	r7, r3
 8003494:	898b      	ldrh	r3, [r1, #12]
 8003496:	4605      	mov	r5, r0
 8003498:	05db      	lsls	r3, r3, #23
 800349a:	460c      	mov	r4, r1
 800349c:	4616      	mov	r6, r2
 800349e:	d505      	bpl.n	80034ac <__swrite+0x1e>
 80034a0:	2302      	movs	r3, #2
 80034a2:	2200      	movs	r2, #0
 80034a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a8:	f000 f868 	bl	800357c <_lseek_r>
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	4632      	mov	r2, r6
 80034b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034b4:	81a3      	strh	r3, [r4, #12]
 80034b6:	4628      	mov	r0, r5
 80034b8:	463b      	mov	r3, r7
 80034ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034c2:	f000 b817 	b.w	80034f4 <_write_r>

080034c6 <__sseek>:
 80034c6:	b510      	push	{r4, lr}
 80034c8:	460c      	mov	r4, r1
 80034ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ce:	f000 f855 	bl	800357c <_lseek_r>
 80034d2:	1c43      	adds	r3, r0, #1
 80034d4:	89a3      	ldrh	r3, [r4, #12]
 80034d6:	bf15      	itete	ne
 80034d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80034da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034e2:	81a3      	strheq	r3, [r4, #12]
 80034e4:	bf18      	it	ne
 80034e6:	81a3      	strhne	r3, [r4, #12]
 80034e8:	bd10      	pop	{r4, pc}

080034ea <__sclose>:
 80034ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ee:	f000 b813 	b.w	8003518 <_close_r>
	...

080034f4 <_write_r>:
 80034f4:	b538      	push	{r3, r4, r5, lr}
 80034f6:	4604      	mov	r4, r0
 80034f8:	4608      	mov	r0, r1
 80034fa:	4611      	mov	r1, r2
 80034fc:	2200      	movs	r2, #0
 80034fe:	4d05      	ldr	r5, [pc, #20]	; (8003514 <_write_r+0x20>)
 8003500:	602a      	str	r2, [r5, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	f7fd f8ea 	bl	80006dc <_write>
 8003508:	1c43      	adds	r3, r0, #1
 800350a:	d102      	bne.n	8003512 <_write_r+0x1e>
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	b103      	cbz	r3, 8003512 <_write_r+0x1e>
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	bd38      	pop	{r3, r4, r5, pc}
 8003514:	20000138 	.word	0x20000138

08003518 <_close_r>:
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	2300      	movs	r3, #0
 800351c:	4d05      	ldr	r5, [pc, #20]	; (8003534 <_close_r+0x1c>)
 800351e:	4604      	mov	r4, r0
 8003520:	4608      	mov	r0, r1
 8003522:	602b      	str	r3, [r5, #0]
 8003524:	f7fd f8f6 	bl	8000714 <_close>
 8003528:	1c43      	adds	r3, r0, #1
 800352a:	d102      	bne.n	8003532 <_close_r+0x1a>
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	b103      	cbz	r3, 8003532 <_close_r+0x1a>
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	bd38      	pop	{r3, r4, r5, pc}
 8003534:	20000138 	.word	0x20000138

08003538 <_fstat_r>:
 8003538:	b538      	push	{r3, r4, r5, lr}
 800353a:	2300      	movs	r3, #0
 800353c:	4d06      	ldr	r5, [pc, #24]	; (8003558 <_fstat_r+0x20>)
 800353e:	4604      	mov	r4, r0
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	602b      	str	r3, [r5, #0]
 8003546:	f7fd f8f0 	bl	800072a <_fstat>
 800354a:	1c43      	adds	r3, r0, #1
 800354c:	d102      	bne.n	8003554 <_fstat_r+0x1c>
 800354e:	682b      	ldr	r3, [r5, #0]
 8003550:	b103      	cbz	r3, 8003554 <_fstat_r+0x1c>
 8003552:	6023      	str	r3, [r4, #0]
 8003554:	bd38      	pop	{r3, r4, r5, pc}
 8003556:	bf00      	nop
 8003558:	20000138 	.word	0x20000138

0800355c <_isatty_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	2300      	movs	r3, #0
 8003560:	4d05      	ldr	r5, [pc, #20]	; (8003578 <_isatty_r+0x1c>)
 8003562:	4604      	mov	r4, r0
 8003564:	4608      	mov	r0, r1
 8003566:	602b      	str	r3, [r5, #0]
 8003568:	f7fd f8ee 	bl	8000748 <_isatty>
 800356c:	1c43      	adds	r3, r0, #1
 800356e:	d102      	bne.n	8003576 <_isatty_r+0x1a>
 8003570:	682b      	ldr	r3, [r5, #0]
 8003572:	b103      	cbz	r3, 8003576 <_isatty_r+0x1a>
 8003574:	6023      	str	r3, [r4, #0]
 8003576:	bd38      	pop	{r3, r4, r5, pc}
 8003578:	20000138 	.word	0x20000138

0800357c <_lseek_r>:
 800357c:	b538      	push	{r3, r4, r5, lr}
 800357e:	4604      	mov	r4, r0
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	2200      	movs	r2, #0
 8003586:	4d05      	ldr	r5, [pc, #20]	; (800359c <_lseek_r+0x20>)
 8003588:	602a      	str	r2, [r5, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	f7fd f8e6 	bl	800075c <_lseek>
 8003590:	1c43      	adds	r3, r0, #1
 8003592:	d102      	bne.n	800359a <_lseek_r+0x1e>
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	b103      	cbz	r3, 800359a <_lseek_r+0x1e>
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	bd38      	pop	{r3, r4, r5, pc}
 800359c:	20000138 	.word	0x20000138

080035a0 <_read_r>:
 80035a0:	b538      	push	{r3, r4, r5, lr}
 80035a2:	4604      	mov	r4, r0
 80035a4:	4608      	mov	r0, r1
 80035a6:	4611      	mov	r1, r2
 80035a8:	2200      	movs	r2, #0
 80035aa:	4d05      	ldr	r5, [pc, #20]	; (80035c0 <_read_r+0x20>)
 80035ac:	602a      	str	r2, [r5, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	f7fd f877 	bl	80006a2 <_read>
 80035b4:	1c43      	adds	r3, r0, #1
 80035b6:	d102      	bne.n	80035be <_read_r+0x1e>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	b103      	cbz	r3, 80035be <_read_r+0x1e>
 80035bc:	6023      	str	r3, [r4, #0]
 80035be:	bd38      	pop	{r3, r4, r5, pc}
 80035c0:	20000138 	.word	0x20000138

080035c4 <_init>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	bf00      	nop
 80035c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ca:	bc08      	pop	{r3}
 80035cc:	469e      	mov	lr, r3
 80035ce:	4770      	bx	lr

080035d0 <_fini>:
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	bf00      	nop
 80035d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d6:	bc08      	pop	{r3}
 80035d8:	469e      	mov	lr, r3
 80035da:	4770      	bx	lr
