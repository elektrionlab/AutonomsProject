
embeddedSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003588  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800392c  0800392c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800392c  0800392c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800392c  0800392c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000070  080039a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  080039a4  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000712f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ecb  00000000  00000000  000271c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  00029098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  000298d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186ce  00000000  00000000  0002a028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0a8  00000000  00000000  000426f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008399a  00000000  00000000  0004d79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1138  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028bc  00000000  00000000  000d1188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800367c 	.word	0x0800367c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800367c 	.word	0x0800367c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <UserSystemInit>:

#include "system.h"

struct System controlSystem;

void UserSystemInit(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	controlSystem.ledOnTime = 300;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <UserSystemInit+0x38>)
 8000176:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800017a:	605a      	str	r2, [r3, #4]
	controlSystem.ledOffTime = 700;
 800017c:	4b0a      	ldr	r3, [pc, #40]	; (80001a8 <UserSystemInit+0x38>)
 800017e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000182:	609a      	str	r2, [r3, #8]

	controlSystem.echoType = 1;	// echo yapÄ±yor
 8000184:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <UserSystemInit+0x38>)
 8000186:	2201      	movs	r2, #1
 8000188:	751a      	strb	r2, [r3, #20]
	controlSystem.systemState = 1;
 800018a:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <UserSystemInit+0x38>)
 800018c:	2201      	movs	r2, #1
 800018e:	755a      	strb	r2, [r3, #21]

	controlSystem.oldLedTime = 0;
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <UserSystemInit+0x38>)
 8000192:	2200      	movs	r2, #0
 8000194:	62da      	str	r2, [r3, #44]	; 0x2c
	controlSystem.ledState = 0;
 8000196:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <UserSystemInit+0x38>)
 8000198:	2200      	movs	r2, #0
 800019a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800019e:	bf00      	nop
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	2000008c 	.word	0x2000008c

080001ac <ledControl>:
#include "gpio.h"
#include "system.h"

extern struct System controlSystem;

void ledControl(uint32_t *timer){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]

	controlSystem.newLedTime = *timer;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a1c      	ldr	r2, [pc, #112]	; (800022c <ledControl+0x80>)
 80001ba:	6293      	str	r3, [r2, #40]	; 0x28

		if(controlSystem.ledState == 1){
 80001bc:	4b1b      	ldr	r3, [pc, #108]	; (800022c <ledControl+0x80>)
 80001be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d113      	bne.n	80001ee <ledControl+0x42>
			if((controlSystem.newLedTime - controlSystem.oldLedTime) >= controlSystem.ledOnTime){
 80001c6:	4b19      	ldr	r3, [pc, #100]	; (800022c <ledControl+0x80>)
 80001c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001ca:	4b18      	ldr	r3, [pc, #96]	; (800022c <ledControl+0x80>)
 80001cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001ce:	1ad2      	subs	r2, r2, r3
 80001d0:	4b16      	ldr	r3, [pc, #88]	; (800022c <ledControl+0x80>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	429a      	cmp	r2, r3
 80001d6:	d324      	bcc.n	8000222 <ledControl+0x76>
				controlSystem.ledState = 0;
 80001d8:	4b14      	ldr	r3, [pc, #80]	; (800022c <ledControl+0x80>)
 80001da:	2200      	movs	r2, #0
 80001dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e6:	4812      	ldr	r0, [pc, #72]	; (8000230 <ledControl+0x84>)
 80001e8:	f000 ffa2 	bl	8001130 <HAL_GPIO_WritePin>
				controlSystem.oldLedTime = controlSystem.newLedTime;
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
			}
		}

}
 80001ec:	e019      	b.n	8000222 <ledControl+0x76>
			if((controlSystem.newLedTime - controlSystem.oldLedTime) >= (controlSystem.ledOffTime + controlSystem.ledOnTime)){
 80001ee:	4b0f      	ldr	r3, [pc, #60]	; (800022c <ledControl+0x80>)
 80001f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001f2:	4b0e      	ldr	r3, [pc, #56]	; (800022c <ledControl+0x80>)
 80001f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <ledControl+0x80>)
 80001fa:	6899      	ldr	r1, [r3, #8]
 80001fc:	4b0b      	ldr	r3, [pc, #44]	; (800022c <ledControl+0x80>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	440b      	add	r3, r1
 8000202:	429a      	cmp	r2, r3
 8000204:	d30d      	bcc.n	8000222 <ledControl+0x76>
				controlSystem.ledState = 1;
 8000206:	4b09      	ldr	r3, [pc, #36]	; (800022c <ledControl+0x80>)
 8000208:	2201      	movs	r2, #1
 800020a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				controlSystem.oldLedTime = controlSystem.newLedTime;
 800020e:	4b07      	ldr	r3, [pc, #28]	; (800022c <ledControl+0x80>)
 8000210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000212:	4a06      	ldr	r2, [pc, #24]	; (800022c <ledControl+0x80>)
 8000214:	62d3      	str	r3, [r2, #44]	; 0x2c
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000216:	2201      	movs	r2, #1
 8000218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <ledControl+0x84>)
 800021e:	f000 ff87 	bl	8001130 <HAL_GPIO_WritePin>
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	2000008c 	.word	0x2000008c
 8000230:	40011000 	.word	0x40011000

08000234 <task2>:
extern struct uartDataStr uartData;

char *parsedData[3];
int ledTime;

void task2(){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

	getUartMessage(&uartData);
 8000238:	4804      	ldr	r0, [pc, #16]	; (800024c <task2+0x18>)
 800023a:	f000 f8b9 	bl	80003b0 <getUartMessage>
	dataParser();
 800023e:	f000 f817 	bl	8000270 <dataParser>
	echoTask();
 8000242:	f000 f805 	bl	8000250 <echoTask>

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	200000cc 	.word	0x200000cc

08000250 <echoTask>:

void echoTask(){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	if(controlSystem.echoType == 1){
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <echoTask+0x18>)
 8000256:	7d1b      	ldrb	r3, [r3, #20]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d102      	bne.n	8000262 <echoTask+0x12>
		echoMessage(&uartData);
 800025c:	4803      	ldr	r0, [pc, #12]	; (800026c <echoTask+0x1c>)
 800025e:	f000 f8ed 	bl	800043c <echoMessage>
	}
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	2000008c 	.word	0x2000008c
 800026c:	200000cc 	.word	0x200000cc

08000270 <dataParser>:

void dataParser(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	// datalarÄ±n parse edilmesi ve ilgili ayarlarÄ±n yapÄ±lmasÄ±
	if(!strcmp(controlSystem.uartMessageData, "stop\r\n\0")){
 8000276:	4b32      	ldr	r3, [pc, #200]	; (8000340 <dataParser+0xd0>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4932      	ldr	r1, [pc, #200]	; (8000344 <dataParser+0xd4>)
 800027c:	4618      	mov	r0, r3
 800027e:	f7ff ff65 	bl	800014c <strcmp>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d106      	bne.n	8000296 <dataParser+0x26>
		controlSystem.echoType = 0;
 8000288:	4b2d      	ldr	r3, [pc, #180]	; (8000340 <dataParser+0xd0>)
 800028a:	2200      	movs	r2, #0
 800028c:	751a      	strb	r2, [r3, #20]
		controlSystem.systemState = 0;
 800028e:	4b2c      	ldr	r3, [pc, #176]	; (8000340 <dataParser+0xd0>)
 8000290:	2200      	movs	r2, #0
 8000292:	755a      	strb	r2, [r3, #21]
		}
	}
	else{
		// TODO:
	}
}
 8000294:	e050      	b.n	8000338 <dataParser+0xc8>
	else if(!strcmp(controlSystem.uartMessageData, "start\r\n\0") || controlSystem.systemState == 1){
 8000296:	4b2a      	ldr	r3, [pc, #168]	; (8000340 <dataParser+0xd0>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	492b      	ldr	r1, [pc, #172]	; (8000348 <dataParser+0xd8>)
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ff55 	bl	800014c <strcmp>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d003      	beq.n	80002b0 <dataParser+0x40>
 80002a8:	4b25      	ldr	r3, [pc, #148]	; (8000340 <dataParser+0xd0>)
 80002aa:	7d5b      	ldrb	r3, [r3, #21]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d143      	bne.n	8000338 <dataParser+0xc8>
		controlSystem.echoType = 1;
 80002b0:	4b23      	ldr	r3, [pc, #140]	; (8000340 <dataParser+0xd0>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	751a      	strb	r2, [r3, #20]
		controlSystem.systemState = 1;
 80002b6:	4b22      	ldr	r3, [pc, #136]	; (8000340 <dataParser+0xd0>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	755a      	strb	r2, [r3, #21]
		int i = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	607b      	str	r3, [r7, #4]
		char *p = strtok(controlSystem.uartMessageData, "=");
 80002c0:	4b1f      	ldr	r3, [pc, #124]	; (8000340 <dataParser+0xd0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4921      	ldr	r1, [pc, #132]	; (800034c <dataParser+0xdc>)
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 f9ea 	bl	80026a0 <strtok>
 80002cc:	6038      	str	r0, [r7, #0]
		while(p != NULL){
 80002ce:	e00b      	b.n	80002e8 <dataParser+0x78>
			parsedData[i++] = p;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	607a      	str	r2, [r7, #4]
 80002d6:	491e      	ldr	r1, [pc, #120]	; (8000350 <dataParser+0xe0>)
 80002d8:	683a      	ldr	r2, [r7, #0]
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p = strtok(NULL, "=");
 80002de:	491b      	ldr	r1, [pc, #108]	; (800034c <dataParser+0xdc>)
 80002e0:	2000      	movs	r0, #0
 80002e2:	f002 f9dd 	bl	80026a0 <strtok>
 80002e6:	6038      	str	r0, [r7, #0]
		while(p != NULL){
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d1f0      	bne.n	80002d0 <dataParser+0x60>
		if(!strcmp(parsedData[0], "ledon")){
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <dataParser+0xe0>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4918      	ldr	r1, [pc, #96]	; (8000354 <dataParser+0xe4>)
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ff29 	bl	800014c <strcmp>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d109      	bne.n	8000314 <dataParser+0xa4>
			controlSystem.ledOnTime =  atoi(parsedData[1]);
 8000300:	4b13      	ldr	r3, [pc, #76]	; (8000350 <dataParser+0xe0>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4618      	mov	r0, r3
 8000306:	f002 f87d 	bl	8002404 <atoi>
 800030a:	4603      	mov	r3, r0
 800030c:	461a      	mov	r2, r3
 800030e:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <dataParser+0xd0>)
 8000310:	605a      	str	r2, [r3, #4]
}
 8000312:	e011      	b.n	8000338 <dataParser+0xc8>
		else if(!strcmp(parsedData[0], "ledoff")){
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <dataParser+0xe0>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	490f      	ldr	r1, [pc, #60]	; (8000358 <dataParser+0xe8>)
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff16 	bl	800014c <strcmp>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d108      	bne.n	8000338 <dataParser+0xc8>
			controlSystem.ledOffTime = atoi(parsedData[1]);
 8000326:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <dataParser+0xe0>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	4618      	mov	r0, r3
 800032c:	f002 f86a 	bl	8002404 <atoi>
 8000330:	4603      	mov	r3, r0
 8000332:	461a      	mov	r2, r3
 8000334:	4b02      	ldr	r3, [pc, #8]	; (8000340 <dataParser+0xd0>)
 8000336:	609a      	str	r2, [r3, #8]
}
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	2000008c 	.word	0x2000008c
 8000344:	08003694 	.word	0x08003694
 8000348:	0800369c 	.word	0x0800369c
 800034c:	080036a8 	.word	0x080036a8
 8000350:	200000c0 	.word	0x200000c0
 8000354:	080036ac 	.word	0x080036ac
 8000358:	080036b4 	.word	0x080036b4

0800035c <uartDataStorage>:
#include "system.h"

struct uartDataStr uartData;
extern struct System controlSystem;

void uartDataStorage(uint8_t *rxTempBuffer){
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]

	uartData.rxBuffer[uartData.rxIndex] = rxTempBuffer[0];
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <uartDataStorage+0x50>)
 8000366:	7d1b      	ldrb	r3, [r3, #20]
 8000368:	461a      	mov	r2, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	7819      	ldrb	r1, [r3, #0]
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <uartDataStorage+0x50>)
 8000370:	5499      	strb	r1, [r3, r2]

	if(uartData.rxBuffer[uartData.rxIndex] == '\n'){	/* bir data gelmiÅ demektir. buffer'da okunmasÄ± gereken data var. */
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <uartDataStorage+0x50>)
 8000374:	7d1b      	ldrb	r3, [r3, #20]
 8000376:	461a      	mov	r2, r3
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <uartDataStorage+0x50>)
 800037a:	5c9b      	ldrb	r3, [r3, r2]
 800037c:	2b0a      	cmp	r3, #10
 800037e:	d102      	bne.n	8000386 <uartDataStorage+0x2a>
		uartData.newDataFlag = 1;
 8000380:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <uartDataStorage+0x50>)
 8000382:	2201      	movs	r2, #1
 8000384:	759a      	strb	r2, [r3, #22]
	}

	uartData.rxIndex++;
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <uartDataStorage+0x50>)
 8000388:	7d1b      	ldrb	r3, [r3, #20]
 800038a:	3301      	adds	r3, #1
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4b07      	ldr	r3, [pc, #28]	; (80003ac <uartDataStorage+0x50>)
 8000390:	751a      	strb	r2, [r3, #20]

	if(uartData.rxIndex == (rxBufferSize-1))
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <uartDataStorage+0x50>)
 8000394:	7d1b      	ldrb	r3, [r3, #20]
 8000396:	2b13      	cmp	r3, #19
 8000398:	d102      	bne.n	80003a0 <uartDataStorage+0x44>
		uartData.rxIndex = 0;
 800039a:	4b04      	ldr	r3, [pc, #16]	; (80003ac <uartDataStorage+0x50>)
 800039c:	2200      	movs	r2, #0
 800039e:	751a      	strb	r2, [r3, #20]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	200000cc 	.word	0x200000cc

080003b0 <getUartMessage>:

char getUartMessage(struct uartDataStr *uartData){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

	if(uartData->newDataFlag == 1){
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	7d9b      	ldrb	r3, [r3, #22]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d134      	bne.n	800042a <getUartMessage+0x7a>

		uint8_t newDataLineCounter = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	73fb      	strb	r3, [r7, #15]
		uartData->newDataLine = (char*) calloc(uartData->rxIndex+1, sizeof(char));
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	7d1b      	ldrb	r3, [r3, #20]
 80003c8:	3301      	adds	r3, #1
 80003ca:	2101      	movs	r1, #1
 80003cc:	4618      	mov	r0, r3
 80003ce:	f002 f81d 	bl	800240c <calloc>
 80003d2:	4603      	mov	r3, r0
 80003d4:	461a      	mov	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	619a      	str	r2, [r3, #24]

		for(uint8_t i = uartData->rxIndexOld; i < uartData->rxIndex; i++){
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	7d5b      	ldrb	r3, [r3, #21]
 80003de:	73bb      	strb	r3, [r7, #14]
 80003e0:	e00c      	b.n	80003fc <getUartMessage+0x4c>
			uartData->newDataLine[newDataLineCounter++] = (char) uartData->rxBuffer[i];
 80003e2:	7bba      	ldrb	r2, [r7, #14]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6999      	ldr	r1, [r3, #24]
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
 80003ea:	1c58      	adds	r0, r3, #1
 80003ec:	73f8      	strb	r0, [r7, #15]
 80003ee:	440b      	add	r3, r1
 80003f0:	6879      	ldr	r1, [r7, #4]
 80003f2:	5c8a      	ldrb	r2, [r1, r2]
 80003f4:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = uartData->rxIndexOld; i < uartData->rxIndex; i++){
 80003f6:	7bbb      	ldrb	r3, [r7, #14]
 80003f8:	3301      	adds	r3, #1
 80003fa:	73bb      	strb	r3, [r7, #14]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	7d1b      	ldrb	r3, [r3, #20]
 8000400:	7bba      	ldrb	r2, [r7, #14]
 8000402:	429a      	cmp	r2, r3
 8000404:	d3ed      	bcc.n	80003e2 <getUartMessage+0x32>
		}

		uartData->rxIndex = 0;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2200      	movs	r2, #0
 800040a:	751a      	strb	r2, [r3, #20]
		uartData->newDataFlag = 0;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2200      	movs	r2, #0
 8000410:	759a      	strb	r2, [r3, #22]
		uartData->echoFlag = 1;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	75da      	strb	r2, [r3, #23]

		controlSystem.uartMessageData = uartData->newDataLine;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a06      	ldr	r2, [pc, #24]	; (8000438 <getUartMessage+0x88>)
 800041e:	6013      	str	r3, [r2, #0]

		free(uartData->newDataLine);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4618      	mov	r0, r3
 8000426:	f002 f82b 	bl	8002480 <free>

	}

	return *uartData->newDataLine;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	781b      	ldrb	r3, [r3, #0]

}
 8000430:	4618      	mov	r0, r3
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	2000008c 	.word	0x2000008c

0800043c <echoMessage>:

void echoMessage(struct uartDataStr *uartData){
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	if(uartData->echoFlag == 1){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	7ddb      	ldrb	r3, [r3, #23]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d10f      	bne.n	800046c <echoMessage+0x30>
		uartTransmitData((uint8_t*)uartData->newDataLine, strlen(uartData->newDataLine));
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	699c      	ldr	r4, [r3, #24]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff fe83 	bl	8000160 <strlen>
 800045a:	4603      	mov	r3, r0
 800045c:	b29b      	uxth	r3, r3
 800045e:	4619      	mov	r1, r3
 8000460:	4620      	mov	r0, r4
 8000462:	f000 f82b 	bl	80004bc <uartTransmitData>
		uartData->echoFlag = 0;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2200      	movs	r2, #0
 800046a:	75da      	strb	r2, [r3, #23]
	}
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bd90      	pop	{r4, r7, pc}

08000474 <uartReceiveIT>:

#include "uartTransport.h"

uint8_t rxTempBuffer[5];

void uartReceiveIT(){
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, rxTempBuffer, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	4903      	ldr	r1, [pc, #12]	; (8000488 <uartReceiveIT+0x14>)
 800047c:	4803      	ldr	r0, [pc, #12]	; (800048c <uartReceiveIT+0x18>)
 800047e:	f001 fb68 	bl	8001b52 <HAL_UART_Receive_IT>
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	200000e8 	.word	0x200000e8
 800048c:	200000f8 	.word	0x200000f8

08000490 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]

	if(huart == &huart2){
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a06      	ldr	r2, [pc, #24]	; (80004b4 <HAL_UART_RxCpltCallback+0x24>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d104      	bne.n	80004aa <HAL_UART_RxCpltCallback+0x1a>
		uartDataStorage(rxTempBuffer);
 80004a0:	4805      	ldr	r0, [pc, #20]	; (80004b8 <HAL_UART_RxCpltCallback+0x28>)
 80004a2:	f7ff ff5b 	bl	800035c <uartDataStorage>
		uartReceiveIT();
 80004a6:	f7ff ffe5 	bl	8000474 <uartReceiveIT>
	}

}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200000f8 	.word	0x200000f8
 80004b8:	200000e8 	.word	0x200000e8

080004bc <uartTransmitData>:

void uartTransmitData(uint8_t *data, uint16_t size){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	460b      	mov	r3, r1
 80004c6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, data, size, 100);
 80004c8:	887a      	ldrh	r2, [r7, #2]
 80004ca:	2364      	movs	r3, #100	; 0x64
 80004cc:	6879      	ldr	r1, [r7, #4]
 80004ce:	4803      	ldr	r0, [pc, #12]	; (80004dc <uartTransmitData+0x20>)
 80004d0:	f001 faad 	bl	8001a2e <HAL_UART_Transmit>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	200000f8 	.word	0x200000f8

080004e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <MX_GPIO_Init+0x90>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a1d      	ldr	r2, [pc, #116]	; (8000570 <MX_GPIO_Init+0x90>)
 80004fa:	f043 0310 	orr.w	r3, r3, #16
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_GPIO_Init+0x90>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0310 	and.w	r3, r3, #16
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_GPIO_Init+0x90>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a17      	ldr	r2, [pc, #92]	; (8000570 <MX_GPIO_Init+0x90>)
 8000512:	f043 0320 	orr.w	r3, r3, #32
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_GPIO_Init+0x90>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0320 	and.w	r3, r3, #32
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_GPIO_Init+0x90>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a11      	ldr	r2, [pc, #68]	; (8000570 <MX_GPIO_Init+0x90>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_GPIO_Init+0x90>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <MX_GPIO_Init+0x94>)
 8000544:	f000 fdf4 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054e:	2301      	movs	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	2302      	movs	r3, #2
 8000558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800055a:	f107 0310 	add.w	r3, r7, #16
 800055e:	4619      	mov	r1, r3
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_GPIO_Init+0x94>)
 8000562:	f000 fc61 	bl	8000e28 <HAL_GPIO_Init>

}
 8000566:	bf00      	nop
 8000568:	3720      	adds	r7, #32
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000
 8000574:	40011000 	.word	0x40011000

08000578 <taskTimer>:
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void taskTimer(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	timer++;
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <taskTimer+0x18>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	4a03      	ldr	r2, [pc, #12]	; (8000590 <taskTimer+0x18>)
 8000584:	6013      	str	r3, [r2, #0]

	ledControl(&timer);
 8000586:	4802      	ldr	r0, [pc, #8]	; (8000590 <taskTimer+0x18>)
 8000588:	f7ff fe10 	bl	80001ac <ledControl>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000f0 	.word	0x200000f0

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000598:	f000 fa26 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f80b 	bl	80005b6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f7ff ff9e 	bl	80004e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 f97e 	bl	80008a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UserSystemInit();
 80005a8:	f7ff fde2 	bl	8000170 <UserSystemInit>
  uartReceiveIT();
 80005ac:	f7ff ff62 	bl	8000474 <uartReceiveIT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  task2();
 80005b0:	f7ff fe40 	bl	8000234 <task2>
 80005b4:	e7fc      	b.n	80005b0 <main+0x1c>

080005b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b090      	sub	sp, #64	; 0x40
 80005ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005bc:	f107 0318 	add.w	r3, r7, #24
 80005c0:	2228      	movs	r2, #40	; 0x28
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 ff63 	bl	8002490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e6:	2301      	movs	r3, #1
 80005e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fdae 	bl	8001160 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800060a:	f000 f819 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2302      	movs	r3, #2
 8000614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2102      	movs	r1, #2
 8000628:	4618      	mov	r0, r3
 800062a:	f001 f81b 	bl	8001664 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000634:	f000 f804 	bl	8000640 <Error_Handler>
  }
}
 8000638:	bf00      	nop
 800063a:	3740      	adds	r7, #64	; 0x40
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_MspInit+0x5c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <HAL_MspInit+0x5c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_MspInit+0x5c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_MspInit+0x5c>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_MspInit+0x5c>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_MspInit+0x5c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_MspInit+0x60>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_MspInit+0x60>)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010000 	.word	0x40010000

080006b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <NMI_Handler+0x4>

080006b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <HardFault_Handler+0x4>

080006bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <MemManage_Handler+0x4>

080006c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <BusFault_Handler+0x4>

080006c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <UsageFault_Handler+0x4>

080006ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
taskTimer();
 80006f6:	f7ff ff3f 	bl	8000578 <taskTimer>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fa:	f000 f9bb 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000708:	4802      	ldr	r0, [pc, #8]	; (8000714 <USART2_IRQHandler+0x10>)
 800070a:	f001 fa53 	bl	8001bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000f8 	.word	0x200000f8

08000718 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
	return 1;
 800071c:	2301      	movs	r3, #1
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <_kill>:

int _kill(int pid, int sig)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000730:	f001 fe74 	bl	800241c <__errno>
 8000734:	4603      	mov	r3, r0
 8000736:	2216      	movs	r2, #22
 8000738:	601a      	str	r2, [r3, #0]
	return -1;
 800073a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <_exit>:

void _exit (int status)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800074e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff ffe7 	bl	8000726 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000758:	e7fe      	b.n	8000758 <_exit+0x12>

0800075a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	e00a      	b.n	8000782 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800076c:	f3af 8000 	nop.w
 8000770:	4601      	mov	r1, r0
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	1c5a      	adds	r2, r3, #1
 8000776:	60ba      	str	r2, [r7, #8]
 8000778:	b2ca      	uxtb	r2, r1
 800077a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	3301      	adds	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	697a      	ldr	r2, [r7, #20]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	429a      	cmp	r2, r3
 8000788:	dbf0      	blt.n	800076c <_read+0x12>
	}

return len;
 800078a:	687b      	ldr	r3, [r7, #4]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3718      	adds	r7, #24
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e009      	b.n	80007ba <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	60ba      	str	r2, [r7, #8]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	3301      	adds	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	697a      	ldr	r2, [r7, #20]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	429a      	cmp	r2, r3
 80007c0:	dbf1      	blt.n	80007a6 <_write+0x12>
	}
	return len;
 80007c2:	687b      	ldr	r3, [r7, #4]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <_close>:

int _close(int file)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	return -1;
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007d8:	4618      	mov	r0, r3
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007f2:	605a      	str	r2, [r3, #4]
	return 0;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <_isatty>:

int _isatty(int file)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	return 1;
 8000808:	2301      	movs	r3, #1
}
 800080a:	4618      	mov	r0, r3
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
	return 0;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000834:	4a14      	ldr	r2, [pc, #80]	; (8000888 <_sbrk+0x5c>)
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <_sbrk+0x60>)
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <_sbrk+0x64>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <_sbrk+0x64>)
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <_sbrk+0x68>)
 800084c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <_sbrk+0x64>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	429a      	cmp	r2, r3
 800085a:	d207      	bcs.n	800086c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800085c:	f001 fdde 	bl	800241c <__errno>
 8000860:	4603      	mov	r3, r0
 8000862:	220c      	movs	r2, #12
 8000864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800086a:	e009      	b.n	8000880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <_sbrk+0x64>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <_sbrk+0x64>)
 800087c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800087e:	68fb      	ldr	r3, [r7, #12]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20005000 	.word	0x20005000
 800088c:	00000400 	.word	0x00000400
 8000890:	200000f4 	.word	0x200000f4
 8000894:	20000150 	.word	0x20000150

08000898 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <MX_USART2_UART_Init+0x50>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008dc:	f001 f85a 	bl	8001994 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008e6:	f7ff feab 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000f8 	.word	0x200000f8
 80008f4:	40004400 	.word	0x40004400

080008f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <HAL_UART_MspInit+0x98>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d137      	bne.n	8000988 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <HAL_UART_MspInit+0x9c>)
 800091a:	69db      	ldr	r3, [r3, #28]
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <HAL_UART_MspInit+0x9c>)
 800091e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000922:	61d3      	str	r3, [r2, #28]
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <HAL_UART_MspInit+0x9c>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_UART_MspInit+0x9c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a17      	ldr	r2, [pc, #92]	; (8000994 <HAL_UART_MspInit+0x9c>)
 8000936:	f043 0304 	orr.w	r3, r3, #4
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_UART_MspInit+0x9c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000948:	2304      	movs	r3, #4
 800094a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	4619      	mov	r1, r3
 800095a:	480f      	ldr	r0, [pc, #60]	; (8000998 <HAL_UART_MspInit+0xa0>)
 800095c:	f000 fa64 	bl	8000e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000960:	2308      	movs	r3, #8
 8000962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4619      	mov	r1, r3
 8000972:	4809      	ldr	r0, [pc, #36]	; (8000998 <HAL_UART_MspInit+0xa0>)
 8000974:	f000 fa58 	bl	8000e28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2101      	movs	r1, #1
 800097c:	2026      	movs	r0, #38	; 0x26
 800097e:	f000 f96c 	bl	8000c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000982:	2026      	movs	r0, #38	; 0x26
 8000984:	f000 f985 	bl	8000c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40004400 	.word	0x40004400
 8000994:	40021000 	.word	0x40021000
 8000998:	40010800 	.word	0x40010800

0800099c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	; (80009d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	; (80009e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009c2:	f7ff ff69 	bl	8000898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c6:	f001 fd2f 	bl	8002428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ca:	f7ff fde3 	bl	8000594 <main>
  bx lr
 80009ce:	4770      	bx	lr
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009d8:	08003934 	.word	0x08003934
  ldr r2, =_sbss
 80009dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009e0:	20000150 	.word	0x20000150

080009e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_2_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x28>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x28>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f923 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff fe22 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40022000 	.word	0x40022000

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f93b 	bl	8000cae <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a50:	f000 f903 	bl	8000c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_IncTick+0x1c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x20>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <HAL_IncTick+0x20>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	20000008 	.word	0x20000008
 8000a94:	2000013c 	.word	0x2000013c

08000a98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <HAL_GetTick+0x10>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	2000013c 	.word	0x2000013c

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db0b      	blt.n	8000b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	4906      	ldr	r1, [pc, #24]	; (8000b44 <__NVIC_EnableIRQ+0x34>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	; (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	; (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c10:	d301      	bcc.n	8000c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00f      	b.n	8000c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <SysTick_Config+0x40>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1e:	210f      	movs	r1, #15
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c24:	f7ff ff90 	bl	8000b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SysTick_Config+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Config+0x40>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff2d 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6c:	f7ff ff42 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff ff90 	bl	8000b9c <NVIC_EncodePriority>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff5f 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff35 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ffa2 	bl	8000c00 <SysTick_Config>
 8000cbc:	4603      	mov	r3, r0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d008      	beq.n	8000cee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2204      	movs	r2, #4
 8000ce0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e020      	b.n	8000d30 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 020e 	bic.w	r2, r2, #14
 8000cfc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 0201 	bic.w	r2, r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d16:	2101      	movs	r1, #1
 8000d18:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
	...

08000d3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d005      	beq.n	8000d5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2204      	movs	r2, #4
 8000d56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	e051      	b.n	8000e02 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 020e 	bic.w	r2, r2, #14
 8000d6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0201 	bic.w	r2, r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a22      	ldr	r2, [pc, #136]	; (8000e0c <HAL_DMA_Abort_IT+0xd0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d029      	beq.n	8000ddc <HAL_DMA_Abort_IT+0xa0>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a20      	ldr	r2, [pc, #128]	; (8000e10 <HAL_DMA_Abort_IT+0xd4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d022      	beq.n	8000dd8 <HAL_DMA_Abort_IT+0x9c>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <HAL_DMA_Abort_IT+0xd8>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d01a      	beq.n	8000dd2 <HAL_DMA_Abort_IT+0x96>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <HAL_DMA_Abort_IT+0xdc>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d012      	beq.n	8000dcc <HAL_DMA_Abort_IT+0x90>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <HAL_DMA_Abort_IT+0xe0>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d00a      	beq.n	8000dc6 <HAL_DMA_Abort_IT+0x8a>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a1a      	ldr	r2, [pc, #104]	; (8000e20 <HAL_DMA_Abort_IT+0xe4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d102      	bne.n	8000dc0 <HAL_DMA_Abort_IT+0x84>
 8000dba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dbe:	e00e      	b.n	8000dde <HAL_DMA_Abort_IT+0xa2>
 8000dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dc4:	e00b      	b.n	8000dde <HAL_DMA_Abort_IT+0xa2>
 8000dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dca:	e008      	b.n	8000dde <HAL_DMA_Abort_IT+0xa2>
 8000dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd0:	e005      	b.n	8000dde <HAL_DMA_Abort_IT+0xa2>
 8000dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd6:	e002      	b.n	8000dde <HAL_DMA_Abort_IT+0xa2>
 8000dd8:	2310      	movs	r3, #16
 8000dda:	e000      	b.n	8000dde <HAL_DMA_Abort_IT+0xa2>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <HAL_DMA_Abort_IT+0xe8>)
 8000de0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2201      	movs	r2, #1
 8000de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	4798      	blx	r3
    } 
  }
  return status;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40020008 	.word	0x40020008
 8000e10:	4002001c 	.word	0x4002001c
 8000e14:	40020030 	.word	0x40020030
 8000e18:	40020044 	.word	0x40020044
 8000e1c:	40020058 	.word	0x40020058
 8000e20:	4002006c 	.word	0x4002006c
 8000e24:	40020000 	.word	0x40020000

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b08b      	sub	sp, #44	; 0x2c
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e169      	b.n	8001110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 8158 	bne.w	800110a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	4a9a      	ldr	r2, [pc, #616]	; (80010c8 <HAL_GPIO_Init+0x2a0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d05e      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e64:	4a98      	ldr	r2, [pc, #608]	; (80010c8 <HAL_GPIO_Init+0x2a0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d875      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e6a:	4a98      	ldr	r2, [pc, #608]	; (80010cc <HAL_GPIO_Init+0x2a4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d058      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e70:	4a96      	ldr	r2, [pc, #600]	; (80010cc <HAL_GPIO_Init+0x2a4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d86f      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e76:	4a96      	ldr	r2, [pc, #600]	; (80010d0 <HAL_GPIO_Init+0x2a8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d052      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e7c:	4a94      	ldr	r2, [pc, #592]	; (80010d0 <HAL_GPIO_Init+0x2a8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d869      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e82:	4a94      	ldr	r2, [pc, #592]	; (80010d4 <HAL_GPIO_Init+0x2ac>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d04c      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e88:	4a92      	ldr	r2, [pc, #584]	; (80010d4 <HAL_GPIO_Init+0x2ac>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d863      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e8e:	4a92      	ldr	r2, [pc, #584]	; (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d046      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e94:	4a90      	ldr	r2, [pc, #576]	; (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d85d      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d82a      	bhi.n	8000ef4 <HAL_GPIO_Init+0xcc>
 8000e9e:	2b12      	cmp	r3, #18
 8000ea0:	d859      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <HAL_GPIO_Init+0x80>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000f23 	.word	0x08000f23
 8000eac:	08000efd 	.word	0x08000efd
 8000eb0:	08000f0f 	.word	0x08000f0f
 8000eb4:	08000f51 	.word	0x08000f51
 8000eb8:	08000f57 	.word	0x08000f57
 8000ebc:	08000f57 	.word	0x08000f57
 8000ec0:	08000f57 	.word	0x08000f57
 8000ec4:	08000f57 	.word	0x08000f57
 8000ec8:	08000f57 	.word	0x08000f57
 8000ecc:	08000f57 	.word	0x08000f57
 8000ed0:	08000f57 	.word	0x08000f57
 8000ed4:	08000f57 	.word	0x08000f57
 8000ed8:	08000f57 	.word	0x08000f57
 8000edc:	08000f57 	.word	0x08000f57
 8000ee0:	08000f57 	.word	0x08000f57
 8000ee4:	08000f57 	.word	0x08000f57
 8000ee8:	08000f57 	.word	0x08000f57
 8000eec:	08000f05 	.word	0x08000f05
 8000ef0:	08000f19 	.word	0x08000f19
 8000ef4:	4a79      	ldr	r2, [pc, #484]	; (80010dc <HAL_GPIO_Init+0x2b4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000efa:	e02c      	b.n	8000f56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	623b      	str	r3, [r7, #32]
          break;
 8000f02:	e029      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	623b      	str	r3, [r7, #32]
          break;
 8000f0c:	e024      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	3308      	adds	r3, #8
 8000f14:	623b      	str	r3, [r7, #32]
          break;
 8000f16:	e01f      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	330c      	adds	r3, #12
 8000f1e:	623b      	str	r3, [r7, #32]
          break;
 8000f20:	e01a      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	623b      	str	r3, [r7, #32]
          break;
 8000f2e:	e013      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d105      	bne.n	8000f44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	611a      	str	r2, [r3, #16]
          break;
 8000f42:	e009      	b.n	8000f58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f44:	2308      	movs	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	615a      	str	r2, [r3, #20]
          break;
 8000f4e:	e003      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
          break;
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          break;
 8000f56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2bff      	cmp	r3, #255	; 0xff
 8000f5c:	d801      	bhi.n	8000f62 <HAL_GPIO_Init+0x13a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	e001      	b.n	8000f66 <HAL_GPIO_Init+0x13e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3304      	adds	r3, #4
 8000f66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2bff      	cmp	r3, #255	; 0xff
 8000f6c:	d802      	bhi.n	8000f74 <HAL_GPIO_Init+0x14c>
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	e002      	b.n	8000f7a <HAL_GPIO_Init+0x152>
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	3b08      	subs	r3, #8
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	210f      	movs	r1, #15
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	6a39      	ldr	r1, [r7, #32]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 80b1 	beq.w	800110a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa8:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fc0:	4a48      	ldr	r2, [pc, #288]	; (80010e4 <HAL_GPIO_Init+0x2bc>)
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a40      	ldr	r2, [pc, #256]	; (80010e8 <HAL_GPIO_Init+0x2c0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d013      	beq.n	8001014 <HAL_GPIO_Init+0x1ec>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a3f      	ldr	r2, [pc, #252]	; (80010ec <HAL_GPIO_Init+0x2c4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00d      	beq.n	8001010 <HAL_GPIO_Init+0x1e8>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a3e      	ldr	r2, [pc, #248]	; (80010f0 <HAL_GPIO_Init+0x2c8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <HAL_GPIO_Init+0x1e4>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a3d      	ldr	r2, [pc, #244]	; (80010f4 <HAL_GPIO_Init+0x2cc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_GPIO_Init+0x1e0>
 8001004:	2303      	movs	r3, #3
 8001006:	e006      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001008:	2304      	movs	r3, #4
 800100a:	e004      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 800100c:	2302      	movs	r3, #2
 800100e:	e002      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001014:	2300      	movs	r3, #0
 8001016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001018:	f002 0203 	and.w	r2, r2, #3
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	4093      	lsls	r3, r2
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001026:	492f      	ldr	r1, [pc, #188]	; (80010e4 <HAL_GPIO_Init+0x2bc>)
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	492c      	ldr	r1, [pc, #176]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	600b      	str	r3, [r1, #0]
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	43db      	mvns	r3, r3
 8001056:	4928      	ldr	r1, [pc, #160]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001058:	4013      	ands	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	4922      	ldr	r1, [pc, #136]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	43db      	mvns	r3, r3
 800107e:	491e      	ldr	r1, [pc, #120]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001080:	4013      	ands	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d006      	beq.n	800109e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	4918      	ldr	r1, [pc, #96]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	608b      	str	r3, [r1, #8]
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	4914      	ldr	r1, [pc, #80]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d021      	beq.n	80010fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	490e      	ldr	r1, [pc, #56]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	60cb      	str	r3, [r1, #12]
 80010c4:	e021      	b.n	800110a <HAL_GPIO_Init+0x2e2>
 80010c6:	bf00      	nop
 80010c8:	10320000 	.word	0x10320000
 80010cc:	10310000 	.word	0x10310000
 80010d0:	10220000 	.word	0x10220000
 80010d4:	10210000 	.word	0x10210000
 80010d8:	10120000 	.word	0x10120000
 80010dc:	10110000 	.word	0x10110000
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	40010800 	.word	0x40010800
 80010ec:	40010c00 	.word	0x40010c00
 80010f0:	40011000 	.word	0x40011000
 80010f4:	40011400 	.word	0x40011400
 80010f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_GPIO_Init+0x304>)
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	43db      	mvns	r3, r3
 8001104:	4909      	ldr	r1, [pc, #36]	; (800112c <HAL_GPIO_Init+0x304>)
 8001106:	4013      	ands	r3, r2
 8001108:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	3301      	adds	r3, #1
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	fa22 f303 	lsr.w	r3, r2, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	f47f ae8e 	bne.w	8000e3c <HAL_GPIO_Init+0x14>
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	372c      	adds	r7, #44	; 0x2c
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800114c:	e003      	b.n	8001156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	041a      	lsls	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	611a      	str	r2, [r3, #16]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e272      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8087 	beq.w	800128e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001180:	4b92      	ldr	r3, [pc, #584]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 030c 	and.w	r3, r3, #12
 8001188:	2b04      	cmp	r3, #4
 800118a:	d00c      	beq.n	80011a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800118c:	4b8f      	ldr	r3, [pc, #572]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b08      	cmp	r3, #8
 8001196:	d112      	bne.n	80011be <HAL_RCC_OscConfig+0x5e>
 8001198:	4b8c      	ldr	r3, [pc, #560]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d10b      	bne.n	80011be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a6:	4b89      	ldr	r3, [pc, #548]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d06c      	beq.n	800128c <HAL_RCC_OscConfig+0x12c>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d168      	bne.n	800128c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e24c      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c6:	d106      	bne.n	80011d6 <HAL_RCC_OscConfig+0x76>
 80011c8:	4b80      	ldr	r3, [pc, #512]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a7f      	ldr	r2, [pc, #508]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e02e      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x98>
 80011de:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a7a      	ldr	r2, [pc, #488]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b78      	ldr	r3, [pc, #480]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a77      	ldr	r2, [pc, #476]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e01d      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0xbc>
 8001202:	4b72      	ldr	r3, [pc, #456]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a71      	ldr	r2, [pc, #452]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b6f      	ldr	r3, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6e      	ldr	r2, [pc, #440]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 800121c:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a6a      	ldr	r2, [pc, #424]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b68      	ldr	r3, [pc, #416]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a67      	ldr	r2, [pc, #412]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fc2c 	bl	8000a98 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fc28 	bl	8000a98 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	; 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e200      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0xe4>
 8001262:	e014      	b.n	800128e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fc18 	bl	8000a98 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fc14 	bl	8000a98 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1ec      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	4b53      	ldr	r3, [pc, #332]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x10c>
 800128a:	e000      	b.n	800128e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d063      	beq.n	8001362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800129a:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012a6:	4b49      	ldr	r3, [pc, #292]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d11c      	bne.n	80012ec <HAL_RCC_OscConfig+0x18c>
 80012b2:	4b46      	ldr	r3, [pc, #280]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d116      	bne.n	80012ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	4b43      	ldr	r3, [pc, #268]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_RCC_OscConfig+0x176>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e1c0      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4939      	ldr	r1, [pc, #228]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	e03a      	b.n	8001362 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d020      	beq.n	8001336 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f4:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <HAL_RCC_OscConfig+0x270>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fbcd 	bl	8000a98 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff fbc9 	bl	8000a98 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e1a1      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4927      	ldr	r1, [pc, #156]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
 8001334:	e015      	b.n	8001362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_RCC_OscConfig+0x270>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fbac 	bl	8000a98 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fba8 	bl	8000a98 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e180      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d03a      	beq.n	80013e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d019      	beq.n	80013aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_RCC_OscConfig+0x274>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fb8c 	bl	8000a98 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fb88 	bl	8000a98 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e160      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f000 fad8 	bl	8001958 <RCC_Delay>
 80013a8:	e01c      	b.n	80013e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_RCC_OscConfig+0x274>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b0:	f7ff fb72 	bl	8000a98 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b6:	e00f      	b.n	80013d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fb6e 	bl	8000a98 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d908      	bls.n	80013d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e146      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	42420000 	.word	0x42420000
 80013d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b92      	ldr	r3, [pc, #584]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e9      	bne.n	80013b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a6 	beq.w	800153e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10d      	bne.n	800141e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a87      	ldr	r2, [pc, #540]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b85      	ldr	r3, [pc, #532]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141e:	4b82      	ldr	r3, [pc, #520]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001426:	2b00      	cmp	r3, #0
 8001428:	d118      	bne.n	800145c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142a:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a7e      	ldr	r2, [pc, #504]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001436:	f7ff fb2f 	bl	8000a98 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143e:	f7ff fb2b 	bl	8000a98 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b64      	cmp	r3, #100	; 0x64
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e103      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	4b75      	ldr	r3, [pc, #468]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x312>
 8001464:	4b6f      	ldr	r3, [pc, #444]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a6e      	ldr	r2, [pc, #440]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	e02d      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x334>
 800147a:	4b6a      	ldr	r3, [pc, #424]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a69      	ldr	r2, [pc, #420]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6213      	str	r3, [r2, #32]
 8001486:	4b67      	ldr	r3, [pc, #412]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a66      	ldr	r2, [pc, #408]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6213      	str	r3, [r2, #32]
 8001492:	e01c      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b05      	cmp	r3, #5
 800149a:	d10c      	bne.n	80014b6 <HAL_RCC_OscConfig+0x356>
 800149c:	4b61      	ldr	r3, [pc, #388]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4a60      	ldr	r2, [pc, #384]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6213      	str	r3, [r2, #32]
 80014a8:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a5d      	ldr	r2, [pc, #372]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	e00b      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 80014b6:	4b5b      	ldr	r3, [pc, #364]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a5a      	ldr	r2, [pc, #360]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6213      	str	r3, [r2, #32]
 80014c2:	4b58      	ldr	r3, [pc, #352]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a57      	ldr	r2, [pc, #348]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	f023 0304 	bic.w	r3, r3, #4
 80014cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d015      	beq.n	8001502 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fadf 	bl	8000a98 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff fadb 	bl	8000a98 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0b1      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	4b4b      	ldr	r3, [pc, #300]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0ee      	beq.n	80014de <HAL_RCC_OscConfig+0x37e>
 8001500:	e014      	b.n	800152c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fac9 	bl	8000a98 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fac5 	bl	8000a98 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e09b      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001520:	4b40      	ldr	r3, [pc, #256]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ee      	bne.n	800150a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d105      	bne.n	800153e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001532:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a3b      	ldr	r2, [pc, #236]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8087 	beq.w	8001656 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001548:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b08      	cmp	r3, #8
 8001552:	d061      	beq.n	8001618 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d146      	bne.n	80015ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff fa99 	bl	8000a98 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff fa95 	bl	8000a98 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e06d      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001590:	d108      	bne.n	80015a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4921      	ldr	r1, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a19      	ldr	r1, [r3, #32]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	430b      	orrs	r3, r1
 80015b6:	491b      	ldr	r1, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fa69 	bl	8000a98 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff fa65 	bl	8000a98 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e03d      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x46a>
 80015e8:	e035      	b.n	8001656 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fa52 	bl	8000a98 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fa4e 	bl	8000a98 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e026      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x498>
 8001616:	e01e      	b.n	8001656 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d107      	bne.n	8001630 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e019      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
 8001624:	40021000 	.word	0x40021000
 8001628:	40007000 	.word	0x40007000
 800162c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_RCC_OscConfig+0x500>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	429a      	cmp	r2, r3
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d001      	beq.n	8001656 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0d0      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d910      	bls.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 0207 	bic.w	r2, r3, #7
 800168e:	4965      	ldr	r1, [pc, #404]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0b8      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	494d      	ldr	r1, [pc, #308]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d040      	beq.n	8001784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d115      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e07f      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e073      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06b      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f023 0203 	bic.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4936      	ldr	r1, [pc, #216]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff f9a0 	bl	8000a98 <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	e00a      	b.n	8001772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff f99c 	bl	8000a98 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e053      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 020c 	and.w	r2, r3, #12
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1eb      	bne.n	800175c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d210      	bcs.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 0207 	bic.w	r2, r3, #7
 800179a:	4922      	ldr	r1, [pc, #136]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e032      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	490e      	ldr	r1, [pc, #56]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f2:	f000 f821 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80017f6:	4602      	mov	r2, r0
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	490a      	ldr	r1, [pc, #40]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	5ccb      	ldrb	r3, [r1, r3]
 8001806:	fa22 f303 	lsr.w	r3, r2, r3
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1cc>)
 800180c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1d0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f8fe 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000
 8001828:	40021000 	.word	0x40021000
 800182c:	080036cc 	.word	0x080036cc
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	b490      	push	{r4, r7}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800183e:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001840:	1d3c      	adds	r4, r7, #4
 8001842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001848:	f240 2301 	movw	r3, #513	; 0x201
 800184c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d002      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x40>
 8001872:	2b08      	cmp	r3, #8
 8001874:	d003      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x46>
 8001876:	e02b      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800187a:	623b      	str	r3, [r7, #32]
      break;
 800187c:	e02b      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3328      	adds	r3, #40	; 0x28
 8001888:	443b      	add	r3, r7
 800188a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800188e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d012      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	0c5b      	lsrs	r3, r3, #17
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	3328      	adds	r3, #40	; 0x28
 80018a6:	443b      	add	r3, r7
 80018a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80018b2:	fb03 f202 	mul.w	r2, r3, r2
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	e004      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	623b      	str	r3, [r7, #32]
      break;
 80018ce:	e002      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80018d2:	623b      	str	r3, [r7, #32]
      break;
 80018d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d6:	6a3b      	ldr	r3, [r7, #32]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc90      	pop	{r4, r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	080036bc 	.word	0x080036bc
 80018e8:	40021000 	.word	0x40021000
 80018ec:	007a1200 	.word	0x007a1200
 80018f0:	003d0900 	.word	0x003d0900

080018f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f8:	4b02      	ldr	r3, [pc, #8]	; (8001904 <HAL_RCC_GetHCLKFreq+0x10>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000000 	.word	0x20000000

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800190c:	f7ff fff2 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4903      	ldr	r1, [pc, #12]	; (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	080036dc 	.word	0x080036dc

08001930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001934:	f7ff ffde 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	0adb      	lsrs	r3, r3, #11
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	; (8001954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000
 8001954:	080036dc 	.word	0x080036dc

08001958 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <RCC_Delay+0x34>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <RCC_Delay+0x38>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0a5b      	lsrs	r3, r3, #9
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001974:	bf00      	nop
  }
  while (Delay --);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1e5a      	subs	r2, r3, #1
 800197a:	60fa      	str	r2, [r7, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f9      	bne.n	8001974 <RCC_Delay+0x1c>
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	20000000 	.word	0x20000000
 8001990:	10624dd3 	.word	0x10624dd3

08001994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e03f      	b.n	8001a26 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7fe ff9c 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2224      	movs	r2, #36	; 0x24
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fc85 	bl	80022e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b08a      	sub	sp, #40	; 0x28
 8001a32:	af02      	add	r7, sp, #8
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d17c      	bne.n	8001b48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <HAL_UART_Transmit+0x2c>
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e075      	b.n	8001b4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_UART_Transmit+0x3e>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e06e      	b.n	8001b4a <HAL_UART_Transmit+0x11c>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2221      	movs	r2, #33	; 0x21
 8001a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a82:	f7ff f809 	bl	8000a98 <HAL_GetTick>
 8001a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	88fa      	ldrh	r2, [r7, #6]
 8001a8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	88fa      	ldrh	r2, [r7, #6]
 8001a92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a9c:	d108      	bne.n	8001ab0 <HAL_UART_Transmit+0x82>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d104      	bne.n	8001ab0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	e003      	b.n	8001ab8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ac0:	e02a      	b.n	8001b18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 fa38 	bl	8001f42 <UART_WaitOnFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e036      	b.n	8001b4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10b      	bne.n	8001afa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001af0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	3302      	adds	r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	e007      	b.n	8001b0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	3301      	adds	r3, #1
 8001b08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1cf      	bne.n	8001ac2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2140      	movs	r1, #64	; 0x40
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 fa08 	bl	8001f42 <UART_WaitOnFlagUntilTimeout>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e006      	b.n	8001b4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e000      	b.n	8001b4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b48:	2302      	movs	r3, #2
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d11d      	bne.n	8001ba8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <HAL_UART_Receive_IT+0x26>
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e016      	b.n	8001baa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_UART_Receive_IT+0x38>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e00f      	b.n	8001baa <HAL_UART_Receive_IT+0x58>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fa19 	bl	8001fd6 <UART_Start_Receive_IT>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	e000      	b.n	8001baa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001ba8:	2302      	movs	r3, #2
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10d      	bne.n	8001c06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_UART_IRQHandler+0x52>
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fac9 	bl	8002196 <UART_Receive_IT>
      return;
 8001c04:	e17b      	b.n	8001efe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80b1 	beq.w	8001d70 <HAL_UART_IRQHandler+0x1bc>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d105      	bne.n	8001c24 <HAL_UART_IRQHandler+0x70>
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80a6 	beq.w	8001d70 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00a      	beq.n	8001c44 <HAL_UART_IRQHandler+0x90>
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00a      	beq.n	8001c64 <HAL_UART_IRQHandler+0xb0>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f043 0202 	orr.w	r2, r3, #2
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <HAL_UART_IRQHandler+0xd0>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f043 0204 	orr.w	r2, r3, #4
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00f      	beq.n	8001cae <HAL_UART_IRQHandler+0xfa>
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d104      	bne.n	8001ca2 <HAL_UART_IRQHandler+0xee>
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f043 0208 	orr.w	r2, r3, #8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 811e 	beq.w	8001ef4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_UART_IRQHandler+0x11e>
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fa62 	bl	8002196 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf14      	ite	ne
 8001ce0:	2301      	movne	r3, #1
 8001ce2:	2300      	moveq	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d102      	bne.n	8001cfa <HAL_UART_IRQHandler+0x146>
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d031      	beq.n	8001d5e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f9a4 	bl	8002048 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d023      	beq.n	8001d56 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d1c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d013      	beq.n	8001d4e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	4a76      	ldr	r2, [pc, #472]	; (8001f04 <HAL_UART_IRQHandler+0x350>)
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f802 	bl	8000d3c <HAL_DMA_Abort_IT>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d016      	beq.n	8001d6c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d4c:	e00e      	b.n	8001d6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8e3 	bl	8001f1a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d54:	e00a      	b.n	8001d6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8df 	bl	8001f1a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d5c:	e006      	b.n	8001d6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8db 	bl	8001f1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001d6a:	e0c3      	b.n	8001ef4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d6c:	bf00      	nop
    return;
 8001d6e:	e0c1      	b.n	8001ef4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	f040 80a1 	bne.w	8001ebc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 809b 	beq.w	8001ebc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8095 	beq.w	8001ebc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d04e      	beq.n	8001e54 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001dc0:	8a3b      	ldrh	r3, [r7, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8098 	beq.w	8001ef8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001dcc:	8a3a      	ldrh	r2, [r7, #16]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	f080 8092 	bcs.w	8001ef8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	8a3a      	ldrh	r2, [r7, #16]
 8001dd8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d02b      	beq.n	8001e3c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e12:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2220      	movs	r2, #32
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0210 	bic.w	r2, r2, #16
 8001e30:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe ff45 	bl	8000cc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f86d 	bl	8001f2c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001e52:	e051      	b.n	8001ef8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d047      	beq.n	8001efc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001e6c:	8a7b      	ldrh	r3, [r7, #18]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d044      	beq.n	8001efc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e80:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0210 	bic.w	r2, r2, #16
 8001eae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001eb0:	8a7b      	ldrh	r3, [r7, #18]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f839 	bl	8001f2c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001eba:	e01f      	b.n	8001efc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <HAL_UART_IRQHandler+0x324>
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f8f9 	bl	80020c8 <UART_Transmit_IT>
    return;
 8001ed6:	e012      	b.n	8001efe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00d      	beq.n	8001efe <HAL_UART_IRQHandler+0x34a>
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f93a 	bl	8002166 <UART_EndTransmit_IT>
    return;
 8001ef2:	e004      	b.n	8001efe <HAL_UART_IRQHandler+0x34a>
    return;
 8001ef4:	bf00      	nop
 8001ef6:	e002      	b.n	8001efe <HAL_UART_IRQHandler+0x34a>
      return;
 8001ef8:	bf00      	nop
 8001efa:	e000      	b.n	8001efe <HAL_UART_IRQHandler+0x34a>
      return;
 8001efc:	bf00      	nop
  }
}
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	080020a1 	.word	0x080020a1

08001f08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr

08001f1a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f52:	e02c      	b.n	8001fae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f5a:	d028      	beq.n	8001fae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f62:	f7fe fd99 	bl	8000a98 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d21d      	bcs.n	8001fae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f80:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e00f      	b.n	8001fce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	bf0c      	ite	eq
 8001fbe:	2301      	moveq	r3, #1
 8001fc0:	2300      	movne	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d0c3      	beq.n	8001f54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	88fa      	ldrh	r2, [r7, #6]
 8001fee:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	88fa      	ldrh	r2, [r7, #6]
 8001ff4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2222      	movs	r2, #34	; 0x22
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800201a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0220 	orr.w	r2, r2, #32
 800203a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800205e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	2b01      	cmp	r3, #1
 8002076:	d107      	bne.n	8002088 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0210 	bic.w	r2, r2, #16
 8002086:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7ff ff2d 	bl	8001f1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b21      	cmp	r3, #33	; 0x21
 80020da:	d13e      	bne.n	800215a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e4:	d114      	bne.n	8002110 <UART_Transmit_IT+0x48>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d110      	bne.n	8002110 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002102:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	1c9a      	adds	r2, r3, #2
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	621a      	str	r2, [r3, #32]
 800210e:	e008      	b.n	8002122 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	1c59      	adds	r1, r3, #1
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6211      	str	r1, [r2, #32]
 800211a:	781a      	ldrb	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29b      	uxth	r3, r3
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4619      	mov	r1, r3
 8002130:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002144:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002154:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800215a:	2302      	movs	r3, #2
  }
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800217c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2220      	movs	r2, #32
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff febe 	bl	8001f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b22      	cmp	r3, #34	; 0x22
 80021a8:	f040 8099 	bne.w	80022de <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b4:	d117      	bne.n	80021e6 <UART_Receive_IT+0x50>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d113      	bne.n	80021e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	1c9a      	adds	r2, r3, #2
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
 80021e4:	e026      	b.n	8002234 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f8:	d007      	beq.n	800220a <UART_Receive_IT+0x74>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10a      	bne.n	8002218 <UART_Receive_IT+0x82>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	701a      	strb	r2, [r3, #0]
 8002216:	e008      	b.n	800222a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002224:	b2da      	uxtb	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29b      	uxth	r3, r3
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	4619      	mov	r1, r3
 8002242:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002244:	2b00      	cmp	r3, #0
 8002246:	d148      	bne.n	80022da <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0220 	bic.w	r2, r2, #32
 8002256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002266:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	2b01      	cmp	r3, #1
 8002286:	d123      	bne.n	80022d0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0210 	bic.w	r2, r2, #16
 800229c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b10      	cmp	r3, #16
 80022aa:	d10a      	bne.n	80022c2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff fe2f 	bl	8001f2c <HAL_UARTEx_RxEventCallback>
 80022ce:	e002      	b.n	80022d6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7fe f8dd 	bl	8000490 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e002      	b.n	80022e0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e000      	b.n	80022e0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80022de:	2302      	movs	r3, #2
  }
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	4313      	orrs	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002322:	f023 030c 	bic.w	r3, r3, #12
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	430b      	orrs	r3, r1
 800232e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a2c      	ldr	r2, [pc, #176]	; (80023fc <UART_SetConfig+0x114>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d103      	bne.n	8002358 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002350:	f7ff faee 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	e002      	b.n	800235e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002358:	f7ff fad6 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 800235c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	009a      	lsls	r2, r3, #2
 8002368:	441a      	add	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	4a22      	ldr	r2, [pc, #136]	; (8002400 <UART_SetConfig+0x118>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	0119      	lsls	r1, r3, #4
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	009a      	lsls	r2, r3, #2
 8002388:	441a      	add	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	fbb2 f2f3 	udiv	r2, r2, r3
 8002394:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <UART_SetConfig+0x118>)
 8002396:	fba3 0302 	umull	r0, r3, r3, r2
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2064      	movs	r0, #100	; 0x64
 800239e:	fb00 f303 	mul.w	r3, r0, r3
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	3332      	adds	r3, #50	; 0x32
 80023a8:	4a15      	ldr	r2, [pc, #84]	; (8002400 <UART_SetConfig+0x118>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b4:	4419      	add	r1, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	009a      	lsls	r2, r3, #2
 80023c0:	441a      	add	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <UART_SetConfig+0x118>)
 80023ce:	fba3 0302 	umull	r0, r3, r3, r2
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2064      	movs	r0, #100	; 0x64
 80023d6:	fb00 f303 	mul.w	r3, r0, r3
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	3332      	adds	r3, #50	; 0x32
 80023e0:	4a07      	ldr	r2, [pc, #28]	; (8002400 <UART_SetConfig+0x118>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	f003 020f 	and.w	r2, r3, #15
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	440a      	add	r2, r1
 80023f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40013800 	.word	0x40013800
 8002400:	51eb851f 	.word	0x51eb851f

08002404 <atoi>:
 8002404:	220a      	movs	r2, #10
 8002406:	2100      	movs	r1, #0
 8002408:	f000 ba22 	b.w	8002850 <strtol>

0800240c <calloc>:
 800240c:	4b02      	ldr	r3, [pc, #8]	; (8002418 <calloc+0xc>)
 800240e:	460a      	mov	r2, r1
 8002410:	4601      	mov	r1, r0
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	f000 b844 	b.w	80024a0 <_calloc_r>
 8002418:	2000000c 	.word	0x2000000c

0800241c <__errno>:
 800241c:	4b01      	ldr	r3, [pc, #4]	; (8002424 <__errno+0x8>)
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	2000000c 	.word	0x2000000c

08002428 <__libc_init_array>:
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	2600      	movs	r6, #0
 800242c:	4d0c      	ldr	r5, [pc, #48]	; (8002460 <__libc_init_array+0x38>)
 800242e:	4c0d      	ldr	r4, [pc, #52]	; (8002464 <__libc_init_array+0x3c>)
 8002430:	1b64      	subs	r4, r4, r5
 8002432:	10a4      	asrs	r4, r4, #2
 8002434:	42a6      	cmp	r6, r4
 8002436:	d109      	bne.n	800244c <__libc_init_array+0x24>
 8002438:	f001 f920 	bl	800367c <_init>
 800243c:	2600      	movs	r6, #0
 800243e:	4d0a      	ldr	r5, [pc, #40]	; (8002468 <__libc_init_array+0x40>)
 8002440:	4c0a      	ldr	r4, [pc, #40]	; (800246c <__libc_init_array+0x44>)
 8002442:	1b64      	subs	r4, r4, r5
 8002444:	10a4      	asrs	r4, r4, #2
 8002446:	42a6      	cmp	r6, r4
 8002448:	d105      	bne.n	8002456 <__libc_init_array+0x2e>
 800244a:	bd70      	pop	{r4, r5, r6, pc}
 800244c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002450:	4798      	blx	r3
 8002452:	3601      	adds	r6, #1
 8002454:	e7ee      	b.n	8002434 <__libc_init_array+0xc>
 8002456:	f855 3b04 	ldr.w	r3, [r5], #4
 800245a:	4798      	blx	r3
 800245c:	3601      	adds	r6, #1
 800245e:	e7f2      	b.n	8002446 <__libc_init_array+0x1e>
 8002460:	0800392c 	.word	0x0800392c
 8002464:	0800392c 	.word	0x0800392c
 8002468:	0800392c 	.word	0x0800392c
 800246c:	08003930 	.word	0x08003930

08002470 <malloc>:
 8002470:	4b02      	ldr	r3, [pc, #8]	; (800247c <malloc+0xc>)
 8002472:	4601      	mov	r1, r0
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	f000 b88f 	b.w	8002598 <_malloc_r>
 800247a:	bf00      	nop
 800247c:	2000000c 	.word	0x2000000c

08002480 <free>:
 8002480:	4b02      	ldr	r3, [pc, #8]	; (800248c <free+0xc>)
 8002482:	4601      	mov	r1, r0
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	f000 b81f 	b.w	80024c8 <_free_r>
 800248a:	bf00      	nop
 800248c:	2000000c 	.word	0x2000000c

08002490 <memset>:
 8002490:	4603      	mov	r3, r0
 8002492:	4402      	add	r2, r0
 8002494:	4293      	cmp	r3, r2
 8002496:	d100      	bne.n	800249a <memset+0xa>
 8002498:	4770      	bx	lr
 800249a:	f803 1b01 	strb.w	r1, [r3], #1
 800249e:	e7f9      	b.n	8002494 <memset+0x4>

080024a0 <_calloc_r>:
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	fba1 5402 	umull	r5, r4, r1, r2
 80024a6:	b934      	cbnz	r4, 80024b6 <_calloc_r+0x16>
 80024a8:	4629      	mov	r1, r5
 80024aa:	f000 f875 	bl	8002598 <_malloc_r>
 80024ae:	4606      	mov	r6, r0
 80024b0:	b928      	cbnz	r0, 80024be <_calloc_r+0x1e>
 80024b2:	4630      	mov	r0, r6
 80024b4:	bd70      	pop	{r4, r5, r6, pc}
 80024b6:	220c      	movs	r2, #12
 80024b8:	2600      	movs	r6, #0
 80024ba:	6002      	str	r2, [r0, #0]
 80024bc:	e7f9      	b.n	80024b2 <_calloc_r+0x12>
 80024be:	462a      	mov	r2, r5
 80024c0:	4621      	mov	r1, r4
 80024c2:	f7ff ffe5 	bl	8002490 <memset>
 80024c6:	e7f4      	b.n	80024b2 <_calloc_r+0x12>

080024c8 <_free_r>:
 80024c8:	b538      	push	{r3, r4, r5, lr}
 80024ca:	4605      	mov	r5, r0
 80024cc:	2900      	cmp	r1, #0
 80024ce:	d040      	beq.n	8002552 <_free_r+0x8a>
 80024d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024d4:	1f0c      	subs	r4, r1, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bfb8      	it	lt
 80024da:	18e4      	addlt	r4, r4, r3
 80024dc:	f000 f9f2 	bl	80028c4 <__malloc_lock>
 80024e0:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <_free_r+0x8c>)
 80024e2:	6813      	ldr	r3, [r2, #0]
 80024e4:	b933      	cbnz	r3, 80024f4 <_free_r+0x2c>
 80024e6:	6063      	str	r3, [r4, #4]
 80024e8:	6014      	str	r4, [r2, #0]
 80024ea:	4628      	mov	r0, r5
 80024ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024f0:	f000 b9ee 	b.w	80028d0 <__malloc_unlock>
 80024f4:	42a3      	cmp	r3, r4
 80024f6:	d908      	bls.n	800250a <_free_r+0x42>
 80024f8:	6820      	ldr	r0, [r4, #0]
 80024fa:	1821      	adds	r1, r4, r0
 80024fc:	428b      	cmp	r3, r1
 80024fe:	bf01      	itttt	eq
 8002500:	6819      	ldreq	r1, [r3, #0]
 8002502:	685b      	ldreq	r3, [r3, #4]
 8002504:	1809      	addeq	r1, r1, r0
 8002506:	6021      	streq	r1, [r4, #0]
 8002508:	e7ed      	b.n	80024e6 <_free_r+0x1e>
 800250a:	461a      	mov	r2, r3
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	b10b      	cbz	r3, 8002514 <_free_r+0x4c>
 8002510:	42a3      	cmp	r3, r4
 8002512:	d9fa      	bls.n	800250a <_free_r+0x42>
 8002514:	6811      	ldr	r1, [r2, #0]
 8002516:	1850      	adds	r0, r2, r1
 8002518:	42a0      	cmp	r0, r4
 800251a:	d10b      	bne.n	8002534 <_free_r+0x6c>
 800251c:	6820      	ldr	r0, [r4, #0]
 800251e:	4401      	add	r1, r0
 8002520:	1850      	adds	r0, r2, r1
 8002522:	4283      	cmp	r3, r0
 8002524:	6011      	str	r1, [r2, #0]
 8002526:	d1e0      	bne.n	80024ea <_free_r+0x22>
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4401      	add	r1, r0
 800252e:	6011      	str	r1, [r2, #0]
 8002530:	6053      	str	r3, [r2, #4]
 8002532:	e7da      	b.n	80024ea <_free_r+0x22>
 8002534:	d902      	bls.n	800253c <_free_r+0x74>
 8002536:	230c      	movs	r3, #12
 8002538:	602b      	str	r3, [r5, #0]
 800253a:	e7d6      	b.n	80024ea <_free_r+0x22>
 800253c:	6820      	ldr	r0, [r4, #0]
 800253e:	1821      	adds	r1, r4, r0
 8002540:	428b      	cmp	r3, r1
 8002542:	bf01      	itttt	eq
 8002544:	6819      	ldreq	r1, [r3, #0]
 8002546:	685b      	ldreq	r3, [r3, #4]
 8002548:	1809      	addeq	r1, r1, r0
 800254a:	6021      	streq	r1, [r4, #0]
 800254c:	6063      	str	r3, [r4, #4]
 800254e:	6054      	str	r4, [r2, #4]
 8002550:	e7cb      	b.n	80024ea <_free_r+0x22>
 8002552:	bd38      	pop	{r3, r4, r5, pc}
 8002554:	20000140 	.word	0x20000140

08002558 <sbrk_aligned>:
 8002558:	b570      	push	{r4, r5, r6, lr}
 800255a:	4e0e      	ldr	r6, [pc, #56]	; (8002594 <sbrk_aligned+0x3c>)
 800255c:	460c      	mov	r4, r1
 800255e:	6831      	ldr	r1, [r6, #0]
 8002560:	4605      	mov	r5, r0
 8002562:	b911      	cbnz	r1, 800256a <sbrk_aligned+0x12>
 8002564:	f000 f88c 	bl	8002680 <_sbrk_r>
 8002568:	6030      	str	r0, [r6, #0]
 800256a:	4621      	mov	r1, r4
 800256c:	4628      	mov	r0, r5
 800256e:	f000 f887 	bl	8002680 <_sbrk_r>
 8002572:	1c43      	adds	r3, r0, #1
 8002574:	d00a      	beq.n	800258c <sbrk_aligned+0x34>
 8002576:	1cc4      	adds	r4, r0, #3
 8002578:	f024 0403 	bic.w	r4, r4, #3
 800257c:	42a0      	cmp	r0, r4
 800257e:	d007      	beq.n	8002590 <sbrk_aligned+0x38>
 8002580:	1a21      	subs	r1, r4, r0
 8002582:	4628      	mov	r0, r5
 8002584:	f000 f87c 	bl	8002680 <_sbrk_r>
 8002588:	3001      	adds	r0, #1
 800258a:	d101      	bne.n	8002590 <sbrk_aligned+0x38>
 800258c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002590:	4620      	mov	r0, r4
 8002592:	bd70      	pop	{r4, r5, r6, pc}
 8002594:	20000144 	.word	0x20000144

08002598 <_malloc_r>:
 8002598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800259c:	1ccd      	adds	r5, r1, #3
 800259e:	f025 0503 	bic.w	r5, r5, #3
 80025a2:	3508      	adds	r5, #8
 80025a4:	2d0c      	cmp	r5, #12
 80025a6:	bf38      	it	cc
 80025a8:	250c      	movcc	r5, #12
 80025aa:	2d00      	cmp	r5, #0
 80025ac:	4607      	mov	r7, r0
 80025ae:	db01      	blt.n	80025b4 <_malloc_r+0x1c>
 80025b0:	42a9      	cmp	r1, r5
 80025b2:	d905      	bls.n	80025c0 <_malloc_r+0x28>
 80025b4:	230c      	movs	r3, #12
 80025b6:	2600      	movs	r6, #0
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	4630      	mov	r0, r6
 80025bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025c0:	4e2e      	ldr	r6, [pc, #184]	; (800267c <_malloc_r+0xe4>)
 80025c2:	f000 f97f 	bl	80028c4 <__malloc_lock>
 80025c6:	6833      	ldr	r3, [r6, #0]
 80025c8:	461c      	mov	r4, r3
 80025ca:	bb34      	cbnz	r4, 800261a <_malloc_r+0x82>
 80025cc:	4629      	mov	r1, r5
 80025ce:	4638      	mov	r0, r7
 80025d0:	f7ff ffc2 	bl	8002558 <sbrk_aligned>
 80025d4:	1c43      	adds	r3, r0, #1
 80025d6:	4604      	mov	r4, r0
 80025d8:	d14d      	bne.n	8002676 <_malloc_r+0xde>
 80025da:	6834      	ldr	r4, [r6, #0]
 80025dc:	4626      	mov	r6, r4
 80025de:	2e00      	cmp	r6, #0
 80025e0:	d140      	bne.n	8002664 <_malloc_r+0xcc>
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	4631      	mov	r1, r6
 80025e6:	4638      	mov	r0, r7
 80025e8:	eb04 0803 	add.w	r8, r4, r3
 80025ec:	f000 f848 	bl	8002680 <_sbrk_r>
 80025f0:	4580      	cmp	r8, r0
 80025f2:	d13a      	bne.n	800266a <_malloc_r+0xd2>
 80025f4:	6821      	ldr	r1, [r4, #0]
 80025f6:	3503      	adds	r5, #3
 80025f8:	1a6d      	subs	r5, r5, r1
 80025fa:	f025 0503 	bic.w	r5, r5, #3
 80025fe:	3508      	adds	r5, #8
 8002600:	2d0c      	cmp	r5, #12
 8002602:	bf38      	it	cc
 8002604:	250c      	movcc	r5, #12
 8002606:	4638      	mov	r0, r7
 8002608:	4629      	mov	r1, r5
 800260a:	f7ff ffa5 	bl	8002558 <sbrk_aligned>
 800260e:	3001      	adds	r0, #1
 8002610:	d02b      	beq.n	800266a <_malloc_r+0xd2>
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	442b      	add	r3, r5
 8002616:	6023      	str	r3, [r4, #0]
 8002618:	e00e      	b.n	8002638 <_malloc_r+0xa0>
 800261a:	6822      	ldr	r2, [r4, #0]
 800261c:	1b52      	subs	r2, r2, r5
 800261e:	d41e      	bmi.n	800265e <_malloc_r+0xc6>
 8002620:	2a0b      	cmp	r2, #11
 8002622:	d916      	bls.n	8002652 <_malloc_r+0xba>
 8002624:	1961      	adds	r1, r4, r5
 8002626:	42a3      	cmp	r3, r4
 8002628:	6025      	str	r5, [r4, #0]
 800262a:	bf18      	it	ne
 800262c:	6059      	strne	r1, [r3, #4]
 800262e:	6863      	ldr	r3, [r4, #4]
 8002630:	bf08      	it	eq
 8002632:	6031      	streq	r1, [r6, #0]
 8002634:	5162      	str	r2, [r4, r5]
 8002636:	604b      	str	r3, [r1, #4]
 8002638:	4638      	mov	r0, r7
 800263a:	f104 060b 	add.w	r6, r4, #11
 800263e:	f000 f947 	bl	80028d0 <__malloc_unlock>
 8002642:	f026 0607 	bic.w	r6, r6, #7
 8002646:	1d23      	adds	r3, r4, #4
 8002648:	1af2      	subs	r2, r6, r3
 800264a:	d0b6      	beq.n	80025ba <_malloc_r+0x22>
 800264c:	1b9b      	subs	r3, r3, r6
 800264e:	50a3      	str	r3, [r4, r2]
 8002650:	e7b3      	b.n	80025ba <_malloc_r+0x22>
 8002652:	6862      	ldr	r2, [r4, #4]
 8002654:	42a3      	cmp	r3, r4
 8002656:	bf0c      	ite	eq
 8002658:	6032      	streq	r2, [r6, #0]
 800265a:	605a      	strne	r2, [r3, #4]
 800265c:	e7ec      	b.n	8002638 <_malloc_r+0xa0>
 800265e:	4623      	mov	r3, r4
 8002660:	6864      	ldr	r4, [r4, #4]
 8002662:	e7b2      	b.n	80025ca <_malloc_r+0x32>
 8002664:	4634      	mov	r4, r6
 8002666:	6876      	ldr	r6, [r6, #4]
 8002668:	e7b9      	b.n	80025de <_malloc_r+0x46>
 800266a:	230c      	movs	r3, #12
 800266c:	4638      	mov	r0, r7
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	f000 f92e 	bl	80028d0 <__malloc_unlock>
 8002674:	e7a1      	b.n	80025ba <_malloc_r+0x22>
 8002676:	6025      	str	r5, [r4, #0]
 8002678:	e7de      	b.n	8002638 <_malloc_r+0xa0>
 800267a:	bf00      	nop
 800267c:	20000140 	.word	0x20000140

08002680 <_sbrk_r>:
 8002680:	b538      	push	{r3, r4, r5, lr}
 8002682:	2300      	movs	r3, #0
 8002684:	4d05      	ldr	r5, [pc, #20]	; (800269c <_sbrk_r+0x1c>)
 8002686:	4604      	mov	r4, r0
 8002688:	4608      	mov	r0, r1
 800268a:	602b      	str	r3, [r5, #0]
 800268c:	f7fe f8ce 	bl	800082c <_sbrk>
 8002690:	1c43      	adds	r3, r0, #1
 8002692:	d102      	bne.n	800269a <_sbrk_r+0x1a>
 8002694:	682b      	ldr	r3, [r5, #0]
 8002696:	b103      	cbz	r3, 800269a <_sbrk_r+0x1a>
 8002698:	6023      	str	r3, [r4, #0]
 800269a:	bd38      	pop	{r3, r4, r5, pc}
 800269c:	20000148 	.word	0x20000148

080026a0 <strtok>:
 80026a0:	4b16      	ldr	r3, [pc, #88]	; (80026fc <strtok+0x5c>)
 80026a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a6:	681f      	ldr	r7, [r3, #0]
 80026a8:	4605      	mov	r5, r0
 80026aa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80026ac:	460e      	mov	r6, r1
 80026ae:	b9ec      	cbnz	r4, 80026ec <strtok+0x4c>
 80026b0:	2050      	movs	r0, #80	; 0x50
 80026b2:	f7ff fedd 	bl	8002470 <malloc>
 80026b6:	4602      	mov	r2, r0
 80026b8:	65b8      	str	r0, [r7, #88]	; 0x58
 80026ba:	b920      	cbnz	r0, 80026c6 <strtok+0x26>
 80026bc:	2157      	movs	r1, #87	; 0x57
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <strtok+0x60>)
 80026c0:	4810      	ldr	r0, [pc, #64]	; (8002704 <strtok+0x64>)
 80026c2:	f000 f8cf 	bl	8002864 <__assert_func>
 80026c6:	e9c0 4400 	strd	r4, r4, [r0]
 80026ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80026ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80026d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80026d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80026da:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80026de:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80026e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80026e6:	6184      	str	r4, [r0, #24]
 80026e8:	7704      	strb	r4, [r0, #28]
 80026ea:	6244      	str	r4, [r0, #36]	; 0x24
 80026ec:	4631      	mov	r1, r6
 80026ee:	4628      	mov	r0, r5
 80026f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026f2:	2301      	movs	r3, #1
 80026f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026f8:	f000 b806 	b.w	8002708 <__strtok_r>
 80026fc:	2000000c 	.word	0x2000000c
 8002700:	080036e8 	.word	0x080036e8
 8002704:	080036ff 	.word	0x080036ff

08002708 <__strtok_r>:
 8002708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800270a:	b908      	cbnz	r0, 8002710 <__strtok_r+0x8>
 800270c:	6810      	ldr	r0, [r2, #0]
 800270e:	b188      	cbz	r0, 8002734 <__strtok_r+0x2c>
 8002710:	4604      	mov	r4, r0
 8002712:	460f      	mov	r7, r1
 8002714:	4620      	mov	r0, r4
 8002716:	f814 5b01 	ldrb.w	r5, [r4], #1
 800271a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800271e:	b91e      	cbnz	r6, 8002728 <__strtok_r+0x20>
 8002720:	b965      	cbnz	r5, 800273c <__strtok_r+0x34>
 8002722:	4628      	mov	r0, r5
 8002724:	6015      	str	r5, [r2, #0]
 8002726:	e005      	b.n	8002734 <__strtok_r+0x2c>
 8002728:	42b5      	cmp	r5, r6
 800272a:	d1f6      	bne.n	800271a <__strtok_r+0x12>
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <__strtok_r+0xa>
 8002730:	6014      	str	r4, [r2, #0]
 8002732:	7003      	strb	r3, [r0, #0]
 8002734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002736:	461c      	mov	r4, r3
 8002738:	e00c      	b.n	8002754 <__strtok_r+0x4c>
 800273a:	b915      	cbnz	r5, 8002742 <__strtok_r+0x3a>
 800273c:	460e      	mov	r6, r1
 800273e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002742:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002746:	42ab      	cmp	r3, r5
 8002748:	d1f7      	bne.n	800273a <__strtok_r+0x32>
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f3      	beq.n	8002736 <__strtok_r+0x2e>
 800274e:	2300      	movs	r3, #0
 8002750:	f804 3c01 	strb.w	r3, [r4, #-1]
 8002754:	6014      	str	r4, [r2, #0]
 8002756:	e7ed      	b.n	8002734 <__strtok_r+0x2c>

08002758 <_strtol_l.constprop.0>:
 8002758:	2b01      	cmp	r3, #1
 800275a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800275e:	4680      	mov	r8, r0
 8002760:	d001      	beq.n	8002766 <_strtol_l.constprop.0+0xe>
 8002762:	2b24      	cmp	r3, #36	; 0x24
 8002764:	d906      	bls.n	8002774 <_strtol_l.constprop.0+0x1c>
 8002766:	f7ff fe59 	bl	800241c <__errno>
 800276a:	2316      	movs	r3, #22
 800276c:	6003      	str	r3, [r0, #0]
 800276e:	2000      	movs	r0, #0
 8002770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002774:	460d      	mov	r5, r1
 8002776:	4f35      	ldr	r7, [pc, #212]	; (800284c <_strtol_l.constprop.0+0xf4>)
 8002778:	4628      	mov	r0, r5
 800277a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800277e:	5de6      	ldrb	r6, [r4, r7]
 8002780:	f016 0608 	ands.w	r6, r6, #8
 8002784:	d1f8      	bne.n	8002778 <_strtol_l.constprop.0+0x20>
 8002786:	2c2d      	cmp	r4, #45	; 0x2d
 8002788:	d12f      	bne.n	80027ea <_strtol_l.constprop.0+0x92>
 800278a:	2601      	movs	r6, #1
 800278c:	782c      	ldrb	r4, [r5, #0]
 800278e:	1c85      	adds	r5, r0, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d057      	beq.n	8002844 <_strtol_l.constprop.0+0xec>
 8002794:	2b10      	cmp	r3, #16
 8002796:	d109      	bne.n	80027ac <_strtol_l.constprop.0+0x54>
 8002798:	2c30      	cmp	r4, #48	; 0x30
 800279a:	d107      	bne.n	80027ac <_strtol_l.constprop.0+0x54>
 800279c:	7828      	ldrb	r0, [r5, #0]
 800279e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80027a2:	2858      	cmp	r0, #88	; 0x58
 80027a4:	d149      	bne.n	800283a <_strtol_l.constprop.0+0xe2>
 80027a6:	2310      	movs	r3, #16
 80027a8:	786c      	ldrb	r4, [r5, #1]
 80027aa:	3502      	adds	r5, #2
 80027ac:	2700      	movs	r7, #0
 80027ae:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80027b2:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80027b6:	fbbe f9f3 	udiv	r9, lr, r3
 80027ba:	4638      	mov	r0, r7
 80027bc:	fb03 ea19 	mls	sl, r3, r9, lr
 80027c0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80027c4:	f1bc 0f09 	cmp.w	ip, #9
 80027c8:	d814      	bhi.n	80027f4 <_strtol_l.constprop.0+0x9c>
 80027ca:	4664      	mov	r4, ip
 80027cc:	42a3      	cmp	r3, r4
 80027ce:	dd22      	ble.n	8002816 <_strtol_l.constprop.0+0xbe>
 80027d0:	2f00      	cmp	r7, #0
 80027d2:	db1d      	blt.n	8002810 <_strtol_l.constprop.0+0xb8>
 80027d4:	4581      	cmp	r9, r0
 80027d6:	d31b      	bcc.n	8002810 <_strtol_l.constprop.0+0xb8>
 80027d8:	d101      	bne.n	80027de <_strtol_l.constprop.0+0x86>
 80027da:	45a2      	cmp	sl, r4
 80027dc:	db18      	blt.n	8002810 <_strtol_l.constprop.0+0xb8>
 80027de:	2701      	movs	r7, #1
 80027e0:	fb00 4003 	mla	r0, r0, r3, r4
 80027e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80027e8:	e7ea      	b.n	80027c0 <_strtol_l.constprop.0+0x68>
 80027ea:	2c2b      	cmp	r4, #43	; 0x2b
 80027ec:	bf04      	itt	eq
 80027ee:	782c      	ldrbeq	r4, [r5, #0]
 80027f0:	1c85      	addeq	r5, r0, #2
 80027f2:	e7cd      	b.n	8002790 <_strtol_l.constprop.0+0x38>
 80027f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80027f8:	f1bc 0f19 	cmp.w	ip, #25
 80027fc:	d801      	bhi.n	8002802 <_strtol_l.constprop.0+0xaa>
 80027fe:	3c37      	subs	r4, #55	; 0x37
 8002800:	e7e4      	b.n	80027cc <_strtol_l.constprop.0+0x74>
 8002802:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002806:	f1bc 0f19 	cmp.w	ip, #25
 800280a:	d804      	bhi.n	8002816 <_strtol_l.constprop.0+0xbe>
 800280c:	3c57      	subs	r4, #87	; 0x57
 800280e:	e7dd      	b.n	80027cc <_strtol_l.constprop.0+0x74>
 8002810:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002814:	e7e6      	b.n	80027e4 <_strtol_l.constprop.0+0x8c>
 8002816:	2f00      	cmp	r7, #0
 8002818:	da07      	bge.n	800282a <_strtol_l.constprop.0+0xd2>
 800281a:	2322      	movs	r3, #34	; 0x22
 800281c:	4670      	mov	r0, lr
 800281e:	f8c8 3000 	str.w	r3, [r8]
 8002822:	2a00      	cmp	r2, #0
 8002824:	d0a4      	beq.n	8002770 <_strtol_l.constprop.0+0x18>
 8002826:	1e69      	subs	r1, r5, #1
 8002828:	e005      	b.n	8002836 <_strtol_l.constprop.0+0xde>
 800282a:	b106      	cbz	r6, 800282e <_strtol_l.constprop.0+0xd6>
 800282c:	4240      	negs	r0, r0
 800282e:	2a00      	cmp	r2, #0
 8002830:	d09e      	beq.n	8002770 <_strtol_l.constprop.0+0x18>
 8002832:	2f00      	cmp	r7, #0
 8002834:	d1f7      	bne.n	8002826 <_strtol_l.constprop.0+0xce>
 8002836:	6011      	str	r1, [r2, #0]
 8002838:	e79a      	b.n	8002770 <_strtol_l.constprop.0+0x18>
 800283a:	2430      	movs	r4, #48	; 0x30
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1b5      	bne.n	80027ac <_strtol_l.constprop.0+0x54>
 8002840:	2308      	movs	r3, #8
 8002842:	e7b3      	b.n	80027ac <_strtol_l.constprop.0+0x54>
 8002844:	2c30      	cmp	r4, #48	; 0x30
 8002846:	d0a9      	beq.n	800279c <_strtol_l.constprop.0+0x44>
 8002848:	230a      	movs	r3, #10
 800284a:	e7af      	b.n	80027ac <_strtol_l.constprop.0+0x54>
 800284c:	08003799 	.word	0x08003799

08002850 <strtol>:
 8002850:	4613      	mov	r3, r2
 8002852:	460a      	mov	r2, r1
 8002854:	4601      	mov	r1, r0
 8002856:	4802      	ldr	r0, [pc, #8]	; (8002860 <strtol+0x10>)
 8002858:	6800      	ldr	r0, [r0, #0]
 800285a:	f7ff bf7d 	b.w	8002758 <_strtol_l.constprop.0>
 800285e:	bf00      	nop
 8002860:	2000000c 	.word	0x2000000c

08002864 <__assert_func>:
 8002864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002866:	4614      	mov	r4, r2
 8002868:	461a      	mov	r2, r3
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <__assert_func+0x2c>)
 800286c:	4605      	mov	r5, r0
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68d8      	ldr	r0, [r3, #12]
 8002872:	b14c      	cbz	r4, 8002888 <__assert_func+0x24>
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <__assert_func+0x30>)
 8002876:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800287a:	9100      	str	r1, [sp, #0]
 800287c:	462b      	mov	r3, r5
 800287e:	4906      	ldr	r1, [pc, #24]	; (8002898 <__assert_func+0x34>)
 8002880:	f000 f80e 	bl	80028a0 <fiprintf>
 8002884:	f000 fbd8 	bl	8003038 <abort>
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <__assert_func+0x38>)
 800288a:	461c      	mov	r4, r3
 800288c:	e7f3      	b.n	8002876 <__assert_func+0x12>
 800288e:	bf00      	nop
 8002890:	2000000c 	.word	0x2000000c
 8002894:	0800375c 	.word	0x0800375c
 8002898:	08003769 	.word	0x08003769
 800289c:	08003797 	.word	0x08003797

080028a0 <fiprintf>:
 80028a0:	b40e      	push	{r1, r2, r3}
 80028a2:	b503      	push	{r0, r1, lr}
 80028a4:	4601      	mov	r1, r0
 80028a6:	ab03      	add	r3, sp, #12
 80028a8:	4805      	ldr	r0, [pc, #20]	; (80028c0 <fiprintf+0x20>)
 80028aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80028ae:	6800      	ldr	r0, [r0, #0]
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	f000 f83b 	bl	800292c <_vfiprintf_r>
 80028b6:	b002      	add	sp, #8
 80028b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80028bc:	b003      	add	sp, #12
 80028be:	4770      	bx	lr
 80028c0:	2000000c 	.word	0x2000000c

080028c4 <__malloc_lock>:
 80028c4:	4801      	ldr	r0, [pc, #4]	; (80028cc <__malloc_lock+0x8>)
 80028c6:	f000 bd73 	b.w	80033b0 <__retarget_lock_acquire_recursive>
 80028ca:	bf00      	nop
 80028cc:	2000014c 	.word	0x2000014c

080028d0 <__malloc_unlock>:
 80028d0:	4801      	ldr	r0, [pc, #4]	; (80028d8 <__malloc_unlock+0x8>)
 80028d2:	f000 bd6e 	b.w	80033b2 <__retarget_lock_release_recursive>
 80028d6:	bf00      	nop
 80028d8:	2000014c 	.word	0x2000014c

080028dc <__sfputc_r>:
 80028dc:	6893      	ldr	r3, [r2, #8]
 80028de:	b410      	push	{r4}
 80028e0:	3b01      	subs	r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	6093      	str	r3, [r2, #8]
 80028e6:	da07      	bge.n	80028f8 <__sfputc_r+0x1c>
 80028e8:	6994      	ldr	r4, [r2, #24]
 80028ea:	42a3      	cmp	r3, r4
 80028ec:	db01      	blt.n	80028f2 <__sfputc_r+0x16>
 80028ee:	290a      	cmp	r1, #10
 80028f0:	d102      	bne.n	80028f8 <__sfputc_r+0x1c>
 80028f2:	bc10      	pop	{r4}
 80028f4:	f000 bae0 	b.w	8002eb8 <__swbuf_r>
 80028f8:	6813      	ldr	r3, [r2, #0]
 80028fa:	1c58      	adds	r0, r3, #1
 80028fc:	6010      	str	r0, [r2, #0]
 80028fe:	7019      	strb	r1, [r3, #0]
 8002900:	4608      	mov	r0, r1
 8002902:	bc10      	pop	{r4}
 8002904:	4770      	bx	lr

08002906 <__sfputs_r>:
 8002906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002908:	4606      	mov	r6, r0
 800290a:	460f      	mov	r7, r1
 800290c:	4614      	mov	r4, r2
 800290e:	18d5      	adds	r5, r2, r3
 8002910:	42ac      	cmp	r4, r5
 8002912:	d101      	bne.n	8002918 <__sfputs_r+0x12>
 8002914:	2000      	movs	r0, #0
 8002916:	e007      	b.n	8002928 <__sfputs_r+0x22>
 8002918:	463a      	mov	r2, r7
 800291a:	4630      	mov	r0, r6
 800291c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002920:	f7ff ffdc 	bl	80028dc <__sfputc_r>
 8002924:	1c43      	adds	r3, r0, #1
 8002926:	d1f3      	bne.n	8002910 <__sfputs_r+0xa>
 8002928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800292c <_vfiprintf_r>:
 800292c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002930:	460d      	mov	r5, r1
 8002932:	4614      	mov	r4, r2
 8002934:	4698      	mov	r8, r3
 8002936:	4606      	mov	r6, r0
 8002938:	b09d      	sub	sp, #116	; 0x74
 800293a:	b118      	cbz	r0, 8002944 <_vfiprintf_r+0x18>
 800293c:	6983      	ldr	r3, [r0, #24]
 800293e:	b90b      	cbnz	r3, 8002944 <_vfiprintf_r+0x18>
 8002940:	f000 fc98 	bl	8003274 <__sinit>
 8002944:	4b89      	ldr	r3, [pc, #548]	; (8002b6c <_vfiprintf_r+0x240>)
 8002946:	429d      	cmp	r5, r3
 8002948:	d11b      	bne.n	8002982 <_vfiprintf_r+0x56>
 800294a:	6875      	ldr	r5, [r6, #4]
 800294c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800294e:	07d9      	lsls	r1, r3, #31
 8002950:	d405      	bmi.n	800295e <_vfiprintf_r+0x32>
 8002952:	89ab      	ldrh	r3, [r5, #12]
 8002954:	059a      	lsls	r2, r3, #22
 8002956:	d402      	bmi.n	800295e <_vfiprintf_r+0x32>
 8002958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800295a:	f000 fd29 	bl	80033b0 <__retarget_lock_acquire_recursive>
 800295e:	89ab      	ldrh	r3, [r5, #12]
 8002960:	071b      	lsls	r3, r3, #28
 8002962:	d501      	bpl.n	8002968 <_vfiprintf_r+0x3c>
 8002964:	692b      	ldr	r3, [r5, #16]
 8002966:	b9eb      	cbnz	r3, 80029a4 <_vfiprintf_r+0x78>
 8002968:	4629      	mov	r1, r5
 800296a:	4630      	mov	r0, r6
 800296c:	f000 faf6 	bl	8002f5c <__swsetup_r>
 8002970:	b1c0      	cbz	r0, 80029a4 <_vfiprintf_r+0x78>
 8002972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002974:	07dc      	lsls	r4, r3, #31
 8002976:	d50e      	bpl.n	8002996 <_vfiprintf_r+0x6a>
 8002978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800297c:	b01d      	add	sp, #116	; 0x74
 800297e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002982:	4b7b      	ldr	r3, [pc, #492]	; (8002b70 <_vfiprintf_r+0x244>)
 8002984:	429d      	cmp	r5, r3
 8002986:	d101      	bne.n	800298c <_vfiprintf_r+0x60>
 8002988:	68b5      	ldr	r5, [r6, #8]
 800298a:	e7df      	b.n	800294c <_vfiprintf_r+0x20>
 800298c:	4b79      	ldr	r3, [pc, #484]	; (8002b74 <_vfiprintf_r+0x248>)
 800298e:	429d      	cmp	r5, r3
 8002990:	bf08      	it	eq
 8002992:	68f5      	ldreq	r5, [r6, #12]
 8002994:	e7da      	b.n	800294c <_vfiprintf_r+0x20>
 8002996:	89ab      	ldrh	r3, [r5, #12]
 8002998:	0598      	lsls	r0, r3, #22
 800299a:	d4ed      	bmi.n	8002978 <_vfiprintf_r+0x4c>
 800299c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800299e:	f000 fd08 	bl	80033b2 <__retarget_lock_release_recursive>
 80029a2:	e7e9      	b.n	8002978 <_vfiprintf_r+0x4c>
 80029a4:	2300      	movs	r3, #0
 80029a6:	9309      	str	r3, [sp, #36]	; 0x24
 80029a8:	2320      	movs	r3, #32
 80029aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029ae:	2330      	movs	r3, #48	; 0x30
 80029b0:	f04f 0901 	mov.w	r9, #1
 80029b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80029b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002b78 <_vfiprintf_r+0x24c>
 80029bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029c0:	4623      	mov	r3, r4
 80029c2:	469a      	mov	sl, r3
 80029c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029c8:	b10a      	cbz	r2, 80029ce <_vfiprintf_r+0xa2>
 80029ca:	2a25      	cmp	r2, #37	; 0x25
 80029cc:	d1f9      	bne.n	80029c2 <_vfiprintf_r+0x96>
 80029ce:	ebba 0b04 	subs.w	fp, sl, r4
 80029d2:	d00b      	beq.n	80029ec <_vfiprintf_r+0xc0>
 80029d4:	465b      	mov	r3, fp
 80029d6:	4622      	mov	r2, r4
 80029d8:	4629      	mov	r1, r5
 80029da:	4630      	mov	r0, r6
 80029dc:	f7ff ff93 	bl	8002906 <__sfputs_r>
 80029e0:	3001      	adds	r0, #1
 80029e2:	f000 80aa 	beq.w	8002b3a <_vfiprintf_r+0x20e>
 80029e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029e8:	445a      	add	r2, fp
 80029ea:	9209      	str	r2, [sp, #36]	; 0x24
 80029ec:	f89a 3000 	ldrb.w	r3, [sl]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80a2 	beq.w	8002b3a <_vfiprintf_r+0x20e>
 80029f6:	2300      	movs	r3, #0
 80029f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a00:	f10a 0a01 	add.w	sl, sl, #1
 8002a04:	9304      	str	r3, [sp, #16]
 8002a06:	9307      	str	r3, [sp, #28]
 8002a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8002a0e:	4654      	mov	r4, sl
 8002a10:	2205      	movs	r2, #5
 8002a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a16:	4858      	ldr	r0, [pc, #352]	; (8002b78 <_vfiprintf_r+0x24c>)
 8002a18:	f000 fd32 	bl	8003480 <memchr>
 8002a1c:	9a04      	ldr	r2, [sp, #16]
 8002a1e:	b9d8      	cbnz	r0, 8002a58 <_vfiprintf_r+0x12c>
 8002a20:	06d1      	lsls	r1, r2, #27
 8002a22:	bf44      	itt	mi
 8002a24:	2320      	movmi	r3, #32
 8002a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a2a:	0713      	lsls	r3, r2, #28
 8002a2c:	bf44      	itt	mi
 8002a2e:	232b      	movmi	r3, #43	; 0x2b
 8002a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a34:	f89a 3000 	ldrb.w	r3, [sl]
 8002a38:	2b2a      	cmp	r3, #42	; 0x2a
 8002a3a:	d015      	beq.n	8002a68 <_vfiprintf_r+0x13c>
 8002a3c:	4654      	mov	r4, sl
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f04f 0c0a 	mov.w	ip, #10
 8002a44:	9a07      	ldr	r2, [sp, #28]
 8002a46:	4621      	mov	r1, r4
 8002a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a4c:	3b30      	subs	r3, #48	; 0x30
 8002a4e:	2b09      	cmp	r3, #9
 8002a50:	d94e      	bls.n	8002af0 <_vfiprintf_r+0x1c4>
 8002a52:	b1b0      	cbz	r0, 8002a82 <_vfiprintf_r+0x156>
 8002a54:	9207      	str	r2, [sp, #28]
 8002a56:	e014      	b.n	8002a82 <_vfiprintf_r+0x156>
 8002a58:	eba0 0308 	sub.w	r3, r0, r8
 8002a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8002a60:	4313      	orrs	r3, r2
 8002a62:	46a2      	mov	sl, r4
 8002a64:	9304      	str	r3, [sp, #16]
 8002a66:	e7d2      	b.n	8002a0e <_vfiprintf_r+0xe2>
 8002a68:	9b03      	ldr	r3, [sp, #12]
 8002a6a:	1d19      	adds	r1, r3, #4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	9103      	str	r1, [sp, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bfbb      	ittet	lt
 8002a74:	425b      	neglt	r3, r3
 8002a76:	f042 0202 	orrlt.w	r2, r2, #2
 8002a7a:	9307      	strge	r3, [sp, #28]
 8002a7c:	9307      	strlt	r3, [sp, #28]
 8002a7e:	bfb8      	it	lt
 8002a80:	9204      	strlt	r2, [sp, #16]
 8002a82:	7823      	ldrb	r3, [r4, #0]
 8002a84:	2b2e      	cmp	r3, #46	; 0x2e
 8002a86:	d10c      	bne.n	8002aa2 <_vfiprintf_r+0x176>
 8002a88:	7863      	ldrb	r3, [r4, #1]
 8002a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8002a8c:	d135      	bne.n	8002afa <_vfiprintf_r+0x1ce>
 8002a8e:	9b03      	ldr	r3, [sp, #12]
 8002a90:	3402      	adds	r4, #2
 8002a92:	1d1a      	adds	r2, r3, #4
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	9203      	str	r2, [sp, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bfb8      	it	lt
 8002a9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002aa0:	9305      	str	r3, [sp, #20]
 8002aa2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002b7c <_vfiprintf_r+0x250>
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	4650      	mov	r0, sl
 8002aaa:	7821      	ldrb	r1, [r4, #0]
 8002aac:	f000 fce8 	bl	8003480 <memchr>
 8002ab0:	b140      	cbz	r0, 8002ac4 <_vfiprintf_r+0x198>
 8002ab2:	2340      	movs	r3, #64	; 0x40
 8002ab4:	eba0 000a 	sub.w	r0, r0, sl
 8002ab8:	fa03 f000 	lsl.w	r0, r3, r0
 8002abc:	9b04      	ldr	r3, [sp, #16]
 8002abe:	3401      	adds	r4, #1
 8002ac0:	4303      	orrs	r3, r0
 8002ac2:	9304      	str	r3, [sp, #16]
 8002ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ac8:	2206      	movs	r2, #6
 8002aca:	482d      	ldr	r0, [pc, #180]	; (8002b80 <_vfiprintf_r+0x254>)
 8002acc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ad0:	f000 fcd6 	bl	8003480 <memchr>
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d03f      	beq.n	8002b58 <_vfiprintf_r+0x22c>
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <_vfiprintf_r+0x258>)
 8002ada:	bb1b      	cbnz	r3, 8002b24 <_vfiprintf_r+0x1f8>
 8002adc:	9b03      	ldr	r3, [sp, #12]
 8002ade:	3307      	adds	r3, #7
 8002ae0:	f023 0307 	bic.w	r3, r3, #7
 8002ae4:	3308      	adds	r3, #8
 8002ae6:	9303      	str	r3, [sp, #12]
 8002ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aea:	443b      	add	r3, r7
 8002aec:	9309      	str	r3, [sp, #36]	; 0x24
 8002aee:	e767      	b.n	80029c0 <_vfiprintf_r+0x94>
 8002af0:	460c      	mov	r4, r1
 8002af2:	2001      	movs	r0, #1
 8002af4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002af8:	e7a5      	b.n	8002a46 <_vfiprintf_r+0x11a>
 8002afa:	2300      	movs	r3, #0
 8002afc:	f04f 0c0a 	mov.w	ip, #10
 8002b00:	4619      	mov	r1, r3
 8002b02:	3401      	adds	r4, #1
 8002b04:	9305      	str	r3, [sp, #20]
 8002b06:	4620      	mov	r0, r4
 8002b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b0c:	3a30      	subs	r2, #48	; 0x30
 8002b0e:	2a09      	cmp	r2, #9
 8002b10:	d903      	bls.n	8002b1a <_vfiprintf_r+0x1ee>
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0c5      	beq.n	8002aa2 <_vfiprintf_r+0x176>
 8002b16:	9105      	str	r1, [sp, #20]
 8002b18:	e7c3      	b.n	8002aa2 <_vfiprintf_r+0x176>
 8002b1a:	4604      	mov	r4, r0
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b22:	e7f0      	b.n	8002b06 <_vfiprintf_r+0x1da>
 8002b24:	ab03      	add	r3, sp, #12
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	462a      	mov	r2, r5
 8002b2a:	4630      	mov	r0, r6
 8002b2c:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <_vfiprintf_r+0x25c>)
 8002b2e:	a904      	add	r1, sp, #16
 8002b30:	f3af 8000 	nop.w
 8002b34:	4607      	mov	r7, r0
 8002b36:	1c78      	adds	r0, r7, #1
 8002b38:	d1d6      	bne.n	8002ae8 <_vfiprintf_r+0x1bc>
 8002b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b3c:	07d9      	lsls	r1, r3, #31
 8002b3e:	d405      	bmi.n	8002b4c <_vfiprintf_r+0x220>
 8002b40:	89ab      	ldrh	r3, [r5, #12]
 8002b42:	059a      	lsls	r2, r3, #22
 8002b44:	d402      	bmi.n	8002b4c <_vfiprintf_r+0x220>
 8002b46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b48:	f000 fc33 	bl	80033b2 <__retarget_lock_release_recursive>
 8002b4c:	89ab      	ldrh	r3, [r5, #12]
 8002b4e:	065b      	lsls	r3, r3, #25
 8002b50:	f53f af12 	bmi.w	8002978 <_vfiprintf_r+0x4c>
 8002b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b56:	e711      	b.n	800297c <_vfiprintf_r+0x50>
 8002b58:	ab03      	add	r3, sp, #12
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	462a      	mov	r2, r5
 8002b5e:	4630      	mov	r0, r6
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <_vfiprintf_r+0x25c>)
 8002b62:	a904      	add	r1, sp, #16
 8002b64:	f000 f882 	bl	8002c6c <_printf_i>
 8002b68:	e7e4      	b.n	8002b34 <_vfiprintf_r+0x208>
 8002b6a:	bf00      	nop
 8002b6c:	080038ec 	.word	0x080038ec
 8002b70:	0800390c 	.word	0x0800390c
 8002b74:	080038cc 	.word	0x080038cc
 8002b78:	08003899 	.word	0x08003899
 8002b7c:	0800389f 	.word	0x0800389f
 8002b80:	080038a3 	.word	0x080038a3
 8002b84:	00000000 	.word	0x00000000
 8002b88:	08002907 	.word	0x08002907

08002b8c <_printf_common>:
 8002b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b90:	4616      	mov	r6, r2
 8002b92:	4699      	mov	r9, r3
 8002b94:	688a      	ldr	r2, [r1, #8]
 8002b96:	690b      	ldr	r3, [r1, #16]
 8002b98:	4607      	mov	r7, r0
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	bfb8      	it	lt
 8002b9e:	4613      	movlt	r3, r2
 8002ba0:	6033      	str	r3, [r6, #0]
 8002ba2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bac:	b10a      	cbz	r2, 8002bb2 <_printf_common+0x26>
 8002bae:	3301      	adds	r3, #1
 8002bb0:	6033      	str	r3, [r6, #0]
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	0699      	lsls	r1, r3, #26
 8002bb6:	bf42      	ittt	mi
 8002bb8:	6833      	ldrmi	r3, [r6, #0]
 8002bba:	3302      	addmi	r3, #2
 8002bbc:	6033      	strmi	r3, [r6, #0]
 8002bbe:	6825      	ldr	r5, [r4, #0]
 8002bc0:	f015 0506 	ands.w	r5, r5, #6
 8002bc4:	d106      	bne.n	8002bd4 <_printf_common+0x48>
 8002bc6:	f104 0a19 	add.w	sl, r4, #25
 8002bca:	68e3      	ldr	r3, [r4, #12]
 8002bcc:	6832      	ldr	r2, [r6, #0]
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	42ab      	cmp	r3, r5
 8002bd2:	dc28      	bgt.n	8002c26 <_printf_common+0x9a>
 8002bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bd8:	1e13      	subs	r3, r2, #0
 8002bda:	6822      	ldr	r2, [r4, #0]
 8002bdc:	bf18      	it	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	0692      	lsls	r2, r2, #26
 8002be2:	d42d      	bmi.n	8002c40 <_printf_common+0xb4>
 8002be4:	4649      	mov	r1, r9
 8002be6:	4638      	mov	r0, r7
 8002be8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bec:	47c0      	blx	r8
 8002bee:	3001      	adds	r0, #1
 8002bf0:	d020      	beq.n	8002c34 <_printf_common+0xa8>
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	68e5      	ldr	r5, [r4, #12]
 8002bf6:	f003 0306 	and.w	r3, r3, #6
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	bf18      	it	ne
 8002bfe:	2500      	movne	r5, #0
 8002c00:	6832      	ldr	r2, [r6, #0]
 8002c02:	f04f 0600 	mov.w	r6, #0
 8002c06:	68a3      	ldr	r3, [r4, #8]
 8002c08:	bf08      	it	eq
 8002c0a:	1aad      	subeq	r5, r5, r2
 8002c0c:	6922      	ldr	r2, [r4, #16]
 8002c0e:	bf08      	it	eq
 8002c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c14:	4293      	cmp	r3, r2
 8002c16:	bfc4      	itt	gt
 8002c18:	1a9b      	subgt	r3, r3, r2
 8002c1a:	18ed      	addgt	r5, r5, r3
 8002c1c:	341a      	adds	r4, #26
 8002c1e:	42b5      	cmp	r5, r6
 8002c20:	d11a      	bne.n	8002c58 <_printf_common+0xcc>
 8002c22:	2000      	movs	r0, #0
 8002c24:	e008      	b.n	8002c38 <_printf_common+0xac>
 8002c26:	2301      	movs	r3, #1
 8002c28:	4652      	mov	r2, sl
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	4638      	mov	r0, r7
 8002c2e:	47c0      	blx	r8
 8002c30:	3001      	adds	r0, #1
 8002c32:	d103      	bne.n	8002c3c <_printf_common+0xb0>
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c3c:	3501      	adds	r5, #1
 8002c3e:	e7c4      	b.n	8002bca <_printf_common+0x3e>
 8002c40:	2030      	movs	r0, #48	; 0x30
 8002c42:	18e1      	adds	r1, r4, r3
 8002c44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c4e:	4422      	add	r2, r4
 8002c50:	3302      	adds	r3, #2
 8002c52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c56:	e7c5      	b.n	8002be4 <_printf_common+0x58>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	4622      	mov	r2, r4
 8002c5c:	4649      	mov	r1, r9
 8002c5e:	4638      	mov	r0, r7
 8002c60:	47c0      	blx	r8
 8002c62:	3001      	adds	r0, #1
 8002c64:	d0e6      	beq.n	8002c34 <_printf_common+0xa8>
 8002c66:	3601      	adds	r6, #1
 8002c68:	e7d9      	b.n	8002c1e <_printf_common+0x92>
	...

08002c6c <_printf_i>:
 8002c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c70:	7e0f      	ldrb	r7, [r1, #24]
 8002c72:	4691      	mov	r9, r2
 8002c74:	2f78      	cmp	r7, #120	; 0x78
 8002c76:	4680      	mov	r8, r0
 8002c78:	460c      	mov	r4, r1
 8002c7a:	469a      	mov	sl, r3
 8002c7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c82:	d807      	bhi.n	8002c94 <_printf_i+0x28>
 8002c84:	2f62      	cmp	r7, #98	; 0x62
 8002c86:	d80a      	bhi.n	8002c9e <_printf_i+0x32>
 8002c88:	2f00      	cmp	r7, #0
 8002c8a:	f000 80d9 	beq.w	8002e40 <_printf_i+0x1d4>
 8002c8e:	2f58      	cmp	r7, #88	; 0x58
 8002c90:	f000 80a4 	beq.w	8002ddc <_printf_i+0x170>
 8002c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c9c:	e03a      	b.n	8002d14 <_printf_i+0xa8>
 8002c9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ca2:	2b15      	cmp	r3, #21
 8002ca4:	d8f6      	bhi.n	8002c94 <_printf_i+0x28>
 8002ca6:	a101      	add	r1, pc, #4	; (adr r1, 8002cac <_printf_i+0x40>)
 8002ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cac:	08002d05 	.word	0x08002d05
 8002cb0:	08002d19 	.word	0x08002d19
 8002cb4:	08002c95 	.word	0x08002c95
 8002cb8:	08002c95 	.word	0x08002c95
 8002cbc:	08002c95 	.word	0x08002c95
 8002cc0:	08002c95 	.word	0x08002c95
 8002cc4:	08002d19 	.word	0x08002d19
 8002cc8:	08002c95 	.word	0x08002c95
 8002ccc:	08002c95 	.word	0x08002c95
 8002cd0:	08002c95 	.word	0x08002c95
 8002cd4:	08002c95 	.word	0x08002c95
 8002cd8:	08002e27 	.word	0x08002e27
 8002cdc:	08002d49 	.word	0x08002d49
 8002ce0:	08002e09 	.word	0x08002e09
 8002ce4:	08002c95 	.word	0x08002c95
 8002ce8:	08002c95 	.word	0x08002c95
 8002cec:	08002e49 	.word	0x08002e49
 8002cf0:	08002c95 	.word	0x08002c95
 8002cf4:	08002d49 	.word	0x08002d49
 8002cf8:	08002c95 	.word	0x08002c95
 8002cfc:	08002c95 	.word	0x08002c95
 8002d00:	08002e11 	.word	0x08002e11
 8002d04:	682b      	ldr	r3, [r5, #0]
 8002d06:	1d1a      	adds	r2, r3, #4
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	602a      	str	r2, [r5, #0]
 8002d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0a4      	b.n	8002e62 <_printf_i+0x1f6>
 8002d18:	6820      	ldr	r0, [r4, #0]
 8002d1a:	6829      	ldr	r1, [r5, #0]
 8002d1c:	0606      	lsls	r6, r0, #24
 8002d1e:	f101 0304 	add.w	r3, r1, #4
 8002d22:	d50a      	bpl.n	8002d3a <_printf_i+0xce>
 8002d24:	680e      	ldr	r6, [r1, #0]
 8002d26:	602b      	str	r3, [r5, #0]
 8002d28:	2e00      	cmp	r6, #0
 8002d2a:	da03      	bge.n	8002d34 <_printf_i+0xc8>
 8002d2c:	232d      	movs	r3, #45	; 0x2d
 8002d2e:	4276      	negs	r6, r6
 8002d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d34:	230a      	movs	r3, #10
 8002d36:	485e      	ldr	r0, [pc, #376]	; (8002eb0 <_printf_i+0x244>)
 8002d38:	e019      	b.n	8002d6e <_printf_i+0x102>
 8002d3a:	680e      	ldr	r6, [r1, #0]
 8002d3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d40:	602b      	str	r3, [r5, #0]
 8002d42:	bf18      	it	ne
 8002d44:	b236      	sxthne	r6, r6
 8002d46:	e7ef      	b.n	8002d28 <_printf_i+0xbc>
 8002d48:	682b      	ldr	r3, [r5, #0]
 8002d4a:	6820      	ldr	r0, [r4, #0]
 8002d4c:	1d19      	adds	r1, r3, #4
 8002d4e:	6029      	str	r1, [r5, #0]
 8002d50:	0601      	lsls	r1, r0, #24
 8002d52:	d501      	bpl.n	8002d58 <_printf_i+0xec>
 8002d54:	681e      	ldr	r6, [r3, #0]
 8002d56:	e002      	b.n	8002d5e <_printf_i+0xf2>
 8002d58:	0646      	lsls	r6, r0, #25
 8002d5a:	d5fb      	bpl.n	8002d54 <_printf_i+0xe8>
 8002d5c:	881e      	ldrh	r6, [r3, #0]
 8002d5e:	2f6f      	cmp	r7, #111	; 0x6f
 8002d60:	bf0c      	ite	eq
 8002d62:	2308      	moveq	r3, #8
 8002d64:	230a      	movne	r3, #10
 8002d66:	4852      	ldr	r0, [pc, #328]	; (8002eb0 <_printf_i+0x244>)
 8002d68:	2100      	movs	r1, #0
 8002d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d6e:	6865      	ldr	r5, [r4, #4]
 8002d70:	2d00      	cmp	r5, #0
 8002d72:	bfa8      	it	ge
 8002d74:	6821      	ldrge	r1, [r4, #0]
 8002d76:	60a5      	str	r5, [r4, #8]
 8002d78:	bfa4      	itt	ge
 8002d7a:	f021 0104 	bicge.w	r1, r1, #4
 8002d7e:	6021      	strge	r1, [r4, #0]
 8002d80:	b90e      	cbnz	r6, 8002d86 <_printf_i+0x11a>
 8002d82:	2d00      	cmp	r5, #0
 8002d84:	d04d      	beq.n	8002e22 <_printf_i+0x1b6>
 8002d86:	4615      	mov	r5, r2
 8002d88:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d8c:	fb03 6711 	mls	r7, r3, r1, r6
 8002d90:	5dc7      	ldrb	r7, [r0, r7]
 8002d92:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d96:	4637      	mov	r7, r6
 8002d98:	42bb      	cmp	r3, r7
 8002d9a:	460e      	mov	r6, r1
 8002d9c:	d9f4      	bls.n	8002d88 <_printf_i+0x11c>
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d10b      	bne.n	8002dba <_printf_i+0x14e>
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	07de      	lsls	r6, r3, #31
 8002da6:	d508      	bpl.n	8002dba <_printf_i+0x14e>
 8002da8:	6923      	ldr	r3, [r4, #16]
 8002daa:	6861      	ldr	r1, [r4, #4]
 8002dac:	4299      	cmp	r1, r3
 8002dae:	bfde      	ittt	le
 8002db0:	2330      	movle	r3, #48	; 0x30
 8002db2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002db6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002dba:	1b52      	subs	r2, r2, r5
 8002dbc:	6122      	str	r2, [r4, #16]
 8002dbe:	464b      	mov	r3, r9
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	4640      	mov	r0, r8
 8002dc4:	f8cd a000 	str.w	sl, [sp]
 8002dc8:	aa03      	add	r2, sp, #12
 8002dca:	f7ff fedf 	bl	8002b8c <_printf_common>
 8002dce:	3001      	adds	r0, #1
 8002dd0:	d14c      	bne.n	8002e6c <_printf_i+0x200>
 8002dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dd6:	b004      	add	sp, #16
 8002dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ddc:	4834      	ldr	r0, [pc, #208]	; (8002eb0 <_printf_i+0x244>)
 8002dde:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002de2:	6829      	ldr	r1, [r5, #0]
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	f851 6b04 	ldr.w	r6, [r1], #4
 8002dea:	6029      	str	r1, [r5, #0]
 8002dec:	061d      	lsls	r5, r3, #24
 8002dee:	d514      	bpl.n	8002e1a <_printf_i+0x1ae>
 8002df0:	07df      	lsls	r7, r3, #31
 8002df2:	bf44      	itt	mi
 8002df4:	f043 0320 	orrmi.w	r3, r3, #32
 8002df8:	6023      	strmi	r3, [r4, #0]
 8002dfa:	b91e      	cbnz	r6, 8002e04 <_printf_i+0x198>
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	f023 0320 	bic.w	r3, r3, #32
 8002e02:	6023      	str	r3, [r4, #0]
 8002e04:	2310      	movs	r3, #16
 8002e06:	e7af      	b.n	8002d68 <_printf_i+0xfc>
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	f043 0320 	orr.w	r3, r3, #32
 8002e0e:	6023      	str	r3, [r4, #0]
 8002e10:	2378      	movs	r3, #120	; 0x78
 8002e12:	4828      	ldr	r0, [pc, #160]	; (8002eb4 <_printf_i+0x248>)
 8002e14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e18:	e7e3      	b.n	8002de2 <_printf_i+0x176>
 8002e1a:	0659      	lsls	r1, r3, #25
 8002e1c:	bf48      	it	mi
 8002e1e:	b2b6      	uxthmi	r6, r6
 8002e20:	e7e6      	b.n	8002df0 <_printf_i+0x184>
 8002e22:	4615      	mov	r5, r2
 8002e24:	e7bb      	b.n	8002d9e <_printf_i+0x132>
 8002e26:	682b      	ldr	r3, [r5, #0]
 8002e28:	6826      	ldr	r6, [r4, #0]
 8002e2a:	1d18      	adds	r0, r3, #4
 8002e2c:	6961      	ldr	r1, [r4, #20]
 8002e2e:	6028      	str	r0, [r5, #0]
 8002e30:	0635      	lsls	r5, r6, #24
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	d501      	bpl.n	8002e3a <_printf_i+0x1ce>
 8002e36:	6019      	str	r1, [r3, #0]
 8002e38:	e002      	b.n	8002e40 <_printf_i+0x1d4>
 8002e3a:	0670      	lsls	r0, r6, #25
 8002e3c:	d5fb      	bpl.n	8002e36 <_printf_i+0x1ca>
 8002e3e:	8019      	strh	r1, [r3, #0]
 8002e40:	2300      	movs	r3, #0
 8002e42:	4615      	mov	r5, r2
 8002e44:	6123      	str	r3, [r4, #16]
 8002e46:	e7ba      	b.n	8002dbe <_printf_i+0x152>
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	1d1a      	adds	r2, r3, #4
 8002e4e:	602a      	str	r2, [r5, #0]
 8002e50:	681d      	ldr	r5, [r3, #0]
 8002e52:	6862      	ldr	r2, [r4, #4]
 8002e54:	4628      	mov	r0, r5
 8002e56:	f000 fb13 	bl	8003480 <memchr>
 8002e5a:	b108      	cbz	r0, 8002e60 <_printf_i+0x1f4>
 8002e5c:	1b40      	subs	r0, r0, r5
 8002e5e:	6060      	str	r0, [r4, #4]
 8002e60:	6863      	ldr	r3, [r4, #4]
 8002e62:	6123      	str	r3, [r4, #16]
 8002e64:	2300      	movs	r3, #0
 8002e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e6a:	e7a8      	b.n	8002dbe <_printf_i+0x152>
 8002e6c:	462a      	mov	r2, r5
 8002e6e:	4649      	mov	r1, r9
 8002e70:	4640      	mov	r0, r8
 8002e72:	6923      	ldr	r3, [r4, #16]
 8002e74:	47d0      	blx	sl
 8002e76:	3001      	adds	r0, #1
 8002e78:	d0ab      	beq.n	8002dd2 <_printf_i+0x166>
 8002e7a:	6823      	ldr	r3, [r4, #0]
 8002e7c:	079b      	lsls	r3, r3, #30
 8002e7e:	d413      	bmi.n	8002ea8 <_printf_i+0x23c>
 8002e80:	68e0      	ldr	r0, [r4, #12]
 8002e82:	9b03      	ldr	r3, [sp, #12]
 8002e84:	4298      	cmp	r0, r3
 8002e86:	bfb8      	it	lt
 8002e88:	4618      	movlt	r0, r3
 8002e8a:	e7a4      	b.n	8002dd6 <_printf_i+0x16a>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	4632      	mov	r2, r6
 8002e90:	4649      	mov	r1, r9
 8002e92:	4640      	mov	r0, r8
 8002e94:	47d0      	blx	sl
 8002e96:	3001      	adds	r0, #1
 8002e98:	d09b      	beq.n	8002dd2 <_printf_i+0x166>
 8002e9a:	3501      	adds	r5, #1
 8002e9c:	68e3      	ldr	r3, [r4, #12]
 8002e9e:	9903      	ldr	r1, [sp, #12]
 8002ea0:	1a5b      	subs	r3, r3, r1
 8002ea2:	42ab      	cmp	r3, r5
 8002ea4:	dcf2      	bgt.n	8002e8c <_printf_i+0x220>
 8002ea6:	e7eb      	b.n	8002e80 <_printf_i+0x214>
 8002ea8:	2500      	movs	r5, #0
 8002eaa:	f104 0619 	add.w	r6, r4, #25
 8002eae:	e7f5      	b.n	8002e9c <_printf_i+0x230>
 8002eb0:	080038aa 	.word	0x080038aa
 8002eb4:	080038bb 	.word	0x080038bb

08002eb8 <__swbuf_r>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	460e      	mov	r6, r1
 8002ebc:	4614      	mov	r4, r2
 8002ebe:	4605      	mov	r5, r0
 8002ec0:	b118      	cbz	r0, 8002eca <__swbuf_r+0x12>
 8002ec2:	6983      	ldr	r3, [r0, #24]
 8002ec4:	b90b      	cbnz	r3, 8002eca <__swbuf_r+0x12>
 8002ec6:	f000 f9d5 	bl	8003274 <__sinit>
 8002eca:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <__swbuf_r+0x98>)
 8002ecc:	429c      	cmp	r4, r3
 8002ece:	d12b      	bne.n	8002f28 <__swbuf_r+0x70>
 8002ed0:	686c      	ldr	r4, [r5, #4]
 8002ed2:	69a3      	ldr	r3, [r4, #24]
 8002ed4:	60a3      	str	r3, [r4, #8]
 8002ed6:	89a3      	ldrh	r3, [r4, #12]
 8002ed8:	071a      	lsls	r2, r3, #28
 8002eda:	d52f      	bpl.n	8002f3c <__swbuf_r+0x84>
 8002edc:	6923      	ldr	r3, [r4, #16]
 8002ede:	b36b      	cbz	r3, 8002f3c <__swbuf_r+0x84>
 8002ee0:	6923      	ldr	r3, [r4, #16]
 8002ee2:	6820      	ldr	r0, [r4, #0]
 8002ee4:	b2f6      	uxtb	r6, r6
 8002ee6:	1ac0      	subs	r0, r0, r3
 8002ee8:	6963      	ldr	r3, [r4, #20]
 8002eea:	4637      	mov	r7, r6
 8002eec:	4283      	cmp	r3, r0
 8002eee:	dc04      	bgt.n	8002efa <__swbuf_r+0x42>
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f000 f92a 	bl	800314c <_fflush_r>
 8002ef8:	bb30      	cbnz	r0, 8002f48 <__swbuf_r+0x90>
 8002efa:	68a3      	ldr	r3, [r4, #8]
 8002efc:	3001      	adds	r0, #1
 8002efe:	3b01      	subs	r3, #1
 8002f00:	60a3      	str	r3, [r4, #8]
 8002f02:	6823      	ldr	r3, [r4, #0]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	6022      	str	r2, [r4, #0]
 8002f08:	701e      	strb	r6, [r3, #0]
 8002f0a:	6963      	ldr	r3, [r4, #20]
 8002f0c:	4283      	cmp	r3, r0
 8002f0e:	d004      	beq.n	8002f1a <__swbuf_r+0x62>
 8002f10:	89a3      	ldrh	r3, [r4, #12]
 8002f12:	07db      	lsls	r3, r3, #31
 8002f14:	d506      	bpl.n	8002f24 <__swbuf_r+0x6c>
 8002f16:	2e0a      	cmp	r6, #10
 8002f18:	d104      	bne.n	8002f24 <__swbuf_r+0x6c>
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	f000 f915 	bl	800314c <_fflush_r>
 8002f22:	b988      	cbnz	r0, 8002f48 <__swbuf_r+0x90>
 8002f24:	4638      	mov	r0, r7
 8002f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <__swbuf_r+0x9c>)
 8002f2a:	429c      	cmp	r4, r3
 8002f2c:	d101      	bne.n	8002f32 <__swbuf_r+0x7a>
 8002f2e:	68ac      	ldr	r4, [r5, #8]
 8002f30:	e7cf      	b.n	8002ed2 <__swbuf_r+0x1a>
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <__swbuf_r+0xa0>)
 8002f34:	429c      	cmp	r4, r3
 8002f36:	bf08      	it	eq
 8002f38:	68ec      	ldreq	r4, [r5, #12]
 8002f3a:	e7ca      	b.n	8002ed2 <__swbuf_r+0x1a>
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	4628      	mov	r0, r5
 8002f40:	f000 f80c 	bl	8002f5c <__swsetup_r>
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d0cb      	beq.n	8002ee0 <__swbuf_r+0x28>
 8002f48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002f4c:	e7ea      	b.n	8002f24 <__swbuf_r+0x6c>
 8002f4e:	bf00      	nop
 8002f50:	080038ec 	.word	0x080038ec
 8002f54:	0800390c 	.word	0x0800390c
 8002f58:	080038cc 	.word	0x080038cc

08002f5c <__swsetup_r>:
 8002f5c:	4b32      	ldr	r3, [pc, #200]	; (8003028 <__swsetup_r+0xcc>)
 8002f5e:	b570      	push	{r4, r5, r6, lr}
 8002f60:	681d      	ldr	r5, [r3, #0]
 8002f62:	4606      	mov	r6, r0
 8002f64:	460c      	mov	r4, r1
 8002f66:	b125      	cbz	r5, 8002f72 <__swsetup_r+0x16>
 8002f68:	69ab      	ldr	r3, [r5, #24]
 8002f6a:	b913      	cbnz	r3, 8002f72 <__swsetup_r+0x16>
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	f000 f981 	bl	8003274 <__sinit>
 8002f72:	4b2e      	ldr	r3, [pc, #184]	; (800302c <__swsetup_r+0xd0>)
 8002f74:	429c      	cmp	r4, r3
 8002f76:	d10f      	bne.n	8002f98 <__swsetup_r+0x3c>
 8002f78:	686c      	ldr	r4, [r5, #4]
 8002f7a:	89a3      	ldrh	r3, [r4, #12]
 8002f7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f80:	0719      	lsls	r1, r3, #28
 8002f82:	d42c      	bmi.n	8002fde <__swsetup_r+0x82>
 8002f84:	06dd      	lsls	r5, r3, #27
 8002f86:	d411      	bmi.n	8002fac <__swsetup_r+0x50>
 8002f88:	2309      	movs	r3, #9
 8002f8a:	6033      	str	r3, [r6, #0]
 8002f8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f94:	81a3      	strh	r3, [r4, #12]
 8002f96:	e03e      	b.n	8003016 <__swsetup_r+0xba>
 8002f98:	4b25      	ldr	r3, [pc, #148]	; (8003030 <__swsetup_r+0xd4>)
 8002f9a:	429c      	cmp	r4, r3
 8002f9c:	d101      	bne.n	8002fa2 <__swsetup_r+0x46>
 8002f9e:	68ac      	ldr	r4, [r5, #8]
 8002fa0:	e7eb      	b.n	8002f7a <__swsetup_r+0x1e>
 8002fa2:	4b24      	ldr	r3, [pc, #144]	; (8003034 <__swsetup_r+0xd8>)
 8002fa4:	429c      	cmp	r4, r3
 8002fa6:	bf08      	it	eq
 8002fa8:	68ec      	ldreq	r4, [r5, #12]
 8002faa:	e7e6      	b.n	8002f7a <__swsetup_r+0x1e>
 8002fac:	0758      	lsls	r0, r3, #29
 8002fae:	d512      	bpl.n	8002fd6 <__swsetup_r+0x7a>
 8002fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fb2:	b141      	cbz	r1, 8002fc6 <__swsetup_r+0x6a>
 8002fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fb8:	4299      	cmp	r1, r3
 8002fba:	d002      	beq.n	8002fc2 <__swsetup_r+0x66>
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	f7ff fa83 	bl	80024c8 <_free_r>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	6363      	str	r3, [r4, #52]	; 0x34
 8002fc6:	89a3      	ldrh	r3, [r4, #12]
 8002fc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fcc:	81a3      	strh	r3, [r4, #12]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	6063      	str	r3, [r4, #4]
 8002fd2:	6923      	ldr	r3, [r4, #16]
 8002fd4:	6023      	str	r3, [r4, #0]
 8002fd6:	89a3      	ldrh	r3, [r4, #12]
 8002fd8:	f043 0308 	orr.w	r3, r3, #8
 8002fdc:	81a3      	strh	r3, [r4, #12]
 8002fde:	6923      	ldr	r3, [r4, #16]
 8002fe0:	b94b      	cbnz	r3, 8002ff6 <__swsetup_r+0x9a>
 8002fe2:	89a3      	ldrh	r3, [r4, #12]
 8002fe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fec:	d003      	beq.n	8002ff6 <__swsetup_r+0x9a>
 8002fee:	4621      	mov	r1, r4
 8002ff0:	4630      	mov	r0, r6
 8002ff2:	f000 fa05 	bl	8003400 <__smakebuf_r>
 8002ff6:	89a0      	ldrh	r0, [r4, #12]
 8002ff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ffc:	f010 0301 	ands.w	r3, r0, #1
 8003000:	d00a      	beq.n	8003018 <__swsetup_r+0xbc>
 8003002:	2300      	movs	r3, #0
 8003004:	60a3      	str	r3, [r4, #8]
 8003006:	6963      	ldr	r3, [r4, #20]
 8003008:	425b      	negs	r3, r3
 800300a:	61a3      	str	r3, [r4, #24]
 800300c:	6923      	ldr	r3, [r4, #16]
 800300e:	b943      	cbnz	r3, 8003022 <__swsetup_r+0xc6>
 8003010:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003014:	d1ba      	bne.n	8002f8c <__swsetup_r+0x30>
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	0781      	lsls	r1, r0, #30
 800301a:	bf58      	it	pl
 800301c:	6963      	ldrpl	r3, [r4, #20]
 800301e:	60a3      	str	r3, [r4, #8]
 8003020:	e7f4      	b.n	800300c <__swsetup_r+0xb0>
 8003022:	2000      	movs	r0, #0
 8003024:	e7f7      	b.n	8003016 <__swsetup_r+0xba>
 8003026:	bf00      	nop
 8003028:	2000000c 	.word	0x2000000c
 800302c:	080038ec 	.word	0x080038ec
 8003030:	0800390c 	.word	0x0800390c
 8003034:	080038cc 	.word	0x080038cc

08003038 <abort>:
 8003038:	2006      	movs	r0, #6
 800303a:	b508      	push	{r3, lr}
 800303c:	f000 fa56 	bl	80034ec <raise>
 8003040:	2001      	movs	r0, #1
 8003042:	f7fd fb80 	bl	8000746 <_exit>
	...

08003048 <__sflush_r>:
 8003048:	898a      	ldrh	r2, [r1, #12]
 800304a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304c:	4605      	mov	r5, r0
 800304e:	0710      	lsls	r0, r2, #28
 8003050:	460c      	mov	r4, r1
 8003052:	d457      	bmi.n	8003104 <__sflush_r+0xbc>
 8003054:	684b      	ldr	r3, [r1, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	dc04      	bgt.n	8003064 <__sflush_r+0x1c>
 800305a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	dc01      	bgt.n	8003064 <__sflush_r+0x1c>
 8003060:	2000      	movs	r0, #0
 8003062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003066:	2e00      	cmp	r6, #0
 8003068:	d0fa      	beq.n	8003060 <__sflush_r+0x18>
 800306a:	2300      	movs	r3, #0
 800306c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003070:	682f      	ldr	r7, [r5, #0]
 8003072:	602b      	str	r3, [r5, #0]
 8003074:	d032      	beq.n	80030dc <__sflush_r+0x94>
 8003076:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003078:	89a3      	ldrh	r3, [r4, #12]
 800307a:	075a      	lsls	r2, r3, #29
 800307c:	d505      	bpl.n	800308a <__sflush_r+0x42>
 800307e:	6863      	ldr	r3, [r4, #4]
 8003080:	1ac0      	subs	r0, r0, r3
 8003082:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003084:	b10b      	cbz	r3, 800308a <__sflush_r+0x42>
 8003086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003088:	1ac0      	subs	r0, r0, r3
 800308a:	2300      	movs	r3, #0
 800308c:	4602      	mov	r2, r0
 800308e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003090:	4628      	mov	r0, r5
 8003092:	6a21      	ldr	r1, [r4, #32]
 8003094:	47b0      	blx	r6
 8003096:	1c43      	adds	r3, r0, #1
 8003098:	89a3      	ldrh	r3, [r4, #12]
 800309a:	d106      	bne.n	80030aa <__sflush_r+0x62>
 800309c:	6829      	ldr	r1, [r5, #0]
 800309e:	291d      	cmp	r1, #29
 80030a0:	d82c      	bhi.n	80030fc <__sflush_r+0xb4>
 80030a2:	4a29      	ldr	r2, [pc, #164]	; (8003148 <__sflush_r+0x100>)
 80030a4:	40ca      	lsrs	r2, r1
 80030a6:	07d6      	lsls	r6, r2, #31
 80030a8:	d528      	bpl.n	80030fc <__sflush_r+0xb4>
 80030aa:	2200      	movs	r2, #0
 80030ac:	6062      	str	r2, [r4, #4]
 80030ae:	6922      	ldr	r2, [r4, #16]
 80030b0:	04d9      	lsls	r1, r3, #19
 80030b2:	6022      	str	r2, [r4, #0]
 80030b4:	d504      	bpl.n	80030c0 <__sflush_r+0x78>
 80030b6:	1c42      	adds	r2, r0, #1
 80030b8:	d101      	bne.n	80030be <__sflush_r+0x76>
 80030ba:	682b      	ldr	r3, [r5, #0]
 80030bc:	b903      	cbnz	r3, 80030c0 <__sflush_r+0x78>
 80030be:	6560      	str	r0, [r4, #84]	; 0x54
 80030c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030c2:	602f      	str	r7, [r5, #0]
 80030c4:	2900      	cmp	r1, #0
 80030c6:	d0cb      	beq.n	8003060 <__sflush_r+0x18>
 80030c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030cc:	4299      	cmp	r1, r3
 80030ce:	d002      	beq.n	80030d6 <__sflush_r+0x8e>
 80030d0:	4628      	mov	r0, r5
 80030d2:	f7ff f9f9 	bl	80024c8 <_free_r>
 80030d6:	2000      	movs	r0, #0
 80030d8:	6360      	str	r0, [r4, #52]	; 0x34
 80030da:	e7c2      	b.n	8003062 <__sflush_r+0x1a>
 80030dc:	6a21      	ldr	r1, [r4, #32]
 80030de:	2301      	movs	r3, #1
 80030e0:	4628      	mov	r0, r5
 80030e2:	47b0      	blx	r6
 80030e4:	1c41      	adds	r1, r0, #1
 80030e6:	d1c7      	bne.n	8003078 <__sflush_r+0x30>
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0c4      	beq.n	8003078 <__sflush_r+0x30>
 80030ee:	2b1d      	cmp	r3, #29
 80030f0:	d001      	beq.n	80030f6 <__sflush_r+0xae>
 80030f2:	2b16      	cmp	r3, #22
 80030f4:	d101      	bne.n	80030fa <__sflush_r+0xb2>
 80030f6:	602f      	str	r7, [r5, #0]
 80030f8:	e7b2      	b.n	8003060 <__sflush_r+0x18>
 80030fa:	89a3      	ldrh	r3, [r4, #12]
 80030fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003100:	81a3      	strh	r3, [r4, #12]
 8003102:	e7ae      	b.n	8003062 <__sflush_r+0x1a>
 8003104:	690f      	ldr	r7, [r1, #16]
 8003106:	2f00      	cmp	r7, #0
 8003108:	d0aa      	beq.n	8003060 <__sflush_r+0x18>
 800310a:	0793      	lsls	r3, r2, #30
 800310c:	bf18      	it	ne
 800310e:	2300      	movne	r3, #0
 8003110:	680e      	ldr	r6, [r1, #0]
 8003112:	bf08      	it	eq
 8003114:	694b      	ldreq	r3, [r1, #20]
 8003116:	1bf6      	subs	r6, r6, r7
 8003118:	600f      	str	r7, [r1, #0]
 800311a:	608b      	str	r3, [r1, #8]
 800311c:	2e00      	cmp	r6, #0
 800311e:	dd9f      	ble.n	8003060 <__sflush_r+0x18>
 8003120:	4633      	mov	r3, r6
 8003122:	463a      	mov	r2, r7
 8003124:	4628      	mov	r0, r5
 8003126:	6a21      	ldr	r1, [r4, #32]
 8003128:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800312c:	47e0      	blx	ip
 800312e:	2800      	cmp	r0, #0
 8003130:	dc06      	bgt.n	8003140 <__sflush_r+0xf8>
 8003132:	89a3      	ldrh	r3, [r4, #12]
 8003134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313c:	81a3      	strh	r3, [r4, #12]
 800313e:	e790      	b.n	8003062 <__sflush_r+0x1a>
 8003140:	4407      	add	r7, r0
 8003142:	1a36      	subs	r6, r6, r0
 8003144:	e7ea      	b.n	800311c <__sflush_r+0xd4>
 8003146:	bf00      	nop
 8003148:	20400001 	.word	0x20400001

0800314c <_fflush_r>:
 800314c:	b538      	push	{r3, r4, r5, lr}
 800314e:	690b      	ldr	r3, [r1, #16]
 8003150:	4605      	mov	r5, r0
 8003152:	460c      	mov	r4, r1
 8003154:	b913      	cbnz	r3, 800315c <_fflush_r+0x10>
 8003156:	2500      	movs	r5, #0
 8003158:	4628      	mov	r0, r5
 800315a:	bd38      	pop	{r3, r4, r5, pc}
 800315c:	b118      	cbz	r0, 8003166 <_fflush_r+0x1a>
 800315e:	6983      	ldr	r3, [r0, #24]
 8003160:	b90b      	cbnz	r3, 8003166 <_fflush_r+0x1a>
 8003162:	f000 f887 	bl	8003274 <__sinit>
 8003166:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <_fflush_r+0x6c>)
 8003168:	429c      	cmp	r4, r3
 800316a:	d11b      	bne.n	80031a4 <_fflush_r+0x58>
 800316c:	686c      	ldr	r4, [r5, #4]
 800316e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0ef      	beq.n	8003156 <_fflush_r+0xa>
 8003176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003178:	07d0      	lsls	r0, r2, #31
 800317a:	d404      	bmi.n	8003186 <_fflush_r+0x3a>
 800317c:	0599      	lsls	r1, r3, #22
 800317e:	d402      	bmi.n	8003186 <_fflush_r+0x3a>
 8003180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003182:	f000 f915 	bl	80033b0 <__retarget_lock_acquire_recursive>
 8003186:	4628      	mov	r0, r5
 8003188:	4621      	mov	r1, r4
 800318a:	f7ff ff5d 	bl	8003048 <__sflush_r>
 800318e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003190:	4605      	mov	r5, r0
 8003192:	07da      	lsls	r2, r3, #31
 8003194:	d4e0      	bmi.n	8003158 <_fflush_r+0xc>
 8003196:	89a3      	ldrh	r3, [r4, #12]
 8003198:	059b      	lsls	r3, r3, #22
 800319a:	d4dd      	bmi.n	8003158 <_fflush_r+0xc>
 800319c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800319e:	f000 f908 	bl	80033b2 <__retarget_lock_release_recursive>
 80031a2:	e7d9      	b.n	8003158 <_fflush_r+0xc>
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <_fflush_r+0x70>)
 80031a6:	429c      	cmp	r4, r3
 80031a8:	d101      	bne.n	80031ae <_fflush_r+0x62>
 80031aa:	68ac      	ldr	r4, [r5, #8]
 80031ac:	e7df      	b.n	800316e <_fflush_r+0x22>
 80031ae:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <_fflush_r+0x74>)
 80031b0:	429c      	cmp	r4, r3
 80031b2:	bf08      	it	eq
 80031b4:	68ec      	ldreq	r4, [r5, #12]
 80031b6:	e7da      	b.n	800316e <_fflush_r+0x22>
 80031b8:	080038ec 	.word	0x080038ec
 80031bc:	0800390c 	.word	0x0800390c
 80031c0:	080038cc 	.word	0x080038cc

080031c4 <std>:
 80031c4:	2300      	movs	r3, #0
 80031c6:	b510      	push	{r4, lr}
 80031c8:	4604      	mov	r4, r0
 80031ca:	e9c0 3300 	strd	r3, r3, [r0]
 80031ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031d2:	6083      	str	r3, [r0, #8]
 80031d4:	8181      	strh	r1, [r0, #12]
 80031d6:	6643      	str	r3, [r0, #100]	; 0x64
 80031d8:	81c2      	strh	r2, [r0, #14]
 80031da:	6183      	str	r3, [r0, #24]
 80031dc:	4619      	mov	r1, r3
 80031de:	2208      	movs	r2, #8
 80031e0:	305c      	adds	r0, #92	; 0x5c
 80031e2:	f7ff f955 	bl	8002490 <memset>
 80031e6:	4b05      	ldr	r3, [pc, #20]	; (80031fc <std+0x38>)
 80031e8:	6224      	str	r4, [r4, #32]
 80031ea:	6263      	str	r3, [r4, #36]	; 0x24
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <std+0x3c>)
 80031ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <std+0x40>)
 80031f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <std+0x44>)
 80031f6:	6323      	str	r3, [r4, #48]	; 0x30
 80031f8:	bd10      	pop	{r4, pc}
 80031fa:	bf00      	nop
 80031fc:	08003525 	.word	0x08003525
 8003200:	08003547 	.word	0x08003547
 8003204:	0800357f 	.word	0x0800357f
 8003208:	080035a3 	.word	0x080035a3

0800320c <_cleanup_r>:
 800320c:	4901      	ldr	r1, [pc, #4]	; (8003214 <_cleanup_r+0x8>)
 800320e:	f000 b8af 	b.w	8003370 <_fwalk_reent>
 8003212:	bf00      	nop
 8003214:	0800314d 	.word	0x0800314d

08003218 <__sfmoreglue>:
 8003218:	2268      	movs	r2, #104	; 0x68
 800321a:	b570      	push	{r4, r5, r6, lr}
 800321c:	1e4d      	subs	r5, r1, #1
 800321e:	4355      	muls	r5, r2
 8003220:	460e      	mov	r6, r1
 8003222:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003226:	f7ff f9b7 	bl	8002598 <_malloc_r>
 800322a:	4604      	mov	r4, r0
 800322c:	b140      	cbz	r0, 8003240 <__sfmoreglue+0x28>
 800322e:	2100      	movs	r1, #0
 8003230:	e9c0 1600 	strd	r1, r6, [r0]
 8003234:	300c      	adds	r0, #12
 8003236:	60a0      	str	r0, [r4, #8]
 8003238:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800323c:	f7ff f928 	bl	8002490 <memset>
 8003240:	4620      	mov	r0, r4
 8003242:	bd70      	pop	{r4, r5, r6, pc}

08003244 <__sfp_lock_acquire>:
 8003244:	4801      	ldr	r0, [pc, #4]	; (800324c <__sfp_lock_acquire+0x8>)
 8003246:	f000 b8b3 	b.w	80033b0 <__retarget_lock_acquire_recursive>
 800324a:	bf00      	nop
 800324c:	2000014d 	.word	0x2000014d

08003250 <__sfp_lock_release>:
 8003250:	4801      	ldr	r0, [pc, #4]	; (8003258 <__sfp_lock_release+0x8>)
 8003252:	f000 b8ae 	b.w	80033b2 <__retarget_lock_release_recursive>
 8003256:	bf00      	nop
 8003258:	2000014d 	.word	0x2000014d

0800325c <__sinit_lock_acquire>:
 800325c:	4801      	ldr	r0, [pc, #4]	; (8003264 <__sinit_lock_acquire+0x8>)
 800325e:	f000 b8a7 	b.w	80033b0 <__retarget_lock_acquire_recursive>
 8003262:	bf00      	nop
 8003264:	2000014e 	.word	0x2000014e

08003268 <__sinit_lock_release>:
 8003268:	4801      	ldr	r0, [pc, #4]	; (8003270 <__sinit_lock_release+0x8>)
 800326a:	f000 b8a2 	b.w	80033b2 <__retarget_lock_release_recursive>
 800326e:	bf00      	nop
 8003270:	2000014e 	.word	0x2000014e

08003274 <__sinit>:
 8003274:	b510      	push	{r4, lr}
 8003276:	4604      	mov	r4, r0
 8003278:	f7ff fff0 	bl	800325c <__sinit_lock_acquire>
 800327c:	69a3      	ldr	r3, [r4, #24]
 800327e:	b11b      	cbz	r3, 8003288 <__sinit+0x14>
 8003280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003284:	f7ff bff0 	b.w	8003268 <__sinit_lock_release>
 8003288:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800328c:	6523      	str	r3, [r4, #80]	; 0x50
 800328e:	4b13      	ldr	r3, [pc, #76]	; (80032dc <__sinit+0x68>)
 8003290:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <__sinit+0x6c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	62a2      	str	r2, [r4, #40]	; 0x28
 8003296:	42a3      	cmp	r3, r4
 8003298:	bf08      	it	eq
 800329a:	2301      	moveq	r3, #1
 800329c:	4620      	mov	r0, r4
 800329e:	bf08      	it	eq
 80032a0:	61a3      	streq	r3, [r4, #24]
 80032a2:	f000 f81f 	bl	80032e4 <__sfp>
 80032a6:	6060      	str	r0, [r4, #4]
 80032a8:	4620      	mov	r0, r4
 80032aa:	f000 f81b 	bl	80032e4 <__sfp>
 80032ae:	60a0      	str	r0, [r4, #8]
 80032b0:	4620      	mov	r0, r4
 80032b2:	f000 f817 	bl	80032e4 <__sfp>
 80032b6:	2200      	movs	r2, #0
 80032b8:	2104      	movs	r1, #4
 80032ba:	60e0      	str	r0, [r4, #12]
 80032bc:	6860      	ldr	r0, [r4, #4]
 80032be:	f7ff ff81 	bl	80031c4 <std>
 80032c2:	2201      	movs	r2, #1
 80032c4:	2109      	movs	r1, #9
 80032c6:	68a0      	ldr	r0, [r4, #8]
 80032c8:	f7ff ff7c 	bl	80031c4 <std>
 80032cc:	2202      	movs	r2, #2
 80032ce:	2112      	movs	r1, #18
 80032d0:	68e0      	ldr	r0, [r4, #12]
 80032d2:	f7ff ff77 	bl	80031c4 <std>
 80032d6:	2301      	movs	r3, #1
 80032d8:	61a3      	str	r3, [r4, #24]
 80032da:	e7d1      	b.n	8003280 <__sinit+0xc>
 80032dc:	080036e4 	.word	0x080036e4
 80032e0:	0800320d 	.word	0x0800320d

080032e4 <__sfp>:
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e6:	4607      	mov	r7, r0
 80032e8:	f7ff ffac 	bl	8003244 <__sfp_lock_acquire>
 80032ec:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <__sfp+0x84>)
 80032ee:	681e      	ldr	r6, [r3, #0]
 80032f0:	69b3      	ldr	r3, [r6, #24]
 80032f2:	b913      	cbnz	r3, 80032fa <__sfp+0x16>
 80032f4:	4630      	mov	r0, r6
 80032f6:	f7ff ffbd 	bl	8003274 <__sinit>
 80032fa:	3648      	adds	r6, #72	; 0x48
 80032fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003300:	3b01      	subs	r3, #1
 8003302:	d503      	bpl.n	800330c <__sfp+0x28>
 8003304:	6833      	ldr	r3, [r6, #0]
 8003306:	b30b      	cbz	r3, 800334c <__sfp+0x68>
 8003308:	6836      	ldr	r6, [r6, #0]
 800330a:	e7f7      	b.n	80032fc <__sfp+0x18>
 800330c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003310:	b9d5      	cbnz	r5, 8003348 <__sfp+0x64>
 8003312:	4b16      	ldr	r3, [pc, #88]	; (800336c <__sfp+0x88>)
 8003314:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003318:	60e3      	str	r3, [r4, #12]
 800331a:	6665      	str	r5, [r4, #100]	; 0x64
 800331c:	f000 f847 	bl	80033ae <__retarget_lock_init_recursive>
 8003320:	f7ff ff96 	bl	8003250 <__sfp_lock_release>
 8003324:	2208      	movs	r2, #8
 8003326:	4629      	mov	r1, r5
 8003328:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800332c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003330:	6025      	str	r5, [r4, #0]
 8003332:	61a5      	str	r5, [r4, #24]
 8003334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003338:	f7ff f8aa 	bl	8002490 <memset>
 800333c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003344:	4620      	mov	r0, r4
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003348:	3468      	adds	r4, #104	; 0x68
 800334a:	e7d9      	b.n	8003300 <__sfp+0x1c>
 800334c:	2104      	movs	r1, #4
 800334e:	4638      	mov	r0, r7
 8003350:	f7ff ff62 	bl	8003218 <__sfmoreglue>
 8003354:	4604      	mov	r4, r0
 8003356:	6030      	str	r0, [r6, #0]
 8003358:	2800      	cmp	r0, #0
 800335a:	d1d5      	bne.n	8003308 <__sfp+0x24>
 800335c:	f7ff ff78 	bl	8003250 <__sfp_lock_release>
 8003360:	230c      	movs	r3, #12
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	e7ee      	b.n	8003344 <__sfp+0x60>
 8003366:	bf00      	nop
 8003368:	080036e4 	.word	0x080036e4
 800336c:	ffff0001 	.word	0xffff0001

08003370 <_fwalk_reent>:
 8003370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003374:	4606      	mov	r6, r0
 8003376:	4688      	mov	r8, r1
 8003378:	2700      	movs	r7, #0
 800337a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800337e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003382:	f1b9 0901 	subs.w	r9, r9, #1
 8003386:	d505      	bpl.n	8003394 <_fwalk_reent+0x24>
 8003388:	6824      	ldr	r4, [r4, #0]
 800338a:	2c00      	cmp	r4, #0
 800338c:	d1f7      	bne.n	800337e <_fwalk_reent+0xe>
 800338e:	4638      	mov	r0, r7
 8003390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003394:	89ab      	ldrh	r3, [r5, #12]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d907      	bls.n	80033aa <_fwalk_reent+0x3a>
 800339a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800339e:	3301      	adds	r3, #1
 80033a0:	d003      	beq.n	80033aa <_fwalk_reent+0x3a>
 80033a2:	4629      	mov	r1, r5
 80033a4:	4630      	mov	r0, r6
 80033a6:	47c0      	blx	r8
 80033a8:	4307      	orrs	r7, r0
 80033aa:	3568      	adds	r5, #104	; 0x68
 80033ac:	e7e9      	b.n	8003382 <_fwalk_reent+0x12>

080033ae <__retarget_lock_init_recursive>:
 80033ae:	4770      	bx	lr

080033b0 <__retarget_lock_acquire_recursive>:
 80033b0:	4770      	bx	lr

080033b2 <__retarget_lock_release_recursive>:
 80033b2:	4770      	bx	lr

080033b4 <__swhatbuf_r>:
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	460e      	mov	r6, r1
 80033b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033bc:	4614      	mov	r4, r2
 80033be:	2900      	cmp	r1, #0
 80033c0:	461d      	mov	r5, r3
 80033c2:	b096      	sub	sp, #88	; 0x58
 80033c4:	da08      	bge.n	80033d8 <__swhatbuf_r+0x24>
 80033c6:	2200      	movs	r2, #0
 80033c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80033cc:	602a      	str	r2, [r5, #0]
 80033ce:	061a      	lsls	r2, r3, #24
 80033d0:	d410      	bmi.n	80033f4 <__swhatbuf_r+0x40>
 80033d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033d6:	e00e      	b.n	80033f6 <__swhatbuf_r+0x42>
 80033d8:	466a      	mov	r2, sp
 80033da:	f000 f909 	bl	80035f0 <_fstat_r>
 80033de:	2800      	cmp	r0, #0
 80033e0:	dbf1      	blt.n	80033c6 <__swhatbuf_r+0x12>
 80033e2:	9a01      	ldr	r2, [sp, #4]
 80033e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033ec:	425a      	negs	r2, r3
 80033ee:	415a      	adcs	r2, r3
 80033f0:	602a      	str	r2, [r5, #0]
 80033f2:	e7ee      	b.n	80033d2 <__swhatbuf_r+0x1e>
 80033f4:	2340      	movs	r3, #64	; 0x40
 80033f6:	2000      	movs	r0, #0
 80033f8:	6023      	str	r3, [r4, #0]
 80033fa:	b016      	add	sp, #88	; 0x58
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08003400 <__smakebuf_r>:
 8003400:	898b      	ldrh	r3, [r1, #12]
 8003402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003404:	079d      	lsls	r5, r3, #30
 8003406:	4606      	mov	r6, r0
 8003408:	460c      	mov	r4, r1
 800340a:	d507      	bpl.n	800341c <__smakebuf_r+0x1c>
 800340c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003410:	6023      	str	r3, [r4, #0]
 8003412:	6123      	str	r3, [r4, #16]
 8003414:	2301      	movs	r3, #1
 8003416:	6163      	str	r3, [r4, #20]
 8003418:	b002      	add	sp, #8
 800341a:	bd70      	pop	{r4, r5, r6, pc}
 800341c:	466a      	mov	r2, sp
 800341e:	ab01      	add	r3, sp, #4
 8003420:	f7ff ffc8 	bl	80033b4 <__swhatbuf_r>
 8003424:	9900      	ldr	r1, [sp, #0]
 8003426:	4605      	mov	r5, r0
 8003428:	4630      	mov	r0, r6
 800342a:	f7ff f8b5 	bl	8002598 <_malloc_r>
 800342e:	b948      	cbnz	r0, 8003444 <__smakebuf_r+0x44>
 8003430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003434:	059a      	lsls	r2, r3, #22
 8003436:	d4ef      	bmi.n	8003418 <__smakebuf_r+0x18>
 8003438:	f023 0303 	bic.w	r3, r3, #3
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	81a3      	strh	r3, [r4, #12]
 8003442:	e7e3      	b.n	800340c <__smakebuf_r+0xc>
 8003444:	4b0d      	ldr	r3, [pc, #52]	; (800347c <__smakebuf_r+0x7c>)
 8003446:	62b3      	str	r3, [r6, #40]	; 0x28
 8003448:	89a3      	ldrh	r3, [r4, #12]
 800344a:	6020      	str	r0, [r4, #0]
 800344c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003450:	81a3      	strh	r3, [r4, #12]
 8003452:	9b00      	ldr	r3, [sp, #0]
 8003454:	6120      	str	r0, [r4, #16]
 8003456:	6163      	str	r3, [r4, #20]
 8003458:	9b01      	ldr	r3, [sp, #4]
 800345a:	b15b      	cbz	r3, 8003474 <__smakebuf_r+0x74>
 800345c:	4630      	mov	r0, r6
 800345e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003462:	f000 f8d7 	bl	8003614 <_isatty_r>
 8003466:	b128      	cbz	r0, 8003474 <__smakebuf_r+0x74>
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	f023 0303 	bic.w	r3, r3, #3
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	81a3      	strh	r3, [r4, #12]
 8003474:	89a0      	ldrh	r0, [r4, #12]
 8003476:	4305      	orrs	r5, r0
 8003478:	81a5      	strh	r5, [r4, #12]
 800347a:	e7cd      	b.n	8003418 <__smakebuf_r+0x18>
 800347c:	0800320d 	.word	0x0800320d

08003480 <memchr>:
 8003480:	4603      	mov	r3, r0
 8003482:	b510      	push	{r4, lr}
 8003484:	b2c9      	uxtb	r1, r1
 8003486:	4402      	add	r2, r0
 8003488:	4293      	cmp	r3, r2
 800348a:	4618      	mov	r0, r3
 800348c:	d101      	bne.n	8003492 <memchr+0x12>
 800348e:	2000      	movs	r0, #0
 8003490:	e003      	b.n	800349a <memchr+0x1a>
 8003492:	7804      	ldrb	r4, [r0, #0]
 8003494:	3301      	adds	r3, #1
 8003496:	428c      	cmp	r4, r1
 8003498:	d1f6      	bne.n	8003488 <memchr+0x8>
 800349a:	bd10      	pop	{r4, pc}

0800349c <_raise_r>:
 800349c:	291f      	cmp	r1, #31
 800349e:	b538      	push	{r3, r4, r5, lr}
 80034a0:	4604      	mov	r4, r0
 80034a2:	460d      	mov	r5, r1
 80034a4:	d904      	bls.n	80034b0 <_raise_r+0x14>
 80034a6:	2316      	movs	r3, #22
 80034a8:	6003      	str	r3, [r0, #0]
 80034aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034ae:	bd38      	pop	{r3, r4, r5, pc}
 80034b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80034b2:	b112      	cbz	r2, 80034ba <_raise_r+0x1e>
 80034b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80034b8:	b94b      	cbnz	r3, 80034ce <_raise_r+0x32>
 80034ba:	4620      	mov	r0, r4
 80034bc:	f000 f830 	bl	8003520 <_getpid_r>
 80034c0:	462a      	mov	r2, r5
 80034c2:	4601      	mov	r1, r0
 80034c4:	4620      	mov	r0, r4
 80034c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034ca:	f000 b817 	b.w	80034fc <_kill_r>
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d00a      	beq.n	80034e8 <_raise_r+0x4c>
 80034d2:	1c59      	adds	r1, r3, #1
 80034d4:	d103      	bne.n	80034de <_raise_r+0x42>
 80034d6:	2316      	movs	r3, #22
 80034d8:	6003      	str	r3, [r0, #0]
 80034da:	2001      	movs	r0, #1
 80034dc:	e7e7      	b.n	80034ae <_raise_r+0x12>
 80034de:	2400      	movs	r4, #0
 80034e0:	4628      	mov	r0, r5
 80034e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80034e6:	4798      	blx	r3
 80034e8:	2000      	movs	r0, #0
 80034ea:	e7e0      	b.n	80034ae <_raise_r+0x12>

080034ec <raise>:
 80034ec:	4b02      	ldr	r3, [pc, #8]	; (80034f8 <raise+0xc>)
 80034ee:	4601      	mov	r1, r0
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	f7ff bfd3 	b.w	800349c <_raise_r>
 80034f6:	bf00      	nop
 80034f8:	2000000c 	.word	0x2000000c

080034fc <_kill_r>:
 80034fc:	b538      	push	{r3, r4, r5, lr}
 80034fe:	2300      	movs	r3, #0
 8003500:	4d06      	ldr	r5, [pc, #24]	; (800351c <_kill_r+0x20>)
 8003502:	4604      	mov	r4, r0
 8003504:	4608      	mov	r0, r1
 8003506:	4611      	mov	r1, r2
 8003508:	602b      	str	r3, [r5, #0]
 800350a:	f7fd f90c 	bl	8000726 <_kill>
 800350e:	1c43      	adds	r3, r0, #1
 8003510:	d102      	bne.n	8003518 <_kill_r+0x1c>
 8003512:	682b      	ldr	r3, [r5, #0]
 8003514:	b103      	cbz	r3, 8003518 <_kill_r+0x1c>
 8003516:	6023      	str	r3, [r4, #0]
 8003518:	bd38      	pop	{r3, r4, r5, pc}
 800351a:	bf00      	nop
 800351c:	20000148 	.word	0x20000148

08003520 <_getpid_r>:
 8003520:	f7fd b8fa 	b.w	8000718 <_getpid>

08003524 <__sread>:
 8003524:	b510      	push	{r4, lr}
 8003526:	460c      	mov	r4, r1
 8003528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800352c:	f000 f894 	bl	8003658 <_read_r>
 8003530:	2800      	cmp	r0, #0
 8003532:	bfab      	itete	ge
 8003534:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003536:	89a3      	ldrhlt	r3, [r4, #12]
 8003538:	181b      	addge	r3, r3, r0
 800353a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800353e:	bfac      	ite	ge
 8003540:	6563      	strge	r3, [r4, #84]	; 0x54
 8003542:	81a3      	strhlt	r3, [r4, #12]
 8003544:	bd10      	pop	{r4, pc}

08003546 <__swrite>:
 8003546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800354a:	461f      	mov	r7, r3
 800354c:	898b      	ldrh	r3, [r1, #12]
 800354e:	4605      	mov	r5, r0
 8003550:	05db      	lsls	r3, r3, #23
 8003552:	460c      	mov	r4, r1
 8003554:	4616      	mov	r6, r2
 8003556:	d505      	bpl.n	8003564 <__swrite+0x1e>
 8003558:	2302      	movs	r3, #2
 800355a:	2200      	movs	r2, #0
 800355c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003560:	f000 f868 	bl	8003634 <_lseek_r>
 8003564:	89a3      	ldrh	r3, [r4, #12]
 8003566:	4632      	mov	r2, r6
 8003568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800356c:	81a3      	strh	r3, [r4, #12]
 800356e:	4628      	mov	r0, r5
 8003570:	463b      	mov	r3, r7
 8003572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800357a:	f000 b817 	b.w	80035ac <_write_r>

0800357e <__sseek>:
 800357e:	b510      	push	{r4, lr}
 8003580:	460c      	mov	r4, r1
 8003582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003586:	f000 f855 	bl	8003634 <_lseek_r>
 800358a:	1c43      	adds	r3, r0, #1
 800358c:	89a3      	ldrh	r3, [r4, #12]
 800358e:	bf15      	itete	ne
 8003590:	6560      	strne	r0, [r4, #84]	; 0x54
 8003592:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003596:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800359a:	81a3      	strheq	r3, [r4, #12]
 800359c:	bf18      	it	ne
 800359e:	81a3      	strhne	r3, [r4, #12]
 80035a0:	bd10      	pop	{r4, pc}

080035a2 <__sclose>:
 80035a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035a6:	f000 b813 	b.w	80035d0 <_close_r>
	...

080035ac <_write_r>:
 80035ac:	b538      	push	{r3, r4, r5, lr}
 80035ae:	4604      	mov	r4, r0
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	2200      	movs	r2, #0
 80035b6:	4d05      	ldr	r5, [pc, #20]	; (80035cc <_write_r+0x20>)
 80035b8:	602a      	str	r2, [r5, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f7fd f8ea 	bl	8000794 <_write>
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	d102      	bne.n	80035ca <_write_r+0x1e>
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	b103      	cbz	r3, 80035ca <_write_r+0x1e>
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
 80035cc:	20000148 	.word	0x20000148

080035d0 <_close_r>:
 80035d0:	b538      	push	{r3, r4, r5, lr}
 80035d2:	2300      	movs	r3, #0
 80035d4:	4d05      	ldr	r5, [pc, #20]	; (80035ec <_close_r+0x1c>)
 80035d6:	4604      	mov	r4, r0
 80035d8:	4608      	mov	r0, r1
 80035da:	602b      	str	r3, [r5, #0]
 80035dc:	f7fd f8f6 	bl	80007cc <_close>
 80035e0:	1c43      	adds	r3, r0, #1
 80035e2:	d102      	bne.n	80035ea <_close_r+0x1a>
 80035e4:	682b      	ldr	r3, [r5, #0]
 80035e6:	b103      	cbz	r3, 80035ea <_close_r+0x1a>
 80035e8:	6023      	str	r3, [r4, #0]
 80035ea:	bd38      	pop	{r3, r4, r5, pc}
 80035ec:	20000148 	.word	0x20000148

080035f0 <_fstat_r>:
 80035f0:	b538      	push	{r3, r4, r5, lr}
 80035f2:	2300      	movs	r3, #0
 80035f4:	4d06      	ldr	r5, [pc, #24]	; (8003610 <_fstat_r+0x20>)
 80035f6:	4604      	mov	r4, r0
 80035f8:	4608      	mov	r0, r1
 80035fa:	4611      	mov	r1, r2
 80035fc:	602b      	str	r3, [r5, #0]
 80035fe:	f7fd f8f0 	bl	80007e2 <_fstat>
 8003602:	1c43      	adds	r3, r0, #1
 8003604:	d102      	bne.n	800360c <_fstat_r+0x1c>
 8003606:	682b      	ldr	r3, [r5, #0]
 8003608:	b103      	cbz	r3, 800360c <_fstat_r+0x1c>
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	bd38      	pop	{r3, r4, r5, pc}
 800360e:	bf00      	nop
 8003610:	20000148 	.word	0x20000148

08003614 <_isatty_r>:
 8003614:	b538      	push	{r3, r4, r5, lr}
 8003616:	2300      	movs	r3, #0
 8003618:	4d05      	ldr	r5, [pc, #20]	; (8003630 <_isatty_r+0x1c>)
 800361a:	4604      	mov	r4, r0
 800361c:	4608      	mov	r0, r1
 800361e:	602b      	str	r3, [r5, #0]
 8003620:	f7fd f8ee 	bl	8000800 <_isatty>
 8003624:	1c43      	adds	r3, r0, #1
 8003626:	d102      	bne.n	800362e <_isatty_r+0x1a>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	b103      	cbz	r3, 800362e <_isatty_r+0x1a>
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	bd38      	pop	{r3, r4, r5, pc}
 8003630:	20000148 	.word	0x20000148

08003634 <_lseek_r>:
 8003634:	b538      	push	{r3, r4, r5, lr}
 8003636:	4604      	mov	r4, r0
 8003638:	4608      	mov	r0, r1
 800363a:	4611      	mov	r1, r2
 800363c:	2200      	movs	r2, #0
 800363e:	4d05      	ldr	r5, [pc, #20]	; (8003654 <_lseek_r+0x20>)
 8003640:	602a      	str	r2, [r5, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	f7fd f8e6 	bl	8000814 <_lseek>
 8003648:	1c43      	adds	r3, r0, #1
 800364a:	d102      	bne.n	8003652 <_lseek_r+0x1e>
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	b103      	cbz	r3, 8003652 <_lseek_r+0x1e>
 8003650:	6023      	str	r3, [r4, #0]
 8003652:	bd38      	pop	{r3, r4, r5, pc}
 8003654:	20000148 	.word	0x20000148

08003658 <_read_r>:
 8003658:	b538      	push	{r3, r4, r5, lr}
 800365a:	4604      	mov	r4, r0
 800365c:	4608      	mov	r0, r1
 800365e:	4611      	mov	r1, r2
 8003660:	2200      	movs	r2, #0
 8003662:	4d05      	ldr	r5, [pc, #20]	; (8003678 <_read_r+0x20>)
 8003664:	602a      	str	r2, [r5, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	f7fd f877 	bl	800075a <_read>
 800366c:	1c43      	adds	r3, r0, #1
 800366e:	d102      	bne.n	8003676 <_read_r+0x1e>
 8003670:	682b      	ldr	r3, [r5, #0]
 8003672:	b103      	cbz	r3, 8003676 <_read_r+0x1e>
 8003674:	6023      	str	r3, [r4, #0]
 8003676:	bd38      	pop	{r3, r4, r5, pc}
 8003678:	20000148 	.word	0x20000148

0800367c <_init>:
 800367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367e:	bf00      	nop
 8003680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003682:	bc08      	pop	{r3}
 8003684:	469e      	mov	lr, r3
 8003686:	4770      	bx	lr

08003688 <_fini>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	bf00      	nop
 800368c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368e:	bc08      	pop	{r3}
 8003690:	469e      	mov	lr, r3
 8003692:	4770      	bx	lr
