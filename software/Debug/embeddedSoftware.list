
embeddedSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080035ec  080035ec  000135ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003884  08003884  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003884  08003884  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003884  08003884  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003884  08003884  00013884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003888  08003888  00013888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800388c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  080038fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080038fc  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e5f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4f  00000000  00000000  00026ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  00028c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  00029460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184a5  00000000  00000000  00029b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a948  00000000  00000000  0004203d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083955  00000000  00000000  0004c985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d02da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000286c  00000000  00000000  000d032c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080035d4 	.word	0x080035d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080035d4 	.word	0x080035d4

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <UserSystemInit>:

#include "system.h"

struct System controlSystem;

void UserSystemInit(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	controlSystem.ledOnTime = 300;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <UserSystemInit+0x38>)
 8000176:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800017a:	605a      	str	r2, [r3, #4]
	controlSystem.ledOffTime = 700;
 800017c:	4b0a      	ldr	r3, [pc, #40]	; (80001a8 <UserSystemInit+0x38>)
 800017e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000182:	609a      	str	r2, [r3, #8]

	controlSystem.echoType = 1;	// echo yapıyor
 8000184:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <UserSystemInit+0x38>)
 8000186:	2201      	movs	r2, #1
 8000188:	751a      	strb	r2, [r3, #20]
	controlSystem.systemState = 1;
 800018a:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <UserSystemInit+0x38>)
 800018c:	2201      	movs	r2, #1
 800018e:	755a      	strb	r2, [r3, #21]

	controlSystem.oldLedTime = 0;
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <UserSystemInit+0x38>)
 8000192:	2200      	movs	r2, #0
 8000194:	62da      	str	r2, [r3, #44]	; 0x2c
	controlSystem.ledState = 0;
 8000196:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <UserSystemInit+0x38>)
 8000198:	2200      	movs	r2, #0
 800019a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800019e:	bf00      	nop
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	2000008c 	.word	0x2000008c

080001ac <task2>:
extern struct uartDataStr uartData;

char *parsedData[3];
int ledTime;

void task2(){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0

	getUartMessage(&uartData);
 80001b0:	4804      	ldr	r0, [pc, #16]	; (80001c4 <task2+0x18>)
 80001b2:	f000 f8b9 	bl	8000328 <getUartMessage>
	dataParser();
 80001b6:	f000 f817 	bl	80001e8 <dataParser>
	echoTask();
 80001ba:	f000 f805 	bl	80001c8 <echoTask>

}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	200000cc 	.word	0x200000cc

080001c8 <echoTask>:

void echoTask(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	if(controlSystem.echoType == 1){
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <echoTask+0x18>)
 80001ce:	7d1b      	ldrb	r3, [r3, #20]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d102      	bne.n	80001da <echoTask+0x12>
		echoMessage(&uartData);
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <echoTask+0x1c>)
 80001d6:	f000 f8ed 	bl	80003b4 <echoMessage>
	}
}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	2000008c 	.word	0x2000008c
 80001e4:	200000cc 	.word	0x200000cc

080001e8 <dataParser>:

void dataParser(){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	// dataların parse edilmesi ve ilgili ayarların yapılması
	if(!strcmp(controlSystem.uartMessageData, "stop\r\n\0")){
 80001ee:	4b32      	ldr	r3, [pc, #200]	; (80002b8 <dataParser+0xd0>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4932      	ldr	r1, [pc, #200]	; (80002bc <dataParser+0xd4>)
 80001f4:	4618      	mov	r0, r3
 80001f6:	f7ff ffa9 	bl	800014c <strcmp>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d106      	bne.n	800020e <dataParser+0x26>
		controlSystem.echoType = 0;
 8000200:	4b2d      	ldr	r3, [pc, #180]	; (80002b8 <dataParser+0xd0>)
 8000202:	2200      	movs	r2, #0
 8000204:	751a      	strb	r2, [r3, #20]
		controlSystem.systemState = 0;
 8000206:	4b2c      	ldr	r3, [pc, #176]	; (80002b8 <dataParser+0xd0>)
 8000208:	2200      	movs	r2, #0
 800020a:	755a      	strb	r2, [r3, #21]
		}
	}
	else{
		// TODO:
	}
}
 800020c:	e050      	b.n	80002b0 <dataParser+0xc8>
	else if(!strcmp(controlSystem.uartMessageData, "start\r\n\0") || controlSystem.systemState == 1){
 800020e:	4b2a      	ldr	r3, [pc, #168]	; (80002b8 <dataParser+0xd0>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	492b      	ldr	r1, [pc, #172]	; (80002c0 <dataParser+0xd8>)
 8000214:	4618      	mov	r0, r3
 8000216:	f7ff ff99 	bl	800014c <strcmp>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d003      	beq.n	8000228 <dataParser+0x40>
 8000220:	4b25      	ldr	r3, [pc, #148]	; (80002b8 <dataParser+0xd0>)
 8000222:	7d5b      	ldrb	r3, [r3, #21]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d143      	bne.n	80002b0 <dataParser+0xc8>
		controlSystem.echoType = 1;
 8000228:	4b23      	ldr	r3, [pc, #140]	; (80002b8 <dataParser+0xd0>)
 800022a:	2201      	movs	r2, #1
 800022c:	751a      	strb	r2, [r3, #20]
		controlSystem.systemState = 1;
 800022e:	4b22      	ldr	r3, [pc, #136]	; (80002b8 <dataParser+0xd0>)
 8000230:	2201      	movs	r2, #1
 8000232:	755a      	strb	r2, [r3, #21]
		int i = 0;
 8000234:	2300      	movs	r3, #0
 8000236:	607b      	str	r3, [r7, #4]
		char *p = strtok(controlSystem.uartMessageData, "=");
 8000238:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <dataParser+0xd0>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4921      	ldr	r1, [pc, #132]	; (80002c4 <dataParser+0xdc>)
 800023e:	4618      	mov	r0, r3
 8000240:	f002 f9da 	bl	80025f8 <strtok>
 8000244:	6038      	str	r0, [r7, #0]
		while(p != NULL){
 8000246:	e00b      	b.n	8000260 <dataParser+0x78>
			parsedData[i++] = p;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	1c5a      	adds	r2, r3, #1
 800024c:	607a      	str	r2, [r7, #4]
 800024e:	491e      	ldr	r1, [pc, #120]	; (80002c8 <dataParser+0xe0>)
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p = strtok(NULL, "=");
 8000256:	491b      	ldr	r1, [pc, #108]	; (80002c4 <dataParser+0xdc>)
 8000258:	2000      	movs	r0, #0
 800025a:	f002 f9cd 	bl	80025f8 <strtok>
 800025e:	6038      	str	r0, [r7, #0]
		while(p != NULL){
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d1f0      	bne.n	8000248 <dataParser+0x60>
		if(!strcmp(parsedData[0], "ledon")){
 8000266:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <dataParser+0xe0>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4918      	ldr	r1, [pc, #96]	; (80002cc <dataParser+0xe4>)
 800026c:	4618      	mov	r0, r3
 800026e:	f7ff ff6d 	bl	800014c <strcmp>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d109      	bne.n	800028c <dataParser+0xa4>
			controlSystem.ledOnTime =  atoi(parsedData[1]);
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <dataParser+0xe0>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4618      	mov	r0, r3
 800027e:	f002 f86d 	bl	800235c <atoi>
 8000282:	4603      	mov	r3, r0
 8000284:	461a      	mov	r2, r3
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <dataParser+0xd0>)
 8000288:	605a      	str	r2, [r3, #4]
}
 800028a:	e011      	b.n	80002b0 <dataParser+0xc8>
		else if(!strcmp(parsedData[0], "ledoff")){
 800028c:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <dataParser+0xe0>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	490f      	ldr	r1, [pc, #60]	; (80002d0 <dataParser+0xe8>)
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ff5a 	bl	800014c <strcmp>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d108      	bne.n	80002b0 <dataParser+0xc8>
			controlSystem.ledOffTime = atoi(parsedData[1]);
 800029e:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <dataParser+0xe0>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 f85a 	bl	800235c <atoi>
 80002a8:	4603      	mov	r3, r0
 80002aa:	461a      	mov	r2, r3
 80002ac:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <dataParser+0xd0>)
 80002ae:	609a      	str	r2, [r3, #8]
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	2000008c 	.word	0x2000008c
 80002bc:	080035ec 	.word	0x080035ec
 80002c0:	080035f4 	.word	0x080035f4
 80002c4:	08003600 	.word	0x08003600
 80002c8:	200000c0 	.word	0x200000c0
 80002cc:	08003604 	.word	0x08003604
 80002d0:	0800360c 	.word	0x0800360c

080002d4 <uartDataStorage>:
#include "system.h"

struct uartDataStr uartData;
extern struct System controlSystem;

void uartDataStorage(uint8_t *rxTempBuffer){
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]

	uartData.rxBuffer[uartData.rxIndex] = rxTempBuffer[0];
 80002dc:	4b11      	ldr	r3, [pc, #68]	; (8000324 <uartDataStorage+0x50>)
 80002de:	7d1b      	ldrb	r3, [r3, #20]
 80002e0:	461a      	mov	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	7819      	ldrb	r1, [r3, #0]
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <uartDataStorage+0x50>)
 80002e8:	5499      	strb	r1, [r3, r2]

	if(uartData.rxBuffer[uartData.rxIndex] == '\n'){	/* bir data gelmiş demektir. buffer'da okunması gereken data var. */
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <uartDataStorage+0x50>)
 80002ec:	7d1b      	ldrb	r3, [r3, #20]
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <uartDataStorage+0x50>)
 80002f2:	5c9b      	ldrb	r3, [r3, r2]
 80002f4:	2b0a      	cmp	r3, #10
 80002f6:	d102      	bne.n	80002fe <uartDataStorage+0x2a>
		uartData.newDataFlag = 1;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <uartDataStorage+0x50>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	759a      	strb	r2, [r3, #22]
	}

	uartData.rxIndex++;
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <uartDataStorage+0x50>)
 8000300:	7d1b      	ldrb	r3, [r3, #20]
 8000302:	3301      	adds	r3, #1
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <uartDataStorage+0x50>)
 8000308:	751a      	strb	r2, [r3, #20]

	if(uartData.rxIndex == (rxBufferSize-1))
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <uartDataStorage+0x50>)
 800030c:	7d1b      	ldrb	r3, [r3, #20]
 800030e:	2b13      	cmp	r3, #19
 8000310:	d102      	bne.n	8000318 <uartDataStorage+0x44>
		uartData.rxIndex = 0;
 8000312:	4b04      	ldr	r3, [pc, #16]	; (8000324 <uartDataStorage+0x50>)
 8000314:	2200      	movs	r2, #0
 8000316:	751a      	strb	r2, [r3, #20]
}
 8000318:	bf00      	nop
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	200000cc 	.word	0x200000cc

08000328 <getUartMessage>:

char getUartMessage(struct uartDataStr *uartData){
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]

	if(uartData->newDataFlag == 1){
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	7d9b      	ldrb	r3, [r3, #22]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d134      	bne.n	80003a2 <getUartMessage+0x7a>

		uint8_t newDataLineCounter = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	73fb      	strb	r3, [r7, #15]
		uartData->newDataLine = (char*) calloc(uartData->rxIndex+1, sizeof(char));
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	7d1b      	ldrb	r3, [r3, #20]
 8000340:	3301      	adds	r3, #1
 8000342:	2101      	movs	r1, #1
 8000344:	4618      	mov	r0, r3
 8000346:	f002 f80d 	bl	8002364 <calloc>
 800034a:	4603      	mov	r3, r0
 800034c:	461a      	mov	r2, r3
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	619a      	str	r2, [r3, #24]

		for(uint8_t i = uartData->rxIndexOld; i < uartData->rxIndex; i++){
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	7d5b      	ldrb	r3, [r3, #21]
 8000356:	73bb      	strb	r3, [r7, #14]
 8000358:	e00c      	b.n	8000374 <getUartMessage+0x4c>
			uartData->newDataLine[newDataLineCounter++] = (char) uartData->rxBuffer[i];
 800035a:	7bba      	ldrb	r2, [r7, #14]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	6999      	ldr	r1, [r3, #24]
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	1c58      	adds	r0, r3, #1
 8000364:	73f8      	strb	r0, [r7, #15]
 8000366:	440b      	add	r3, r1
 8000368:	6879      	ldr	r1, [r7, #4]
 800036a:	5c8a      	ldrb	r2, [r1, r2]
 800036c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = uartData->rxIndexOld; i < uartData->rxIndex; i++){
 800036e:	7bbb      	ldrb	r3, [r7, #14]
 8000370:	3301      	adds	r3, #1
 8000372:	73bb      	strb	r3, [r7, #14]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	7d1b      	ldrb	r3, [r3, #20]
 8000378:	7bba      	ldrb	r2, [r7, #14]
 800037a:	429a      	cmp	r2, r3
 800037c:	d3ed      	bcc.n	800035a <getUartMessage+0x32>
		}

		uartData->rxIndex = 0;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2200      	movs	r2, #0
 8000382:	751a      	strb	r2, [r3, #20]
		uartData->newDataFlag = 0;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2200      	movs	r2, #0
 8000388:	759a      	strb	r2, [r3, #22]
		uartData->echoFlag = 1;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2201      	movs	r2, #1
 800038e:	75da      	strb	r2, [r3, #23]

		controlSystem.uartMessageData = uartData->newDataLine;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a06      	ldr	r2, [pc, #24]	; (80003b0 <getUartMessage+0x88>)
 8000396:	6013      	str	r3, [r2, #0]

		free(uartData->newDataLine);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4618      	mov	r0, r3
 800039e:	f002 f81b 	bl	80023d8 <free>

	}

	return *uartData->newDataLine;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	781b      	ldrb	r3, [r3, #0]

}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	2000008c 	.word	0x2000008c

080003b4 <echoMessage>:

void echoMessage(struct uartDataStr *uartData){
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	if(uartData->echoFlag == 1){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	7ddb      	ldrb	r3, [r3, #23]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d10f      	bne.n	80003e4 <echoMessage+0x30>
		uartTransmitData((uint8_t*)uartData->newDataLine, strlen(uartData->newDataLine));
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	699c      	ldr	r4, [r3, #24]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff fec7 	bl	8000160 <strlen>
 80003d2:	4603      	mov	r3, r0
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	4619      	mov	r1, r3
 80003d8:	4620      	mov	r0, r4
 80003da:	f000 f82b 	bl	8000434 <uartTransmitData>
		uartData->echoFlag = 0;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	2200      	movs	r2, #0
 80003e2:	75da      	strb	r2, [r3, #23]
	}
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd90      	pop	{r4, r7, pc}

080003ec <uartReceiveIT>:

#include "uartTransport.h"

uint8_t rxTempBuffer[5];

void uartReceiveIT(){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, rxTempBuffer, 1);
 80003f0:	2201      	movs	r2, #1
 80003f2:	4903      	ldr	r1, [pc, #12]	; (8000400 <uartReceiveIT+0x14>)
 80003f4:	4803      	ldr	r0, [pc, #12]	; (8000404 <uartReceiveIT+0x18>)
 80003f6:	f001 fb58 	bl	8001aaa <HAL_UART_Receive_IT>
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	200000e8 	.word	0x200000e8
 8000404:	200000f4 	.word	0x200000f4

08000408 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]

	if(huart == &huart2){
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a06      	ldr	r2, [pc, #24]	; (800042c <HAL_UART_RxCpltCallback+0x24>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d104      	bne.n	8000422 <HAL_UART_RxCpltCallback+0x1a>
		uartDataStorage(rxTempBuffer);
 8000418:	4805      	ldr	r0, [pc, #20]	; (8000430 <HAL_UART_RxCpltCallback+0x28>)
 800041a:	f7ff ff5b 	bl	80002d4 <uartDataStorage>
		uartReceiveIT();
 800041e:	f7ff ffe5 	bl	80003ec <uartReceiveIT>
	}

}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	200000f4 	.word	0x200000f4
 8000430:	200000e8 	.word	0x200000e8

08000434 <uartTransmitData>:

void uartTransmitData(uint8_t *data, uint16_t size){
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	460b      	mov	r3, r1
 800043e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, data, size, 100);
 8000440:	887a      	ldrh	r2, [r7, #2]
 8000442:	2364      	movs	r3, #100	; 0x64
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	4803      	ldr	r0, [pc, #12]	; (8000454 <uartTransmitData+0x20>)
 8000448:	f001 fa9d 	bl	8001986 <HAL_UART_Transmit>
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200000f4 	.word	0x200000f4

08000458 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <MX_GPIO_Init+0x90>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a1d      	ldr	r2, [pc, #116]	; (80004e8 <MX_GPIO_Init+0x90>)
 8000472:	f043 0310 	orr.w	r3, r3, #16
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_GPIO_Init+0x90>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0310 	and.w	r3, r3, #16
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_GPIO_Init+0x90>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a17      	ldr	r2, [pc, #92]	; (80004e8 <MX_GPIO_Init+0x90>)
 800048a:	f043 0320 	orr.w	r3, r3, #32
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <MX_GPIO_Init+0x90>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0320 	and.w	r3, r3, #32
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <MX_GPIO_Init+0x90>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a11      	ldr	r2, [pc, #68]	; (80004e8 <MX_GPIO_Init+0x90>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_GPIO_Init+0x90>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	480c      	ldr	r0, [pc, #48]	; (80004ec <MX_GPIO_Init+0x94>)
 80004bc:	f000 fde4 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c6:	2301      	movs	r3, #1
 80004c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ce:	2302      	movs	r3, #2
 80004d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	4619      	mov	r1, r3
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <MX_GPIO_Init+0x94>)
 80004da:	f000 fc51 	bl	8000d80 <HAL_GPIO_Init>

}
 80004de:	bf00      	nop
 80004e0:	3720      	adds	r7, #32
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40011000 	.word	0x40011000

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004f4:	f000 fa24 	bl	8000940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f80b 	bl	8000512 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f7ff ffac 	bl	8000458 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000500:	f000 f97c 	bl	80007fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UserSystemInit();
 8000504:	f7ff fe34 	bl	8000170 <UserSystemInit>
  uartReceiveIT();
 8000508:	f7ff ff70 	bl	80003ec <uartReceiveIT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  task2();
 800050c:	f7ff fe4e 	bl	80001ac <task2>
  {
 8000510:	e7fc      	b.n	800050c <main+0x1c>

08000512 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b090      	sub	sp, #64	; 0x40
 8000516:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000518:	f107 0318 	add.w	r3, r7, #24
 800051c:	2228      	movs	r2, #40	; 0x28
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f001 ff61 	bl	80023e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000542:	2301      	movs	r3, #1
 8000544:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000550:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000554:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0318 	add.w	r3, r7, #24
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fdac 	bl	80010b8 <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000566:	f000 f819 	bl	800059c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2302      	movs	r3, #2
 8000570:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2102      	movs	r1, #2
 8000584:	4618      	mov	r0, r3
 8000586:	f001 f819 	bl	80015bc <HAL_RCC_ClockConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000590:	f000 f804 	bl	800059c <Error_Handler>
  }
}
 8000594:	bf00      	nop
 8000596:	3740      	adds	r7, #64	; 0x40
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <Error_Handler+0x8>
	...

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <HAL_MspInit+0x5c>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a14      	ldr	r2, [pc, #80]	; (8000604 <HAL_MspInit+0x5c>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_MspInit+0x5c>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_MspInit+0x5c>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <HAL_MspInit+0x60>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_MspInit+0x60>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000
 8000608:	40010000 	.word	0x40010000

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <NMI_Handler+0x4>

08000612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <HardFault_Handler+0x4>

08000618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <MemManage_Handler+0x4>

0800061e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <BusFault_Handler+0x4>

08000624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <UsageFault_Handler+0x4>

0800062a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000652:	f000 f9bb 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <USART2_IRQHandler+0x10>)
 8000662:	f001 fa53 	bl	8001b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200000f4 	.word	0x200000f4

08000670 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	return 1;
 8000674:	2301      	movs	r3, #1
}
 8000676:	4618      	mov	r0, r3
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <_kill>:

int _kill(int pid, int sig)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000688:	f001 fe74 	bl	8002374 <__errno>
 800068c:	4603      	mov	r3, r0
 800068e:	2216      	movs	r2, #22
 8000690:	601a      	str	r2, [r3, #0]
	return -1;
 8000692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <_exit>:

void _exit (int status)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80006a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ffe7 	bl	800067e <_kill>
	while (1) {}		/* Make sure we hang here */
 80006b0:	e7fe      	b.n	80006b0 <_exit+0x12>

080006b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b086      	sub	sp, #24
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e00a      	b.n	80006da <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006c4:	f3af 8000 	nop.w
 80006c8:	4601      	mov	r1, r0
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	1c5a      	adds	r2, r3, #1
 80006ce:	60ba      	str	r2, [r7, #8]
 80006d0:	b2ca      	uxtb	r2, r1
 80006d2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	3301      	adds	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	429a      	cmp	r2, r3
 80006e0:	dbf0      	blt.n	80006c4 <_read+0x12>
	}

return len;
 80006e2:	687b      	ldr	r3, [r7, #4]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	e009      	b.n	8000712 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	60ba      	str	r2, [r7, #8]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	3301      	adds	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	697a      	ldr	r2, [r7, #20]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	429a      	cmp	r2, r3
 8000718:	dbf1      	blt.n	80006fe <_write+0x12>
	}
	return len;
 800071a:	687b      	ldr	r3, [r7, #4]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_close>:

int _close(int file)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	return -1;
 800072c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000730:	4618      	mov	r0, r3
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800074a:	605a      	str	r2, [r3, #4]
	return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <_isatty>:

int _isatty(int file)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	return 1;
 8000760:	2301      	movs	r3, #1
}
 8000762:	4618      	mov	r0, r3
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
	return 0;
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <_sbrk+0x5c>)
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <_sbrk+0x60>)
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <_sbrk+0x64>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <_sbrk+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d207      	bcs.n	80007c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b4:	f001 fdde 	bl	8002374 <__errno>
 80007b8:	4603      	mov	r3, r0
 80007ba:	220c      	movs	r2, #12
 80007bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007c2:	e009      	b.n	80007d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <_sbrk+0x64>)
 80007d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20005000 	.word	0x20005000
 80007e4:	00000400 	.word	0x00000400
 80007e8:	200000f0 	.word	0x200000f0
 80007ec:	20000150 	.word	0x20000150

080007f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <MX_USART2_UART_Init+0x50>)
 8000804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000834:	f001 f85a 	bl	80018ec <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800083e:	f7ff fead 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000f4 	.word	0x200000f4
 800084c:	40004400 	.word	0x40004400

08000850 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <HAL_UART_MspInit+0x98>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d137      	bne.n	80008e0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <HAL_UART_MspInit+0x9c>)
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <HAL_UART_MspInit+0x9c>)
 8000876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087a:	61d3      	str	r3, [r2, #28]
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <HAL_UART_MspInit+0x9c>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_UART_MspInit+0x9c>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a17      	ldr	r2, [pc, #92]	; (80008ec <HAL_UART_MspInit+0x9c>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_UART_MspInit+0x9c>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008a0:	2304      	movs	r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	480f      	ldr	r0, [pc, #60]	; (80008f0 <HAL_UART_MspInit+0xa0>)
 80008b4:	f000 fa64 	bl	8000d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008b8:	2308      	movs	r3, #8
 80008ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	4809      	ldr	r0, [pc, #36]	; (80008f0 <HAL_UART_MspInit+0xa0>)
 80008cc:	f000 fa58 	bl	8000d80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2101      	movs	r1, #1
 80008d4:	2026      	movs	r0, #38	; 0x26
 80008d6:	f000 f96c 	bl	8000bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008da:	2026      	movs	r0, #38	; 0x26
 80008dc:	f000 f985 	bl	8000bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40004400 	.word	0x40004400
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010800 	.word	0x40010800

080008f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008f6:	490d      	ldr	r1, [pc, #52]	; (800092c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800090c:	4c0a      	ldr	r4, [pc, #40]	; (8000938 <LoopFillZerobss+0x22>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800091a:	f7ff ff69 	bl	80007f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091e:	f001 fd2f 	bl	8002380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000922:	f7ff fde5 	bl	80004f0 <main>
  bx lr
 8000926:	4770      	bx	lr
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000930:	0800388c 	.word	0x0800388c
  ldr r2, =_sbss
 8000934:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000938:	2000014c 	.word	0x2000014c

0800093c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_2_IRQHandler>
	...

08000940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_Init+0x28>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_Init+0x28>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f923 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	2000      	movs	r0, #0
 8000958:	f000 f808 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff fe24 	bl	80005a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x54>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_InitTick+0x58>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	fbb3 f3f1 	udiv	r3, r3, r1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f93b 	bl	8000c06 <HAL_SYSTICK_Config>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e00e      	b.n	80009b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d80a      	bhi.n	80009b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a8:	f000 f903 	bl	8000bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <HAL_InitTick+0x5c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000004 	.word	0x20000004

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x1c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_IncTick+0x20>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a03      	ldr	r2, [pc, #12]	; (80009ec <HAL_IncTick+0x20>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000138 	.word	0x20000138

080009f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b02      	ldr	r3, [pc, #8]	; (8000a00 <HAL_GetTick+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	20000138 	.word	0x20000138

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	60d3      	str	r3, [r2, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db0b      	blt.n	8000a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 021f 	and.w	r2, r3, #31
 8000a80:	4906      	ldr	r1, [pc, #24]	; (8000a9c <__NVIC_EnableIRQ+0x34>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2001      	movs	r0, #1
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100

08000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	db0a      	blt.n	8000aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	490c      	ldr	r1, [pc, #48]	; (8000aec <__NVIC_SetPriority+0x4c>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	0112      	lsls	r2, r2, #4
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac8:	e00a      	b.n	8000ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4908      	ldr	r1, [pc, #32]	; (8000af0 <__NVIC_SetPriority+0x50>)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	3b04      	subs	r3, #4
 8000ad8:	0112      	lsls	r2, r2, #4
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	440b      	add	r3, r1
 8000ade:	761a      	strb	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	f1c3 0307 	rsb	r3, r3, #7
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	bf28      	it	cs
 8000b12:	2304      	movcs	r3, #4
 8000b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d902      	bls.n	8000b24 <NVIC_EncodePriority+0x30>
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3b03      	subs	r3, #3
 8000b22:	e000      	b.n	8000b26 <NVIC_EncodePriority+0x32>
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43da      	mvns	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	401a      	ands	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	43d9      	mvns	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	4313      	orrs	r3, r2
         );
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3724      	adds	r7, #36	; 0x24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b7c:	f7ff ff90 	bl	8000aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff2d 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff42 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff90 	bl	8000af4 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5f 	bl	8000aa0 <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff35 	bl	8000a68 <__NVIC_EnableIRQ>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ffa2 	bl	8000b58 <SysTick_Config>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d008      	beq.n	8000c46 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2204      	movs	r2, #4
 8000c38:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e020      	b.n	8000c88 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 020e 	bic.w	r2, r2, #14
 8000c54:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 0201 	bic.w	r2, r2, #1
 8000c64:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c6e:	2101      	movs	r1, #1
 8000c70:	fa01 f202 	lsl.w	r2, r1, r2
 8000c74:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
	...

08000c94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d005      	beq.n	8000cb6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2204      	movs	r2, #4
 8000cae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	e051      	b.n	8000d5a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 020e 	bic.w	r2, r2, #14
 8000cc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0201 	bic.w	r2, r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a22      	ldr	r2, [pc, #136]	; (8000d64 <HAL_DMA_Abort_IT+0xd0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d029      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xa0>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a20      	ldr	r2, [pc, #128]	; (8000d68 <HAL_DMA_Abort_IT+0xd4>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d022      	beq.n	8000d30 <HAL_DMA_Abort_IT+0x9c>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <HAL_DMA_Abort_IT+0xd8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d01a      	beq.n	8000d2a <HAL_DMA_Abort_IT+0x96>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <HAL_DMA_Abort_IT+0xdc>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d012      	beq.n	8000d24 <HAL_DMA_Abort_IT+0x90>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <HAL_DMA_Abort_IT+0xe0>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d00a      	beq.n	8000d1e <HAL_DMA_Abort_IT+0x8a>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a1a      	ldr	r2, [pc, #104]	; (8000d78 <HAL_DMA_Abort_IT+0xe4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d102      	bne.n	8000d18 <HAL_DMA_Abort_IT+0x84>
 8000d12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d16:	e00e      	b.n	8000d36 <HAL_DMA_Abort_IT+0xa2>
 8000d18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d1c:	e00b      	b.n	8000d36 <HAL_DMA_Abort_IT+0xa2>
 8000d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d22:	e008      	b.n	8000d36 <HAL_DMA_Abort_IT+0xa2>
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	e005      	b.n	8000d36 <HAL_DMA_Abort_IT+0xa2>
 8000d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2e:	e002      	b.n	8000d36 <HAL_DMA_Abort_IT+0xa2>
 8000d30:	2310      	movs	r3, #16
 8000d32:	e000      	b.n	8000d36 <HAL_DMA_Abort_IT+0xa2>
 8000d34:	2301      	movs	r3, #1
 8000d36:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <HAL_DMA_Abort_IT+0xe8>)
 8000d38:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	4798      	blx	r3
    } 
  }
  return status;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40020008 	.word	0x40020008
 8000d68:	4002001c 	.word	0x4002001c
 8000d6c:	40020030 	.word	0x40020030
 8000d70:	40020044 	.word	0x40020044
 8000d74:	40020058 	.word	0x40020058
 8000d78:	4002006c 	.word	0x4002006c
 8000d7c:	40020000 	.word	0x40020000

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b08b      	sub	sp, #44	; 0x2c
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d92:	e169      	b.n	8001068 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d94:	2201      	movs	r2, #1
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 8158 	bne.w	8001062 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	4a9a      	ldr	r2, [pc, #616]	; (8001020 <HAL_GPIO_Init+0x2a0>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d05e      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dbc:	4a98      	ldr	r2, [pc, #608]	; (8001020 <HAL_GPIO_Init+0x2a0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d875      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dc2:	4a98      	ldr	r2, [pc, #608]	; (8001024 <HAL_GPIO_Init+0x2a4>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d058      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dc8:	4a96      	ldr	r2, [pc, #600]	; (8001024 <HAL_GPIO_Init+0x2a4>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d86f      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dce:	4a96      	ldr	r2, [pc, #600]	; (8001028 <HAL_GPIO_Init+0x2a8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d052      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dd4:	4a94      	ldr	r2, [pc, #592]	; (8001028 <HAL_GPIO_Init+0x2a8>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d869      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dda:	4a94      	ldr	r2, [pc, #592]	; (800102c <HAL_GPIO_Init+0x2ac>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d04c      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000de0:	4a92      	ldr	r2, [pc, #584]	; (800102c <HAL_GPIO_Init+0x2ac>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d863      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000de6:	4a92      	ldr	r2, [pc, #584]	; (8001030 <HAL_GPIO_Init+0x2b0>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d046      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dec:	4a90      	ldr	r2, [pc, #576]	; (8001030 <HAL_GPIO_Init+0x2b0>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d85d      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000df2:	2b12      	cmp	r3, #18
 8000df4:	d82a      	bhi.n	8000e4c <HAL_GPIO_Init+0xcc>
 8000df6:	2b12      	cmp	r3, #18
 8000df8:	d859      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dfa:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <HAL_GPIO_Init+0x80>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e7b 	.word	0x08000e7b
 8000e04:	08000e55 	.word	0x08000e55
 8000e08:	08000e67 	.word	0x08000e67
 8000e0c:	08000ea9 	.word	0x08000ea9
 8000e10:	08000eaf 	.word	0x08000eaf
 8000e14:	08000eaf 	.word	0x08000eaf
 8000e18:	08000eaf 	.word	0x08000eaf
 8000e1c:	08000eaf 	.word	0x08000eaf
 8000e20:	08000eaf 	.word	0x08000eaf
 8000e24:	08000eaf 	.word	0x08000eaf
 8000e28:	08000eaf 	.word	0x08000eaf
 8000e2c:	08000eaf 	.word	0x08000eaf
 8000e30:	08000eaf 	.word	0x08000eaf
 8000e34:	08000eaf 	.word	0x08000eaf
 8000e38:	08000eaf 	.word	0x08000eaf
 8000e3c:	08000eaf 	.word	0x08000eaf
 8000e40:	08000eaf 	.word	0x08000eaf
 8000e44:	08000e5d 	.word	0x08000e5d
 8000e48:	08000e71 	.word	0x08000e71
 8000e4c:	4a79      	ldr	r2, [pc, #484]	; (8001034 <HAL_GPIO_Init+0x2b4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d013      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e52:	e02c      	b.n	8000eae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	623b      	str	r3, [r7, #32]
          break;
 8000e5a:	e029      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	3304      	adds	r3, #4
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e024      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	3308      	adds	r3, #8
 8000e6c:	623b      	str	r3, [r7, #32]
          break;
 8000e6e:	e01f      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	330c      	adds	r3, #12
 8000e76:	623b      	str	r3, [r7, #32]
          break;
 8000e78:	e01a      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e82:	2304      	movs	r3, #4
 8000e84:	623b      	str	r3, [r7, #32]
          break;
 8000e86:	e013      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d105      	bne.n	8000e9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e90:	2308      	movs	r3, #8
 8000e92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	611a      	str	r2, [r3, #16]
          break;
 8000e9a:	e009      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	615a      	str	r2, [r3, #20]
          break;
 8000ea6:	e003      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
          break;
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          break;
 8000eae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2bff      	cmp	r3, #255	; 0xff
 8000eb4:	d801      	bhi.n	8000eba <HAL_GPIO_Init+0x13a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	e001      	b.n	8000ebe <HAL_GPIO_Init+0x13e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2bff      	cmp	r3, #255	; 0xff
 8000ec4:	d802      	bhi.n	8000ecc <HAL_GPIO_Init+0x14c>
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	e002      	b.n	8000ed2 <HAL_GPIO_Init+0x152>
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	3b08      	subs	r3, #8
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	210f      	movs	r1, #15
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	6a39      	ldr	r1, [r7, #32]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	431a      	orrs	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 80b1 	beq.w	8001062 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f00:	4b4d      	ldr	r3, [pc, #308]	; (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b4a      	ldr	r3, [pc, #296]	; (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f18:	4a48      	ldr	r2, [pc, #288]	; (800103c <HAL_GPIO_Init+0x2bc>)
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a40      	ldr	r2, [pc, #256]	; (8001040 <HAL_GPIO_Init+0x2c0>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d013      	beq.n	8000f6c <HAL_GPIO_Init+0x1ec>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a3f      	ldr	r2, [pc, #252]	; (8001044 <HAL_GPIO_Init+0x2c4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d00d      	beq.n	8000f68 <HAL_GPIO_Init+0x1e8>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a3e      	ldr	r2, [pc, #248]	; (8001048 <HAL_GPIO_Init+0x2c8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d007      	beq.n	8000f64 <HAL_GPIO_Init+0x1e4>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a3d      	ldr	r2, [pc, #244]	; (800104c <HAL_GPIO_Init+0x2cc>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d101      	bne.n	8000f60 <HAL_GPIO_Init+0x1e0>
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e006      	b.n	8000f6e <HAL_GPIO_Init+0x1ee>
 8000f60:	2304      	movs	r3, #4
 8000f62:	e004      	b.n	8000f6e <HAL_GPIO_Init+0x1ee>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e002      	b.n	8000f6e <HAL_GPIO_Init+0x1ee>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <HAL_GPIO_Init+0x1ee>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f70:	f002 0203 	and.w	r2, r2, #3
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	4093      	lsls	r3, r2
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f7e:	492f      	ldr	r1, [pc, #188]	; (800103c <HAL_GPIO_Init+0x2bc>)
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d006      	beq.n	8000fa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	492c      	ldr	r1, [pc, #176]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	4928      	ldr	r1, [pc, #160]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d006      	beq.n	8000fce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	4922      	ldr	r1, [pc, #136]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	491e      	ldr	r1, [pc, #120]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	4013      	ands	r3, r2
 8000fda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d006      	beq.n	8000ff6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	4918      	ldr	r1, [pc, #96]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	608b      	str	r3, [r1, #8]
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	4914      	ldr	r1, [pc, #80]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8001000:	4013      	ands	r3, r2
 8001002:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d021      	beq.n	8001054 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	490e      	ldr	r1, [pc, #56]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	60cb      	str	r3, [r1, #12]
 800101c:	e021      	b.n	8001062 <HAL_GPIO_Init+0x2e2>
 800101e:	bf00      	nop
 8001020:	10320000 	.word	0x10320000
 8001024:	10310000 	.word	0x10310000
 8001028:	10220000 	.word	0x10220000
 800102c:	10210000 	.word	0x10210000
 8001030:	10120000 	.word	0x10120000
 8001034:	10110000 	.word	0x10110000
 8001038:	40021000 	.word	0x40021000
 800103c:	40010000 	.word	0x40010000
 8001040:	40010800 	.word	0x40010800
 8001044:	40010c00 	.word	0x40010c00
 8001048:	40011000 	.word	0x40011000
 800104c:	40011400 	.word	0x40011400
 8001050:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_GPIO_Init+0x304>)
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	43db      	mvns	r3, r3
 800105c:	4909      	ldr	r1, [pc, #36]	; (8001084 <HAL_GPIO_Init+0x304>)
 800105e:	4013      	ands	r3, r2
 8001060:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	3301      	adds	r3, #1
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	fa22 f303 	lsr.w	r3, r2, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	f47f ae8e 	bne.w	8000d94 <HAL_GPIO_Init+0x14>
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	372c      	adds	r7, #44	; 0x2c
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	40010400 	.word	0x40010400

08001088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
 8001094:	4613      	mov	r3, r2
 8001096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001098:	787b      	ldrb	r3, [r7, #1]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010a4:	e003      	b.n	80010ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	041a      	lsls	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	611a      	str	r2, [r3, #16]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e272      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 8087 	beq.w	80011e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010d8:	4b92      	ldr	r3, [pc, #584]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 030c 	and.w	r3, r3, #12
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d00c      	beq.n	80010fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010e4:	4b8f      	ldr	r3, [pc, #572]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 030c 	and.w	r3, r3, #12
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d112      	bne.n	8001116 <HAL_RCC_OscConfig+0x5e>
 80010f0:	4b8c      	ldr	r3, [pc, #560]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fc:	d10b      	bne.n	8001116 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010fe:	4b89      	ldr	r3, [pc, #548]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d06c      	beq.n	80011e4 <HAL_RCC_OscConfig+0x12c>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d168      	bne.n	80011e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e24c      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111e:	d106      	bne.n	800112e <HAL_RCC_OscConfig+0x76>
 8001120:	4b80      	ldr	r3, [pc, #512]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a7f      	ldr	r2, [pc, #508]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	e02e      	b.n	800118c <HAL_RCC_OscConfig+0xd4>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10c      	bne.n	8001150 <HAL_RCC_OscConfig+0x98>
 8001136:	4b7b      	ldr	r3, [pc, #492]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a7a      	ldr	r2, [pc, #488]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 800113c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	4b78      	ldr	r3, [pc, #480]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a77      	ldr	r2, [pc, #476]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e01d      	b.n	800118c <HAL_RCC_OscConfig+0xd4>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0xbc>
 800115a:	4b72      	ldr	r3, [pc, #456]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a71      	ldr	r2, [pc, #452]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b6f      	ldr	r3, [pc, #444]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a6e      	ldr	r2, [pc, #440]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 800116c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e00b      	b.n	800118c <HAL_RCC_OscConfig+0xd4>
 8001174:	4b6b      	ldr	r3, [pc, #428]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a6a      	ldr	r2, [pc, #424]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 800117a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b68      	ldr	r3, [pc, #416]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a67      	ldr	r2, [pc, #412]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d013      	beq.n	80011bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fc2c 	bl	80009f0 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fc28 	bl	80009f0 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b64      	cmp	r3, #100	; 0x64
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e200      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	4b5d      	ldr	r3, [pc, #372]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0xe4>
 80011ba:	e014      	b.n	80011e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fc18 	bl	80009f0 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fc14 	bl	80009f0 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	; 0x64
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e1ec      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	4b53      	ldr	r3, [pc, #332]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f0      	bne.n	80011c4 <HAL_RCC_OscConfig+0x10c>
 80011e2:	e000      	b.n	80011e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d063      	beq.n	80012ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011f2:	4b4c      	ldr	r3, [pc, #304]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 030c 	and.w	r3, r3, #12
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00b      	beq.n	8001216 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011fe:	4b49      	ldr	r3, [pc, #292]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b08      	cmp	r3, #8
 8001208:	d11c      	bne.n	8001244 <HAL_RCC_OscConfig+0x18c>
 800120a:	4b46      	ldr	r3, [pc, #280]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d116      	bne.n	8001244 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001216:	4b43      	ldr	r3, [pc, #268]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d005      	beq.n	800122e <HAL_RCC_OscConfig+0x176>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d001      	beq.n	800122e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e1c0      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122e:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	4939      	ldr	r1, [pc, #228]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001242:	e03a      	b.n	80012ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d020      	beq.n	800128e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800124c:	4b36      	ldr	r3, [pc, #216]	; (8001328 <HAL_RCC_OscConfig+0x270>)
 800124e:	2201      	movs	r2, #1
 8001250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001252:	f7ff fbcd 	bl	80009f0 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125a:	f7ff fbc9 	bl	80009f0 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e1a1      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0f0      	beq.n	800125a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001278:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4927      	ldr	r1, [pc, #156]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 8001288:	4313      	orrs	r3, r2
 800128a:	600b      	str	r3, [r1, #0]
 800128c:	e015      	b.n	80012ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <HAL_RCC_OscConfig+0x270>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fbac 	bl	80009f0 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129c:	f7ff fba8 	bl	80009f0 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e180      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d03a      	beq.n	800133c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d019      	beq.n	8001302 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_RCC_OscConfig+0x274>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d4:	f7ff fb8c 	bl	80009f0 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012dc:	f7ff fb88 	bl	80009f0 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e160      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012fa:	2001      	movs	r0, #1
 80012fc:	f000 fad8 	bl	80018b0 <RCC_Delay>
 8001300:	e01c      	b.n	800133c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_RCC_OscConfig+0x274>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001308:	f7ff fb72 	bl	80009f0 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800130e:	e00f      	b.n	8001330 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001310:	f7ff fb6e 	bl	80009f0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d908      	bls.n	8001330 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e146      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	42420000 	.word	0x42420000
 800132c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001330:	4b92      	ldr	r3, [pc, #584]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1e9      	bne.n	8001310 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80a6 	beq.w	8001496 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800134e:	4b8b      	ldr	r3, [pc, #556]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10d      	bne.n	8001376 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	4b88      	ldr	r3, [pc, #544]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a87      	ldr	r2, [pc, #540]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b85      	ldr	r3, [pc, #532]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001372:	2301      	movs	r3, #1
 8001374:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001376:	4b82      	ldr	r3, [pc, #520]	; (8001580 <HAL_RCC_OscConfig+0x4c8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137e:	2b00      	cmp	r3, #0
 8001380:	d118      	bne.n	80013b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001382:	4b7f      	ldr	r3, [pc, #508]	; (8001580 <HAL_RCC_OscConfig+0x4c8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a7e      	ldr	r2, [pc, #504]	; (8001580 <HAL_RCC_OscConfig+0x4c8>)
 8001388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800138e:	f7ff fb2f 	bl	80009f0 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001396:	f7ff fb2b 	bl	80009f0 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b64      	cmp	r3, #100	; 0x64
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e103      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a8:	4b75      	ldr	r3, [pc, #468]	; (8001580 <HAL_RCC_OscConfig+0x4c8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d106      	bne.n	80013ca <HAL_RCC_OscConfig+0x312>
 80013bc:	4b6f      	ldr	r3, [pc, #444]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4a6e      	ldr	r2, [pc, #440]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6213      	str	r3, [r2, #32]
 80013c8:	e02d      	b.n	8001426 <HAL_RCC_OscConfig+0x36e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10c      	bne.n	80013ec <HAL_RCC_OscConfig+0x334>
 80013d2:	4b6a      	ldr	r3, [pc, #424]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4a69      	ldr	r2, [pc, #420]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	6213      	str	r3, [r2, #32]
 80013de:	4b67      	ldr	r3, [pc, #412]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	4a66      	ldr	r2, [pc, #408]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	f023 0304 	bic.w	r3, r3, #4
 80013e8:	6213      	str	r3, [r2, #32]
 80013ea:	e01c      	b.n	8001426 <HAL_RCC_OscConfig+0x36e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	d10c      	bne.n	800140e <HAL_RCC_OscConfig+0x356>
 80013f4:	4b61      	ldr	r3, [pc, #388]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4a60      	ldr	r2, [pc, #384]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	f043 0304 	orr.w	r3, r3, #4
 80013fe:	6213      	str	r3, [r2, #32]
 8001400:	4b5e      	ldr	r3, [pc, #376]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	4a5d      	ldr	r2, [pc, #372]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6213      	str	r3, [r2, #32]
 800140c:	e00b      	b.n	8001426 <HAL_RCC_OscConfig+0x36e>
 800140e:	4b5b      	ldr	r3, [pc, #364]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4a5a      	ldr	r2, [pc, #360]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	6213      	str	r3, [r2, #32]
 800141a:	4b58      	ldr	r3, [pc, #352]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	4a57      	ldr	r2, [pc, #348]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 8001420:	f023 0304 	bic.w	r3, r3, #4
 8001424:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d015      	beq.n	800145a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142e:	f7ff fadf 	bl	80009f0 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001434:	e00a      	b.n	800144c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001436:	f7ff fadb 	bl	80009f0 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f241 3288 	movw	r2, #5000	; 0x1388
 8001444:	4293      	cmp	r3, r2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e0b1      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144c:	4b4b      	ldr	r3, [pc, #300]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0ee      	beq.n	8001436 <HAL_RCC_OscConfig+0x37e>
 8001458:	e014      	b.n	8001484 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff fac9 	bl	80009f0 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001460:	e00a      	b.n	8001478 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001462:	f7ff fac5 	bl	80009f0 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001470:	4293      	cmp	r3, r2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e09b      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001478:	4b40      	ldr	r3, [pc, #256]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1ee      	bne.n	8001462 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d105      	bne.n	8001496 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800148a:	4b3c      	ldr	r3, [pc, #240]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a3b      	ldr	r2, [pc, #236]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 8001490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001494:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 8087 	beq.w	80015ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a0:	4b36      	ldr	r3, [pc, #216]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 030c 	and.w	r3, r3, #12
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d061      	beq.n	8001570 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d146      	bne.n	8001542 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b4:	4b33      	ldr	r3, [pc, #204]	; (8001584 <HAL_RCC_OscConfig+0x4cc>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fa99 	bl	80009f0 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fa95 	bl	80009f0 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e06d      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d4:	4b29      	ldr	r3, [pc, #164]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e8:	d108      	bne.n	80014fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	4921      	ldr	r1, [pc, #132]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a19      	ldr	r1, [r3, #32]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	430b      	orrs	r3, r1
 800150e:	491b      	ldr	r1, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_RCC_OscConfig+0x4cc>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fa69 	bl	80009f0 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001522:	f7ff fa65 	bl	80009f0 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e03d      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x46a>
 8001540:	e035      	b.n	80015ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_RCC_OscConfig+0x4cc>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fa52 	bl	80009f0 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001550:	f7ff fa4e 	bl	80009f0 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e026      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_RCC_OscConfig+0x4c4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x498>
 800156e:	e01e      	b.n	80015ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d107      	bne.n	8001588 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e019      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
 800157c:	40021000 	.word	0x40021000
 8001580:	40007000 	.word	0x40007000
 8001584:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_RCC_OscConfig+0x500>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	429a      	cmp	r2, r3
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d001      	beq.n	80015ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000

080015bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0d0      	b.n	8001772 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015d0:	4b6a      	ldr	r3, [pc, #424]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d910      	bls.n	8001600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015de:	4b67      	ldr	r3, [pc, #412]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 0207 	bic.w	r2, r3, #7
 80015e6:	4965      	ldr	r1, [pc, #404]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ee:	4b63      	ldr	r3, [pc, #396]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0b8      	b.n	8001772 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d020      	beq.n	800164e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001618:	4b59      	ldr	r3, [pc, #356]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4a58      	ldr	r2, [pc, #352]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001622:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001630:	4b53      	ldr	r3, [pc, #332]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4a52      	ldr	r2, [pc, #328]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800163a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800163c:	4b50      	ldr	r3, [pc, #320]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	494d      	ldr	r1, [pc, #308]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d040      	beq.n	80016dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d115      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e07f      	b.n	8001772 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	4b41      	ldr	r3, [pc, #260]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e073      	b.n	8001772 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168a:	4b3d      	ldr	r3, [pc, #244]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e06b      	b.n	8001772 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800169a:	4b39      	ldr	r3, [pc, #228]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f023 0203 	bic.w	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4936      	ldr	r1, [pc, #216]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016ac:	f7ff f9a0 	bl	80009f0 <HAL_GetTick>
 80016b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b4:	f7ff f99c 	bl	80009f0 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e053      	b.n	8001772 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ca:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 020c 	and.w	r2, r3, #12
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	429a      	cmp	r2, r3
 80016da:	d1eb      	bne.n	80016b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016dc:	4b27      	ldr	r3, [pc, #156]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d210      	bcs.n	800170c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b24      	ldr	r3, [pc, #144]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 0207 	bic.w	r2, r3, #7
 80016f2:	4922      	ldr	r1, [pc, #136]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e032      	b.n	8001772 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d008      	beq.n	800172a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4916      	ldr	r1, [pc, #88]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d009      	beq.n	800174a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	490e      	ldr	r1, [pc, #56]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800174a:	f000 f821 	bl	8001790 <HAL_RCC_GetSysClockFreq>
 800174e:	4602      	mov	r2, r0
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	490a      	ldr	r1, [pc, #40]	; (8001784 <HAL_RCC_ClockConfig+0x1c8>)
 800175c:	5ccb      	ldrb	r3, [r1, r3]
 800175e:	fa22 f303 	lsr.w	r3, r2, r3
 8001762:	4a09      	ldr	r2, [pc, #36]	; (8001788 <HAL_RCC_ClockConfig+0x1cc>)
 8001764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_RCC_ClockConfig+0x1d0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff f8fe 	bl	800096c <HAL_InitTick>

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40022000 	.word	0x40022000
 8001780:	40021000 	.word	0x40021000
 8001784:	08003624 	.word	0x08003624
 8001788:	20000000 	.word	0x20000000
 800178c:	20000004 	.word	0x20000004

08001790 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001790:	b490      	push	{r4, r7}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001796:	4b29      	ldr	r3, [pc, #164]	; (800183c <HAL_RCC_GetSysClockFreq+0xac>)
 8001798:	1d3c      	adds	r4, r7, #4
 800179a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800179c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017a0:	f240 2301 	movw	r3, #513	; 0x201
 80017a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017ba:	4b21      	ldr	r3, [pc, #132]	; (8001840 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d002      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0x40>
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_GetSysClockFreq+0x46>
 80017ce:	e02b      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017d0:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017d2:	623b      	str	r3, [r7, #32]
      break;
 80017d4:	e02b      	b.n	800182e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	0c9b      	lsrs	r3, r3, #18
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3328      	adds	r3, #40	; 0x28
 80017e0:	443b      	add	r3, r7
 80017e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017e6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d012      	beq.n	8001818 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	0c5b      	lsrs	r3, r3, #17
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	3328      	adds	r3, #40	; 0x28
 80017fe:	443b      	add	r3, r7
 8001800:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001804:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_RCC_GetSysClockFreq+0xb4>)
 800180a:	fb03 f202 	mul.w	r2, r3, r2
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	fbb2 f3f3 	udiv	r3, r2, r3
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
 8001816:	e004      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <HAL_RCC_GetSysClockFreq+0xb8>)
 800181c:	fb02 f303 	mul.w	r3, r2, r3
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	623b      	str	r3, [r7, #32]
      break;
 8001826:	e002      	b.n	800182e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_RCC_GetSysClockFreq+0xb4>)
 800182a:	623b      	str	r3, [r7, #32]
      break;
 800182c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800182e:	6a3b      	ldr	r3, [r7, #32]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3728      	adds	r7, #40	; 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	bc90      	pop	{r4, r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	08003614 	.word	0x08003614
 8001840:	40021000 	.word	0x40021000
 8001844:	007a1200 	.word	0x007a1200
 8001848:	003d0900 	.word	0x003d0900

0800184c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <HAL_RCC_GetHCLKFreq+0x10>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000000 	.word	0x20000000

08001860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001864:	f7ff fff2 	bl	800184c <HAL_RCC_GetHCLKFreq>
 8001868:	4602      	mov	r2, r0
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	0a1b      	lsrs	r3, r3, #8
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	4903      	ldr	r1, [pc, #12]	; (8001884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001876:	5ccb      	ldrb	r3, [r1, r3]
 8001878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800187c:	4618      	mov	r0, r3
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000
 8001884:	08003634 	.word	0x08003634

08001888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800188c:	f7ff ffde 	bl	800184c <HAL_RCC_GetHCLKFreq>
 8001890:	4602      	mov	r2, r0
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	0adb      	lsrs	r3, r3, #11
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	4903      	ldr	r1, [pc, #12]	; (80018ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800189e:	5ccb      	ldrb	r3, [r1, r3]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40021000 	.word	0x40021000
 80018ac:	08003634 	.word	0x08003634

080018b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <RCC_Delay+0x34>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <RCC_Delay+0x38>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	0a5b      	lsrs	r3, r3, #9
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	fb02 f303 	mul.w	r3, r2, r3
 80018ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018cc:	bf00      	nop
  }
  while (Delay --);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1e5a      	subs	r2, r3, #1
 80018d2:	60fa      	str	r2, [r7, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f9      	bne.n	80018cc <RCC_Delay+0x1c>
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	20000000 	.word	0x20000000
 80018e8:	10624dd3 	.word	0x10624dd3

080018ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e03f      	b.n	800197e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7fe ff9c 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2224      	movs	r2, #36	; 0x24
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800192e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fc85 	bl	8002240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001954:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001964:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2220      	movs	r2, #32
 8001978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b08a      	sub	sp, #40	; 0x28
 800198a:	af02      	add	r7, sp, #8
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b20      	cmp	r3, #32
 80019a4:	d17c      	bne.n	8001aa0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <HAL_UART_Transmit+0x2c>
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e075      	b.n	8001aa2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_UART_Transmit+0x3e>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e06e      	b.n	8001aa2 <HAL_UART_Transmit+0x11c>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2221      	movs	r2, #33	; 0x21
 80019d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019da:	f7ff f809 	bl	80009f0 <HAL_GetTick>
 80019de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	88fa      	ldrh	r2, [r7, #6]
 80019e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	88fa      	ldrh	r2, [r7, #6]
 80019ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f4:	d108      	bne.n	8001a08 <HAL_UART_Transmit+0x82>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d104      	bne.n	8001a08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	e003      	b.n	8001a10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a18:	e02a      	b.n	8001a70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2200      	movs	r2, #0
 8001a22:	2180      	movs	r1, #128	; 0x80
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 fa38 	bl	8001e9a <UART_WaitOnFlagUntilTimeout>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e036      	b.n	8001aa2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10b      	bne.n	8001a52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	e007      	b.n	8001a62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1cf      	bne.n	8001a1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2200      	movs	r2, #0
 8001a82:	2140      	movs	r1, #64	; 0x40
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 fa08 	bl	8001e9a <UART_WaitOnFlagUntilTimeout>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e006      	b.n	8001aa2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e000      	b.n	8001aa2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001aa0:	2302      	movs	r3, #2
  }
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d11d      	bne.n	8001b00 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_UART_Receive_IT+0x26>
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e016      	b.n	8001b02 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_UART_Receive_IT+0x38>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e00f      	b.n	8001b02 <HAL_UART_Receive_IT+0x58>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 fa19 	bl	8001f2e <UART_Start_Receive_IT>
 8001afc:	4603      	mov	r3, r0
 8001afe:	e000      	b.n	8001b02 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001b00:	2302      	movs	r3, #2
  }
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10d      	bne.n	8001b5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_UART_IRQHandler+0x52>
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	f003 0320 	and.w	r3, r3, #32
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fac9 	bl	80020ee <UART_Receive_IT>
      return;
 8001b5c:	e17b      	b.n	8001e56 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80b1 	beq.w	8001cc8 <HAL_UART_IRQHandler+0x1bc>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <HAL_UART_IRQHandler+0x70>
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80a6 	beq.w	8001cc8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00a      	beq.n	8001b9c <HAL_UART_IRQHandler+0x90>
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00a      	beq.n	8001bbc <HAL_UART_IRQHandler+0xb0>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f043 0202 	orr.w	r2, r3, #2
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00a      	beq.n	8001bdc <HAL_UART_IRQHandler+0xd0>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f043 0204 	orr.w	r2, r3, #4
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00f      	beq.n	8001c06 <HAL_UART_IRQHandler+0xfa>
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d104      	bne.n	8001bfa <HAL_UART_IRQHandler+0xee>
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f043 0208 	orr.w	r2, r3, #8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 811e 	beq.w	8001e4c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_UART_IRQHandler+0x11e>
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fa62 	bl	80020ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bf14      	ite	ne
 8001c38:	2301      	movne	r3, #1
 8001c3a:	2300      	moveq	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <HAL_UART_IRQHandler+0x146>
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d031      	beq.n	8001cb6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f9a4 	bl	8001fa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d023      	beq.n	8001cae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695a      	ldr	r2, [r3, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d013      	beq.n	8001ca6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c82:	4a76      	ldr	r2, [pc, #472]	; (8001e5c <HAL_UART_IRQHandler+0x350>)
 8001c84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f802 	bl	8000c94 <HAL_DMA_Abort_IT>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d016      	beq.n	8001cc4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ca4:	e00e      	b.n	8001cc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8e3 	bl	8001e72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cac:	e00a      	b.n	8001cc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8df 	bl	8001e72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cb4:	e006      	b.n	8001cc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8db 	bl	8001e72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001cc2:	e0c3      	b.n	8001e4c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cc4:	bf00      	nop
    return;
 8001cc6:	e0c1      	b.n	8001e4c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	f040 80a1 	bne.w	8001e14 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 809b 	beq.w	8001e14 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8095 	beq.w	8001e14 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d04e      	beq.n	8001dac <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001d18:	8a3b      	ldrh	r3, [r7, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8098 	beq.w	8001e50 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001d24:	8a3a      	ldrh	r2, [r7, #16]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	f080 8092 	bcs.w	8001e50 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	8a3a      	ldrh	r2, [r7, #16]
 8001d30:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	d02b      	beq.n	8001d94 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d4a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d6a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0210 	bic.w	r2, r2, #16
 8001d88:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe ff45 	bl	8000c1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	4619      	mov	r1, r3
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f86d 	bl	8001e84 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001daa:	e051      	b.n	8001e50 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d047      	beq.n	8001e54 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001dc4:	8a7b      	ldrh	r3, [r7, #18]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d044      	beq.n	8001e54 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001dd8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0201 	bic.w	r2, r2, #1
 8001de8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2220      	movs	r2, #32
 8001dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0210 	bic.w	r2, r2, #16
 8001e06:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e08:	8a7b      	ldrh	r3, [r7, #18]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f839 	bl	8001e84 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001e12:	e01f      	b.n	8001e54 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d008      	beq.n	8001e30 <HAL_UART_IRQHandler+0x324>
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f8f9 	bl	8002020 <UART_Transmit_IT>
    return;
 8001e2e:	e012      	b.n	8001e56 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00d      	beq.n	8001e56 <HAL_UART_IRQHandler+0x34a>
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f93a 	bl	80020be <UART_EndTransmit_IT>
    return;
 8001e4a:	e004      	b.n	8001e56 <HAL_UART_IRQHandler+0x34a>
    return;
 8001e4c:	bf00      	nop
 8001e4e:	e002      	b.n	8001e56 <HAL_UART_IRQHandler+0x34a>
      return;
 8001e50:	bf00      	nop
 8001e52:	e000      	b.n	8001e56 <HAL_UART_IRQHandler+0x34a>
      return;
 8001e54:	bf00      	nop
  }
}
 8001e56:	3728      	adds	r7, #40	; 0x28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	08001ff9 	.word	0x08001ff9

08001e60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eaa:	e02c      	b.n	8001f06 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eb2:	d028      	beq.n	8001f06 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <UART_WaitOnFlagUntilTimeout+0x30>
 8001eba:	f7fe fd99 	bl	80009f0 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d21d      	bcs.n	8001f06 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ed8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e00f      	b.n	8001f26 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	bf0c      	ite	eq
 8001f16:	2301      	moveq	r3, #1
 8001f18:	2300      	movne	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d0c3      	beq.n	8001eac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	88fa      	ldrh	r2, [r7, #6]
 8001f46:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	88fa      	ldrh	r2, [r7, #6]
 8001f4c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2222      	movs	r2, #34	; 0x22
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f72:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0220 	orr.w	r2, r2, #32
 8001f92:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001fb6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d107      	bne.n	8001fe0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0210 	bic.w	r2, r2, #16
 8001fde:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f7ff ff2d 	bl	8001e72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b21      	cmp	r3, #33	; 0x21
 8002032:	d13e      	bne.n	80020b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203c:	d114      	bne.n	8002068 <UART_Transmit_IT+0x48>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d110      	bne.n	8002068 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800205a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	1c9a      	adds	r2, r3, #2
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	621a      	str	r2, [r3, #32]
 8002066:	e008      	b.n	800207a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	1c59      	adds	r1, r3, #1
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6211      	str	r1, [r2, #32]
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b29b      	uxth	r3, r3
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4619      	mov	r1, r3
 8002088:	84d1      	strh	r1, [r2, #38]	; 0x26
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10f      	bne.n	80020ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800209c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80020b2:	2302      	movs	r3, #2
  }
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff febe 	bl	8001e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b22      	cmp	r3, #34	; 0x22
 8002100:	f040 8099 	bne.w	8002236 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800210c:	d117      	bne.n	800213e <UART_Receive_IT+0x50>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d113      	bne.n	800213e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	b29b      	uxth	r3, r3
 8002128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212c:	b29a      	uxth	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	1c9a      	adds	r2, r3, #2
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
 800213c:	e026      	b.n	800218c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002150:	d007      	beq.n	8002162 <UART_Receive_IT+0x74>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <UART_Receive_IT+0x82>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	e008      	b.n	8002182 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800217c:	b2da      	uxtb	r2, r3
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29b      	uxth	r3, r3
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4619      	mov	r1, r3
 800219a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800219c:	2b00      	cmp	r3, #0
 800219e:	d148      	bne.n	8002232 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0220 	bic.w	r2, r2, #32
 80021ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d123      	bne.n	8002228 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0210 	bic.w	r2, r2, #16
 80021f4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b10      	cmp	r3, #16
 8002202:	d10a      	bne.n	800221a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800221e:	4619      	mov	r1, r3
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff fe2f 	bl	8001e84 <HAL_UARTEx_RxEventCallback>
 8002226:	e002      	b.n	800222e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7fe f8ed 	bl	8000408 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e002      	b.n	8002238 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e000      	b.n	8002238 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002236:	2302      	movs	r3, #2
  }
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800227a:	f023 030c 	bic.w	r3, r3, #12
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	430b      	orrs	r3, r1
 8002286:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a2c      	ldr	r2, [pc, #176]	; (8002354 <UART_SetConfig+0x114>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d103      	bne.n	80022b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022a8:	f7ff faee 	bl	8001888 <HAL_RCC_GetPCLK2Freq>
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	e002      	b.n	80022b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022b0:	f7ff fad6 	bl	8001860 <HAL_RCC_GetPCLK1Freq>
 80022b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	009a      	lsls	r2, r3, #2
 80022c0:	441a      	add	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	4a22      	ldr	r2, [pc, #136]	; (8002358 <UART_SetConfig+0x118>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	0119      	lsls	r1, r3, #4
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	009a      	lsls	r2, r3, #2
 80022e0:	441a      	add	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <UART_SetConfig+0x118>)
 80022ee:	fba3 0302 	umull	r0, r3, r3, r2
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	2064      	movs	r0, #100	; 0x64
 80022f6:	fb00 f303 	mul.w	r3, r0, r3
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	3332      	adds	r3, #50	; 0x32
 8002300:	4a15      	ldr	r2, [pc, #84]	; (8002358 <UART_SetConfig+0x118>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800230c:	4419      	add	r1, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	009a      	lsls	r2, r3, #2
 8002318:	441a      	add	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	fbb2 f2f3 	udiv	r2, r2, r3
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <UART_SetConfig+0x118>)
 8002326:	fba3 0302 	umull	r0, r3, r3, r2
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2064      	movs	r0, #100	; 0x64
 800232e:	fb00 f303 	mul.w	r3, r0, r3
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	3332      	adds	r3, #50	; 0x32
 8002338:	4a07      	ldr	r2, [pc, #28]	; (8002358 <UART_SetConfig+0x118>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	f003 020f 	and.w	r2, r3, #15
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	440a      	add	r2, r1
 800234a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40013800 	.word	0x40013800
 8002358:	51eb851f 	.word	0x51eb851f

0800235c <atoi>:
 800235c:	220a      	movs	r2, #10
 800235e:	2100      	movs	r1, #0
 8002360:	f000 ba22 	b.w	80027a8 <strtol>

08002364 <calloc>:
 8002364:	4b02      	ldr	r3, [pc, #8]	; (8002370 <calloc+0xc>)
 8002366:	460a      	mov	r2, r1
 8002368:	4601      	mov	r1, r0
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	f000 b844 	b.w	80023f8 <_calloc_r>
 8002370:	2000000c 	.word	0x2000000c

08002374 <__errno>:
 8002374:	4b01      	ldr	r3, [pc, #4]	; (800237c <__errno+0x8>)
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	2000000c 	.word	0x2000000c

08002380 <__libc_init_array>:
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	2600      	movs	r6, #0
 8002384:	4d0c      	ldr	r5, [pc, #48]	; (80023b8 <__libc_init_array+0x38>)
 8002386:	4c0d      	ldr	r4, [pc, #52]	; (80023bc <__libc_init_array+0x3c>)
 8002388:	1b64      	subs	r4, r4, r5
 800238a:	10a4      	asrs	r4, r4, #2
 800238c:	42a6      	cmp	r6, r4
 800238e:	d109      	bne.n	80023a4 <__libc_init_array+0x24>
 8002390:	f001 f920 	bl	80035d4 <_init>
 8002394:	2600      	movs	r6, #0
 8002396:	4d0a      	ldr	r5, [pc, #40]	; (80023c0 <__libc_init_array+0x40>)
 8002398:	4c0a      	ldr	r4, [pc, #40]	; (80023c4 <__libc_init_array+0x44>)
 800239a:	1b64      	subs	r4, r4, r5
 800239c:	10a4      	asrs	r4, r4, #2
 800239e:	42a6      	cmp	r6, r4
 80023a0:	d105      	bne.n	80023ae <__libc_init_array+0x2e>
 80023a2:	bd70      	pop	{r4, r5, r6, pc}
 80023a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023a8:	4798      	blx	r3
 80023aa:	3601      	adds	r6, #1
 80023ac:	e7ee      	b.n	800238c <__libc_init_array+0xc>
 80023ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b2:	4798      	blx	r3
 80023b4:	3601      	adds	r6, #1
 80023b6:	e7f2      	b.n	800239e <__libc_init_array+0x1e>
 80023b8:	08003884 	.word	0x08003884
 80023bc:	08003884 	.word	0x08003884
 80023c0:	08003884 	.word	0x08003884
 80023c4:	08003888 	.word	0x08003888

080023c8 <malloc>:
 80023c8:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <malloc+0xc>)
 80023ca:	4601      	mov	r1, r0
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	f000 b88f 	b.w	80024f0 <_malloc_r>
 80023d2:	bf00      	nop
 80023d4:	2000000c 	.word	0x2000000c

080023d8 <free>:
 80023d8:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <free+0xc>)
 80023da:	4601      	mov	r1, r0
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	f000 b81f 	b.w	8002420 <_free_r>
 80023e2:	bf00      	nop
 80023e4:	2000000c 	.word	0x2000000c

080023e8 <memset>:
 80023e8:	4603      	mov	r3, r0
 80023ea:	4402      	add	r2, r0
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d100      	bne.n	80023f2 <memset+0xa>
 80023f0:	4770      	bx	lr
 80023f2:	f803 1b01 	strb.w	r1, [r3], #1
 80023f6:	e7f9      	b.n	80023ec <memset+0x4>

080023f8 <_calloc_r>:
 80023f8:	b570      	push	{r4, r5, r6, lr}
 80023fa:	fba1 5402 	umull	r5, r4, r1, r2
 80023fe:	b934      	cbnz	r4, 800240e <_calloc_r+0x16>
 8002400:	4629      	mov	r1, r5
 8002402:	f000 f875 	bl	80024f0 <_malloc_r>
 8002406:	4606      	mov	r6, r0
 8002408:	b928      	cbnz	r0, 8002416 <_calloc_r+0x1e>
 800240a:	4630      	mov	r0, r6
 800240c:	bd70      	pop	{r4, r5, r6, pc}
 800240e:	220c      	movs	r2, #12
 8002410:	2600      	movs	r6, #0
 8002412:	6002      	str	r2, [r0, #0]
 8002414:	e7f9      	b.n	800240a <_calloc_r+0x12>
 8002416:	462a      	mov	r2, r5
 8002418:	4621      	mov	r1, r4
 800241a:	f7ff ffe5 	bl	80023e8 <memset>
 800241e:	e7f4      	b.n	800240a <_calloc_r+0x12>

08002420 <_free_r>:
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	4605      	mov	r5, r0
 8002424:	2900      	cmp	r1, #0
 8002426:	d040      	beq.n	80024aa <_free_r+0x8a>
 8002428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800242c:	1f0c      	subs	r4, r1, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	bfb8      	it	lt
 8002432:	18e4      	addlt	r4, r4, r3
 8002434:	f000 f9f2 	bl	800281c <__malloc_lock>
 8002438:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <_free_r+0x8c>)
 800243a:	6813      	ldr	r3, [r2, #0]
 800243c:	b933      	cbnz	r3, 800244c <_free_r+0x2c>
 800243e:	6063      	str	r3, [r4, #4]
 8002440:	6014      	str	r4, [r2, #0]
 8002442:	4628      	mov	r0, r5
 8002444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002448:	f000 b9ee 	b.w	8002828 <__malloc_unlock>
 800244c:	42a3      	cmp	r3, r4
 800244e:	d908      	bls.n	8002462 <_free_r+0x42>
 8002450:	6820      	ldr	r0, [r4, #0]
 8002452:	1821      	adds	r1, r4, r0
 8002454:	428b      	cmp	r3, r1
 8002456:	bf01      	itttt	eq
 8002458:	6819      	ldreq	r1, [r3, #0]
 800245a:	685b      	ldreq	r3, [r3, #4]
 800245c:	1809      	addeq	r1, r1, r0
 800245e:	6021      	streq	r1, [r4, #0]
 8002460:	e7ed      	b.n	800243e <_free_r+0x1e>
 8002462:	461a      	mov	r2, r3
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	b10b      	cbz	r3, 800246c <_free_r+0x4c>
 8002468:	42a3      	cmp	r3, r4
 800246a:	d9fa      	bls.n	8002462 <_free_r+0x42>
 800246c:	6811      	ldr	r1, [r2, #0]
 800246e:	1850      	adds	r0, r2, r1
 8002470:	42a0      	cmp	r0, r4
 8002472:	d10b      	bne.n	800248c <_free_r+0x6c>
 8002474:	6820      	ldr	r0, [r4, #0]
 8002476:	4401      	add	r1, r0
 8002478:	1850      	adds	r0, r2, r1
 800247a:	4283      	cmp	r3, r0
 800247c:	6011      	str	r1, [r2, #0]
 800247e:	d1e0      	bne.n	8002442 <_free_r+0x22>
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4401      	add	r1, r0
 8002486:	6011      	str	r1, [r2, #0]
 8002488:	6053      	str	r3, [r2, #4]
 800248a:	e7da      	b.n	8002442 <_free_r+0x22>
 800248c:	d902      	bls.n	8002494 <_free_r+0x74>
 800248e:	230c      	movs	r3, #12
 8002490:	602b      	str	r3, [r5, #0]
 8002492:	e7d6      	b.n	8002442 <_free_r+0x22>
 8002494:	6820      	ldr	r0, [r4, #0]
 8002496:	1821      	adds	r1, r4, r0
 8002498:	428b      	cmp	r3, r1
 800249a:	bf01      	itttt	eq
 800249c:	6819      	ldreq	r1, [r3, #0]
 800249e:	685b      	ldreq	r3, [r3, #4]
 80024a0:	1809      	addeq	r1, r1, r0
 80024a2:	6021      	streq	r1, [r4, #0]
 80024a4:	6063      	str	r3, [r4, #4]
 80024a6:	6054      	str	r4, [r2, #4]
 80024a8:	e7cb      	b.n	8002442 <_free_r+0x22>
 80024aa:	bd38      	pop	{r3, r4, r5, pc}
 80024ac:	2000013c 	.word	0x2000013c

080024b0 <sbrk_aligned>:
 80024b0:	b570      	push	{r4, r5, r6, lr}
 80024b2:	4e0e      	ldr	r6, [pc, #56]	; (80024ec <sbrk_aligned+0x3c>)
 80024b4:	460c      	mov	r4, r1
 80024b6:	6831      	ldr	r1, [r6, #0]
 80024b8:	4605      	mov	r5, r0
 80024ba:	b911      	cbnz	r1, 80024c2 <sbrk_aligned+0x12>
 80024bc:	f000 f88c 	bl	80025d8 <_sbrk_r>
 80024c0:	6030      	str	r0, [r6, #0]
 80024c2:	4621      	mov	r1, r4
 80024c4:	4628      	mov	r0, r5
 80024c6:	f000 f887 	bl	80025d8 <_sbrk_r>
 80024ca:	1c43      	adds	r3, r0, #1
 80024cc:	d00a      	beq.n	80024e4 <sbrk_aligned+0x34>
 80024ce:	1cc4      	adds	r4, r0, #3
 80024d0:	f024 0403 	bic.w	r4, r4, #3
 80024d4:	42a0      	cmp	r0, r4
 80024d6:	d007      	beq.n	80024e8 <sbrk_aligned+0x38>
 80024d8:	1a21      	subs	r1, r4, r0
 80024da:	4628      	mov	r0, r5
 80024dc:	f000 f87c 	bl	80025d8 <_sbrk_r>
 80024e0:	3001      	adds	r0, #1
 80024e2:	d101      	bne.n	80024e8 <sbrk_aligned+0x38>
 80024e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80024e8:	4620      	mov	r0, r4
 80024ea:	bd70      	pop	{r4, r5, r6, pc}
 80024ec:	20000140 	.word	0x20000140

080024f0 <_malloc_r>:
 80024f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024f4:	1ccd      	adds	r5, r1, #3
 80024f6:	f025 0503 	bic.w	r5, r5, #3
 80024fa:	3508      	adds	r5, #8
 80024fc:	2d0c      	cmp	r5, #12
 80024fe:	bf38      	it	cc
 8002500:	250c      	movcc	r5, #12
 8002502:	2d00      	cmp	r5, #0
 8002504:	4607      	mov	r7, r0
 8002506:	db01      	blt.n	800250c <_malloc_r+0x1c>
 8002508:	42a9      	cmp	r1, r5
 800250a:	d905      	bls.n	8002518 <_malloc_r+0x28>
 800250c:	230c      	movs	r3, #12
 800250e:	2600      	movs	r6, #0
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4630      	mov	r0, r6
 8002514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002518:	4e2e      	ldr	r6, [pc, #184]	; (80025d4 <_malloc_r+0xe4>)
 800251a:	f000 f97f 	bl	800281c <__malloc_lock>
 800251e:	6833      	ldr	r3, [r6, #0]
 8002520:	461c      	mov	r4, r3
 8002522:	bb34      	cbnz	r4, 8002572 <_malloc_r+0x82>
 8002524:	4629      	mov	r1, r5
 8002526:	4638      	mov	r0, r7
 8002528:	f7ff ffc2 	bl	80024b0 <sbrk_aligned>
 800252c:	1c43      	adds	r3, r0, #1
 800252e:	4604      	mov	r4, r0
 8002530:	d14d      	bne.n	80025ce <_malloc_r+0xde>
 8002532:	6834      	ldr	r4, [r6, #0]
 8002534:	4626      	mov	r6, r4
 8002536:	2e00      	cmp	r6, #0
 8002538:	d140      	bne.n	80025bc <_malloc_r+0xcc>
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	4631      	mov	r1, r6
 800253e:	4638      	mov	r0, r7
 8002540:	eb04 0803 	add.w	r8, r4, r3
 8002544:	f000 f848 	bl	80025d8 <_sbrk_r>
 8002548:	4580      	cmp	r8, r0
 800254a:	d13a      	bne.n	80025c2 <_malloc_r+0xd2>
 800254c:	6821      	ldr	r1, [r4, #0]
 800254e:	3503      	adds	r5, #3
 8002550:	1a6d      	subs	r5, r5, r1
 8002552:	f025 0503 	bic.w	r5, r5, #3
 8002556:	3508      	adds	r5, #8
 8002558:	2d0c      	cmp	r5, #12
 800255a:	bf38      	it	cc
 800255c:	250c      	movcc	r5, #12
 800255e:	4638      	mov	r0, r7
 8002560:	4629      	mov	r1, r5
 8002562:	f7ff ffa5 	bl	80024b0 <sbrk_aligned>
 8002566:	3001      	adds	r0, #1
 8002568:	d02b      	beq.n	80025c2 <_malloc_r+0xd2>
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	442b      	add	r3, r5
 800256e:	6023      	str	r3, [r4, #0]
 8002570:	e00e      	b.n	8002590 <_malloc_r+0xa0>
 8002572:	6822      	ldr	r2, [r4, #0]
 8002574:	1b52      	subs	r2, r2, r5
 8002576:	d41e      	bmi.n	80025b6 <_malloc_r+0xc6>
 8002578:	2a0b      	cmp	r2, #11
 800257a:	d916      	bls.n	80025aa <_malloc_r+0xba>
 800257c:	1961      	adds	r1, r4, r5
 800257e:	42a3      	cmp	r3, r4
 8002580:	6025      	str	r5, [r4, #0]
 8002582:	bf18      	it	ne
 8002584:	6059      	strne	r1, [r3, #4]
 8002586:	6863      	ldr	r3, [r4, #4]
 8002588:	bf08      	it	eq
 800258a:	6031      	streq	r1, [r6, #0]
 800258c:	5162      	str	r2, [r4, r5]
 800258e:	604b      	str	r3, [r1, #4]
 8002590:	4638      	mov	r0, r7
 8002592:	f104 060b 	add.w	r6, r4, #11
 8002596:	f000 f947 	bl	8002828 <__malloc_unlock>
 800259a:	f026 0607 	bic.w	r6, r6, #7
 800259e:	1d23      	adds	r3, r4, #4
 80025a0:	1af2      	subs	r2, r6, r3
 80025a2:	d0b6      	beq.n	8002512 <_malloc_r+0x22>
 80025a4:	1b9b      	subs	r3, r3, r6
 80025a6:	50a3      	str	r3, [r4, r2]
 80025a8:	e7b3      	b.n	8002512 <_malloc_r+0x22>
 80025aa:	6862      	ldr	r2, [r4, #4]
 80025ac:	42a3      	cmp	r3, r4
 80025ae:	bf0c      	ite	eq
 80025b0:	6032      	streq	r2, [r6, #0]
 80025b2:	605a      	strne	r2, [r3, #4]
 80025b4:	e7ec      	b.n	8002590 <_malloc_r+0xa0>
 80025b6:	4623      	mov	r3, r4
 80025b8:	6864      	ldr	r4, [r4, #4]
 80025ba:	e7b2      	b.n	8002522 <_malloc_r+0x32>
 80025bc:	4634      	mov	r4, r6
 80025be:	6876      	ldr	r6, [r6, #4]
 80025c0:	e7b9      	b.n	8002536 <_malloc_r+0x46>
 80025c2:	230c      	movs	r3, #12
 80025c4:	4638      	mov	r0, r7
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	f000 f92e 	bl	8002828 <__malloc_unlock>
 80025cc:	e7a1      	b.n	8002512 <_malloc_r+0x22>
 80025ce:	6025      	str	r5, [r4, #0]
 80025d0:	e7de      	b.n	8002590 <_malloc_r+0xa0>
 80025d2:	bf00      	nop
 80025d4:	2000013c 	.word	0x2000013c

080025d8 <_sbrk_r>:
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	2300      	movs	r3, #0
 80025dc:	4d05      	ldr	r5, [pc, #20]	; (80025f4 <_sbrk_r+0x1c>)
 80025de:	4604      	mov	r4, r0
 80025e0:	4608      	mov	r0, r1
 80025e2:	602b      	str	r3, [r5, #0]
 80025e4:	f7fe f8ce 	bl	8000784 <_sbrk>
 80025e8:	1c43      	adds	r3, r0, #1
 80025ea:	d102      	bne.n	80025f2 <_sbrk_r+0x1a>
 80025ec:	682b      	ldr	r3, [r5, #0]
 80025ee:	b103      	cbz	r3, 80025f2 <_sbrk_r+0x1a>
 80025f0:	6023      	str	r3, [r4, #0]
 80025f2:	bd38      	pop	{r3, r4, r5, pc}
 80025f4:	20000144 	.word	0x20000144

080025f8 <strtok>:
 80025f8:	4b16      	ldr	r3, [pc, #88]	; (8002654 <strtok+0x5c>)
 80025fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025fe:	681f      	ldr	r7, [r3, #0]
 8002600:	4605      	mov	r5, r0
 8002602:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8002604:	460e      	mov	r6, r1
 8002606:	b9ec      	cbnz	r4, 8002644 <strtok+0x4c>
 8002608:	2050      	movs	r0, #80	; 0x50
 800260a:	f7ff fedd 	bl	80023c8 <malloc>
 800260e:	4602      	mov	r2, r0
 8002610:	65b8      	str	r0, [r7, #88]	; 0x58
 8002612:	b920      	cbnz	r0, 800261e <strtok+0x26>
 8002614:	2157      	movs	r1, #87	; 0x57
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <strtok+0x60>)
 8002618:	4810      	ldr	r0, [pc, #64]	; (800265c <strtok+0x64>)
 800261a:	f000 f8cf 	bl	80027bc <__assert_func>
 800261e:	e9c0 4400 	strd	r4, r4, [r0]
 8002622:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8002626:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800262a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800262e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8002632:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8002636:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800263a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800263e:	6184      	str	r4, [r0, #24]
 8002640:	7704      	strb	r4, [r0, #28]
 8002642:	6244      	str	r4, [r0, #36]	; 0x24
 8002644:	4631      	mov	r1, r6
 8002646:	4628      	mov	r0, r5
 8002648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800264a:	2301      	movs	r3, #1
 800264c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002650:	f000 b806 	b.w	8002660 <__strtok_r>
 8002654:	2000000c 	.word	0x2000000c
 8002658:	08003640 	.word	0x08003640
 800265c:	08003657 	.word	0x08003657

08002660 <__strtok_r>:
 8002660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002662:	b908      	cbnz	r0, 8002668 <__strtok_r+0x8>
 8002664:	6810      	ldr	r0, [r2, #0]
 8002666:	b188      	cbz	r0, 800268c <__strtok_r+0x2c>
 8002668:	4604      	mov	r4, r0
 800266a:	460f      	mov	r7, r1
 800266c:	4620      	mov	r0, r4
 800266e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002672:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002676:	b91e      	cbnz	r6, 8002680 <__strtok_r+0x20>
 8002678:	b965      	cbnz	r5, 8002694 <__strtok_r+0x34>
 800267a:	4628      	mov	r0, r5
 800267c:	6015      	str	r5, [r2, #0]
 800267e:	e005      	b.n	800268c <__strtok_r+0x2c>
 8002680:	42b5      	cmp	r5, r6
 8002682:	d1f6      	bne.n	8002672 <__strtok_r+0x12>
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f0      	bne.n	800266a <__strtok_r+0xa>
 8002688:	6014      	str	r4, [r2, #0]
 800268a:	7003      	strb	r3, [r0, #0]
 800268c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800268e:	461c      	mov	r4, r3
 8002690:	e00c      	b.n	80026ac <__strtok_r+0x4c>
 8002692:	b915      	cbnz	r5, 800269a <__strtok_r+0x3a>
 8002694:	460e      	mov	r6, r1
 8002696:	f814 3b01 	ldrb.w	r3, [r4], #1
 800269a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800269e:	42ab      	cmp	r3, r5
 80026a0:	d1f7      	bne.n	8002692 <__strtok_r+0x32>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f3      	beq.n	800268e <__strtok_r+0x2e>
 80026a6:	2300      	movs	r3, #0
 80026a8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80026ac:	6014      	str	r4, [r2, #0]
 80026ae:	e7ed      	b.n	800268c <__strtok_r+0x2c>

080026b0 <_strtol_l.constprop.0>:
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026b6:	4680      	mov	r8, r0
 80026b8:	d001      	beq.n	80026be <_strtol_l.constprop.0+0xe>
 80026ba:	2b24      	cmp	r3, #36	; 0x24
 80026bc:	d906      	bls.n	80026cc <_strtol_l.constprop.0+0x1c>
 80026be:	f7ff fe59 	bl	8002374 <__errno>
 80026c2:	2316      	movs	r3, #22
 80026c4:	6003      	str	r3, [r0, #0]
 80026c6:	2000      	movs	r0, #0
 80026c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026cc:	460d      	mov	r5, r1
 80026ce:	4f35      	ldr	r7, [pc, #212]	; (80027a4 <_strtol_l.constprop.0+0xf4>)
 80026d0:	4628      	mov	r0, r5
 80026d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80026d6:	5de6      	ldrb	r6, [r4, r7]
 80026d8:	f016 0608 	ands.w	r6, r6, #8
 80026dc:	d1f8      	bne.n	80026d0 <_strtol_l.constprop.0+0x20>
 80026de:	2c2d      	cmp	r4, #45	; 0x2d
 80026e0:	d12f      	bne.n	8002742 <_strtol_l.constprop.0+0x92>
 80026e2:	2601      	movs	r6, #1
 80026e4:	782c      	ldrb	r4, [r5, #0]
 80026e6:	1c85      	adds	r5, r0, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d057      	beq.n	800279c <_strtol_l.constprop.0+0xec>
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d109      	bne.n	8002704 <_strtol_l.constprop.0+0x54>
 80026f0:	2c30      	cmp	r4, #48	; 0x30
 80026f2:	d107      	bne.n	8002704 <_strtol_l.constprop.0+0x54>
 80026f4:	7828      	ldrb	r0, [r5, #0]
 80026f6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80026fa:	2858      	cmp	r0, #88	; 0x58
 80026fc:	d149      	bne.n	8002792 <_strtol_l.constprop.0+0xe2>
 80026fe:	2310      	movs	r3, #16
 8002700:	786c      	ldrb	r4, [r5, #1]
 8002702:	3502      	adds	r5, #2
 8002704:	2700      	movs	r7, #0
 8002706:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800270a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800270e:	fbbe f9f3 	udiv	r9, lr, r3
 8002712:	4638      	mov	r0, r7
 8002714:	fb03 ea19 	mls	sl, r3, r9, lr
 8002718:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800271c:	f1bc 0f09 	cmp.w	ip, #9
 8002720:	d814      	bhi.n	800274c <_strtol_l.constprop.0+0x9c>
 8002722:	4664      	mov	r4, ip
 8002724:	42a3      	cmp	r3, r4
 8002726:	dd22      	ble.n	800276e <_strtol_l.constprop.0+0xbe>
 8002728:	2f00      	cmp	r7, #0
 800272a:	db1d      	blt.n	8002768 <_strtol_l.constprop.0+0xb8>
 800272c:	4581      	cmp	r9, r0
 800272e:	d31b      	bcc.n	8002768 <_strtol_l.constprop.0+0xb8>
 8002730:	d101      	bne.n	8002736 <_strtol_l.constprop.0+0x86>
 8002732:	45a2      	cmp	sl, r4
 8002734:	db18      	blt.n	8002768 <_strtol_l.constprop.0+0xb8>
 8002736:	2701      	movs	r7, #1
 8002738:	fb00 4003 	mla	r0, r0, r3, r4
 800273c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002740:	e7ea      	b.n	8002718 <_strtol_l.constprop.0+0x68>
 8002742:	2c2b      	cmp	r4, #43	; 0x2b
 8002744:	bf04      	itt	eq
 8002746:	782c      	ldrbeq	r4, [r5, #0]
 8002748:	1c85      	addeq	r5, r0, #2
 800274a:	e7cd      	b.n	80026e8 <_strtol_l.constprop.0+0x38>
 800274c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002750:	f1bc 0f19 	cmp.w	ip, #25
 8002754:	d801      	bhi.n	800275a <_strtol_l.constprop.0+0xaa>
 8002756:	3c37      	subs	r4, #55	; 0x37
 8002758:	e7e4      	b.n	8002724 <_strtol_l.constprop.0+0x74>
 800275a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800275e:	f1bc 0f19 	cmp.w	ip, #25
 8002762:	d804      	bhi.n	800276e <_strtol_l.constprop.0+0xbe>
 8002764:	3c57      	subs	r4, #87	; 0x57
 8002766:	e7dd      	b.n	8002724 <_strtol_l.constprop.0+0x74>
 8002768:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800276c:	e7e6      	b.n	800273c <_strtol_l.constprop.0+0x8c>
 800276e:	2f00      	cmp	r7, #0
 8002770:	da07      	bge.n	8002782 <_strtol_l.constprop.0+0xd2>
 8002772:	2322      	movs	r3, #34	; 0x22
 8002774:	4670      	mov	r0, lr
 8002776:	f8c8 3000 	str.w	r3, [r8]
 800277a:	2a00      	cmp	r2, #0
 800277c:	d0a4      	beq.n	80026c8 <_strtol_l.constprop.0+0x18>
 800277e:	1e69      	subs	r1, r5, #1
 8002780:	e005      	b.n	800278e <_strtol_l.constprop.0+0xde>
 8002782:	b106      	cbz	r6, 8002786 <_strtol_l.constprop.0+0xd6>
 8002784:	4240      	negs	r0, r0
 8002786:	2a00      	cmp	r2, #0
 8002788:	d09e      	beq.n	80026c8 <_strtol_l.constprop.0+0x18>
 800278a:	2f00      	cmp	r7, #0
 800278c:	d1f7      	bne.n	800277e <_strtol_l.constprop.0+0xce>
 800278e:	6011      	str	r1, [r2, #0]
 8002790:	e79a      	b.n	80026c8 <_strtol_l.constprop.0+0x18>
 8002792:	2430      	movs	r4, #48	; 0x30
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1b5      	bne.n	8002704 <_strtol_l.constprop.0+0x54>
 8002798:	2308      	movs	r3, #8
 800279a:	e7b3      	b.n	8002704 <_strtol_l.constprop.0+0x54>
 800279c:	2c30      	cmp	r4, #48	; 0x30
 800279e:	d0a9      	beq.n	80026f4 <_strtol_l.constprop.0+0x44>
 80027a0:	230a      	movs	r3, #10
 80027a2:	e7af      	b.n	8002704 <_strtol_l.constprop.0+0x54>
 80027a4:	080036f1 	.word	0x080036f1

080027a8 <strtol>:
 80027a8:	4613      	mov	r3, r2
 80027aa:	460a      	mov	r2, r1
 80027ac:	4601      	mov	r1, r0
 80027ae:	4802      	ldr	r0, [pc, #8]	; (80027b8 <strtol+0x10>)
 80027b0:	6800      	ldr	r0, [r0, #0]
 80027b2:	f7ff bf7d 	b.w	80026b0 <_strtol_l.constprop.0>
 80027b6:	bf00      	nop
 80027b8:	2000000c 	.word	0x2000000c

080027bc <__assert_func>:
 80027bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80027be:	4614      	mov	r4, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <__assert_func+0x2c>)
 80027c4:	4605      	mov	r5, r0
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68d8      	ldr	r0, [r3, #12]
 80027ca:	b14c      	cbz	r4, 80027e0 <__assert_func+0x24>
 80027cc:	4b07      	ldr	r3, [pc, #28]	; (80027ec <__assert_func+0x30>)
 80027ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80027d2:	9100      	str	r1, [sp, #0]
 80027d4:	462b      	mov	r3, r5
 80027d6:	4906      	ldr	r1, [pc, #24]	; (80027f0 <__assert_func+0x34>)
 80027d8:	f000 f80e 	bl	80027f8 <fiprintf>
 80027dc:	f000 fbd8 	bl	8002f90 <abort>
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <__assert_func+0x38>)
 80027e2:	461c      	mov	r4, r3
 80027e4:	e7f3      	b.n	80027ce <__assert_func+0x12>
 80027e6:	bf00      	nop
 80027e8:	2000000c 	.word	0x2000000c
 80027ec:	080036b4 	.word	0x080036b4
 80027f0:	080036c1 	.word	0x080036c1
 80027f4:	080036ef 	.word	0x080036ef

080027f8 <fiprintf>:
 80027f8:	b40e      	push	{r1, r2, r3}
 80027fa:	b503      	push	{r0, r1, lr}
 80027fc:	4601      	mov	r1, r0
 80027fe:	ab03      	add	r3, sp, #12
 8002800:	4805      	ldr	r0, [pc, #20]	; (8002818 <fiprintf+0x20>)
 8002802:	f853 2b04 	ldr.w	r2, [r3], #4
 8002806:	6800      	ldr	r0, [r0, #0]
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	f000 f83b 	bl	8002884 <_vfiprintf_r>
 800280e:	b002      	add	sp, #8
 8002810:	f85d eb04 	ldr.w	lr, [sp], #4
 8002814:	b003      	add	sp, #12
 8002816:	4770      	bx	lr
 8002818:	2000000c 	.word	0x2000000c

0800281c <__malloc_lock>:
 800281c:	4801      	ldr	r0, [pc, #4]	; (8002824 <__malloc_lock+0x8>)
 800281e:	f000 bd73 	b.w	8003308 <__retarget_lock_acquire_recursive>
 8002822:	bf00      	nop
 8002824:	20000148 	.word	0x20000148

08002828 <__malloc_unlock>:
 8002828:	4801      	ldr	r0, [pc, #4]	; (8002830 <__malloc_unlock+0x8>)
 800282a:	f000 bd6e 	b.w	800330a <__retarget_lock_release_recursive>
 800282e:	bf00      	nop
 8002830:	20000148 	.word	0x20000148

08002834 <__sfputc_r>:
 8002834:	6893      	ldr	r3, [r2, #8]
 8002836:	b410      	push	{r4}
 8002838:	3b01      	subs	r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	6093      	str	r3, [r2, #8]
 800283e:	da07      	bge.n	8002850 <__sfputc_r+0x1c>
 8002840:	6994      	ldr	r4, [r2, #24]
 8002842:	42a3      	cmp	r3, r4
 8002844:	db01      	blt.n	800284a <__sfputc_r+0x16>
 8002846:	290a      	cmp	r1, #10
 8002848:	d102      	bne.n	8002850 <__sfputc_r+0x1c>
 800284a:	bc10      	pop	{r4}
 800284c:	f000 bae0 	b.w	8002e10 <__swbuf_r>
 8002850:	6813      	ldr	r3, [r2, #0]
 8002852:	1c58      	adds	r0, r3, #1
 8002854:	6010      	str	r0, [r2, #0]
 8002856:	7019      	strb	r1, [r3, #0]
 8002858:	4608      	mov	r0, r1
 800285a:	bc10      	pop	{r4}
 800285c:	4770      	bx	lr

0800285e <__sfputs_r>:
 800285e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002860:	4606      	mov	r6, r0
 8002862:	460f      	mov	r7, r1
 8002864:	4614      	mov	r4, r2
 8002866:	18d5      	adds	r5, r2, r3
 8002868:	42ac      	cmp	r4, r5
 800286a:	d101      	bne.n	8002870 <__sfputs_r+0x12>
 800286c:	2000      	movs	r0, #0
 800286e:	e007      	b.n	8002880 <__sfputs_r+0x22>
 8002870:	463a      	mov	r2, r7
 8002872:	4630      	mov	r0, r6
 8002874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002878:	f7ff ffdc 	bl	8002834 <__sfputc_r>
 800287c:	1c43      	adds	r3, r0, #1
 800287e:	d1f3      	bne.n	8002868 <__sfputs_r+0xa>
 8002880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002884 <_vfiprintf_r>:
 8002884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002888:	460d      	mov	r5, r1
 800288a:	4614      	mov	r4, r2
 800288c:	4698      	mov	r8, r3
 800288e:	4606      	mov	r6, r0
 8002890:	b09d      	sub	sp, #116	; 0x74
 8002892:	b118      	cbz	r0, 800289c <_vfiprintf_r+0x18>
 8002894:	6983      	ldr	r3, [r0, #24]
 8002896:	b90b      	cbnz	r3, 800289c <_vfiprintf_r+0x18>
 8002898:	f000 fc98 	bl	80031cc <__sinit>
 800289c:	4b89      	ldr	r3, [pc, #548]	; (8002ac4 <_vfiprintf_r+0x240>)
 800289e:	429d      	cmp	r5, r3
 80028a0:	d11b      	bne.n	80028da <_vfiprintf_r+0x56>
 80028a2:	6875      	ldr	r5, [r6, #4]
 80028a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028a6:	07d9      	lsls	r1, r3, #31
 80028a8:	d405      	bmi.n	80028b6 <_vfiprintf_r+0x32>
 80028aa:	89ab      	ldrh	r3, [r5, #12]
 80028ac:	059a      	lsls	r2, r3, #22
 80028ae:	d402      	bmi.n	80028b6 <_vfiprintf_r+0x32>
 80028b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028b2:	f000 fd29 	bl	8003308 <__retarget_lock_acquire_recursive>
 80028b6:	89ab      	ldrh	r3, [r5, #12]
 80028b8:	071b      	lsls	r3, r3, #28
 80028ba:	d501      	bpl.n	80028c0 <_vfiprintf_r+0x3c>
 80028bc:	692b      	ldr	r3, [r5, #16]
 80028be:	b9eb      	cbnz	r3, 80028fc <_vfiprintf_r+0x78>
 80028c0:	4629      	mov	r1, r5
 80028c2:	4630      	mov	r0, r6
 80028c4:	f000 faf6 	bl	8002eb4 <__swsetup_r>
 80028c8:	b1c0      	cbz	r0, 80028fc <_vfiprintf_r+0x78>
 80028ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028cc:	07dc      	lsls	r4, r3, #31
 80028ce:	d50e      	bpl.n	80028ee <_vfiprintf_r+0x6a>
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d4:	b01d      	add	sp, #116	; 0x74
 80028d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028da:	4b7b      	ldr	r3, [pc, #492]	; (8002ac8 <_vfiprintf_r+0x244>)
 80028dc:	429d      	cmp	r5, r3
 80028de:	d101      	bne.n	80028e4 <_vfiprintf_r+0x60>
 80028e0:	68b5      	ldr	r5, [r6, #8]
 80028e2:	e7df      	b.n	80028a4 <_vfiprintf_r+0x20>
 80028e4:	4b79      	ldr	r3, [pc, #484]	; (8002acc <_vfiprintf_r+0x248>)
 80028e6:	429d      	cmp	r5, r3
 80028e8:	bf08      	it	eq
 80028ea:	68f5      	ldreq	r5, [r6, #12]
 80028ec:	e7da      	b.n	80028a4 <_vfiprintf_r+0x20>
 80028ee:	89ab      	ldrh	r3, [r5, #12]
 80028f0:	0598      	lsls	r0, r3, #22
 80028f2:	d4ed      	bmi.n	80028d0 <_vfiprintf_r+0x4c>
 80028f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028f6:	f000 fd08 	bl	800330a <__retarget_lock_release_recursive>
 80028fa:	e7e9      	b.n	80028d0 <_vfiprintf_r+0x4c>
 80028fc:	2300      	movs	r3, #0
 80028fe:	9309      	str	r3, [sp, #36]	; 0x24
 8002900:	2320      	movs	r3, #32
 8002902:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002906:	2330      	movs	r3, #48	; 0x30
 8002908:	f04f 0901 	mov.w	r9, #1
 800290c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002910:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002ad0 <_vfiprintf_r+0x24c>
 8002914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002918:	4623      	mov	r3, r4
 800291a:	469a      	mov	sl, r3
 800291c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002920:	b10a      	cbz	r2, 8002926 <_vfiprintf_r+0xa2>
 8002922:	2a25      	cmp	r2, #37	; 0x25
 8002924:	d1f9      	bne.n	800291a <_vfiprintf_r+0x96>
 8002926:	ebba 0b04 	subs.w	fp, sl, r4
 800292a:	d00b      	beq.n	8002944 <_vfiprintf_r+0xc0>
 800292c:	465b      	mov	r3, fp
 800292e:	4622      	mov	r2, r4
 8002930:	4629      	mov	r1, r5
 8002932:	4630      	mov	r0, r6
 8002934:	f7ff ff93 	bl	800285e <__sfputs_r>
 8002938:	3001      	adds	r0, #1
 800293a:	f000 80aa 	beq.w	8002a92 <_vfiprintf_r+0x20e>
 800293e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002940:	445a      	add	r2, fp
 8002942:	9209      	str	r2, [sp, #36]	; 0x24
 8002944:	f89a 3000 	ldrb.w	r3, [sl]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80a2 	beq.w	8002a92 <_vfiprintf_r+0x20e>
 800294e:	2300      	movs	r3, #0
 8002950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002954:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002958:	f10a 0a01 	add.w	sl, sl, #1
 800295c:	9304      	str	r3, [sp, #16]
 800295e:	9307      	str	r3, [sp, #28]
 8002960:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002964:	931a      	str	r3, [sp, #104]	; 0x68
 8002966:	4654      	mov	r4, sl
 8002968:	2205      	movs	r2, #5
 800296a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800296e:	4858      	ldr	r0, [pc, #352]	; (8002ad0 <_vfiprintf_r+0x24c>)
 8002970:	f000 fd32 	bl	80033d8 <memchr>
 8002974:	9a04      	ldr	r2, [sp, #16]
 8002976:	b9d8      	cbnz	r0, 80029b0 <_vfiprintf_r+0x12c>
 8002978:	06d1      	lsls	r1, r2, #27
 800297a:	bf44      	itt	mi
 800297c:	2320      	movmi	r3, #32
 800297e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002982:	0713      	lsls	r3, r2, #28
 8002984:	bf44      	itt	mi
 8002986:	232b      	movmi	r3, #43	; 0x2b
 8002988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800298c:	f89a 3000 	ldrb.w	r3, [sl]
 8002990:	2b2a      	cmp	r3, #42	; 0x2a
 8002992:	d015      	beq.n	80029c0 <_vfiprintf_r+0x13c>
 8002994:	4654      	mov	r4, sl
 8002996:	2000      	movs	r0, #0
 8002998:	f04f 0c0a 	mov.w	ip, #10
 800299c:	9a07      	ldr	r2, [sp, #28]
 800299e:	4621      	mov	r1, r4
 80029a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029a4:	3b30      	subs	r3, #48	; 0x30
 80029a6:	2b09      	cmp	r3, #9
 80029a8:	d94e      	bls.n	8002a48 <_vfiprintf_r+0x1c4>
 80029aa:	b1b0      	cbz	r0, 80029da <_vfiprintf_r+0x156>
 80029ac:	9207      	str	r2, [sp, #28]
 80029ae:	e014      	b.n	80029da <_vfiprintf_r+0x156>
 80029b0:	eba0 0308 	sub.w	r3, r0, r8
 80029b4:	fa09 f303 	lsl.w	r3, r9, r3
 80029b8:	4313      	orrs	r3, r2
 80029ba:	46a2      	mov	sl, r4
 80029bc:	9304      	str	r3, [sp, #16]
 80029be:	e7d2      	b.n	8002966 <_vfiprintf_r+0xe2>
 80029c0:	9b03      	ldr	r3, [sp, #12]
 80029c2:	1d19      	adds	r1, r3, #4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	9103      	str	r1, [sp, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bfbb      	ittet	lt
 80029cc:	425b      	neglt	r3, r3
 80029ce:	f042 0202 	orrlt.w	r2, r2, #2
 80029d2:	9307      	strge	r3, [sp, #28]
 80029d4:	9307      	strlt	r3, [sp, #28]
 80029d6:	bfb8      	it	lt
 80029d8:	9204      	strlt	r2, [sp, #16]
 80029da:	7823      	ldrb	r3, [r4, #0]
 80029dc:	2b2e      	cmp	r3, #46	; 0x2e
 80029de:	d10c      	bne.n	80029fa <_vfiprintf_r+0x176>
 80029e0:	7863      	ldrb	r3, [r4, #1]
 80029e2:	2b2a      	cmp	r3, #42	; 0x2a
 80029e4:	d135      	bne.n	8002a52 <_vfiprintf_r+0x1ce>
 80029e6:	9b03      	ldr	r3, [sp, #12]
 80029e8:	3402      	adds	r4, #2
 80029ea:	1d1a      	adds	r2, r3, #4
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	9203      	str	r2, [sp, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bfb8      	it	lt
 80029f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80029f8:	9305      	str	r3, [sp, #20]
 80029fa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002ad4 <_vfiprintf_r+0x250>
 80029fe:	2203      	movs	r2, #3
 8002a00:	4650      	mov	r0, sl
 8002a02:	7821      	ldrb	r1, [r4, #0]
 8002a04:	f000 fce8 	bl	80033d8 <memchr>
 8002a08:	b140      	cbz	r0, 8002a1c <_vfiprintf_r+0x198>
 8002a0a:	2340      	movs	r3, #64	; 0x40
 8002a0c:	eba0 000a 	sub.w	r0, r0, sl
 8002a10:	fa03 f000 	lsl.w	r0, r3, r0
 8002a14:	9b04      	ldr	r3, [sp, #16]
 8002a16:	3401      	adds	r4, #1
 8002a18:	4303      	orrs	r3, r0
 8002a1a:	9304      	str	r3, [sp, #16]
 8002a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a20:	2206      	movs	r2, #6
 8002a22:	482d      	ldr	r0, [pc, #180]	; (8002ad8 <_vfiprintf_r+0x254>)
 8002a24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a28:	f000 fcd6 	bl	80033d8 <memchr>
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d03f      	beq.n	8002ab0 <_vfiprintf_r+0x22c>
 8002a30:	4b2a      	ldr	r3, [pc, #168]	; (8002adc <_vfiprintf_r+0x258>)
 8002a32:	bb1b      	cbnz	r3, 8002a7c <_vfiprintf_r+0x1f8>
 8002a34:	9b03      	ldr	r3, [sp, #12]
 8002a36:	3307      	adds	r3, #7
 8002a38:	f023 0307 	bic.w	r3, r3, #7
 8002a3c:	3308      	adds	r3, #8
 8002a3e:	9303      	str	r3, [sp, #12]
 8002a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a42:	443b      	add	r3, r7
 8002a44:	9309      	str	r3, [sp, #36]	; 0x24
 8002a46:	e767      	b.n	8002918 <_vfiprintf_r+0x94>
 8002a48:	460c      	mov	r4, r1
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a50:	e7a5      	b.n	800299e <_vfiprintf_r+0x11a>
 8002a52:	2300      	movs	r3, #0
 8002a54:	f04f 0c0a 	mov.w	ip, #10
 8002a58:	4619      	mov	r1, r3
 8002a5a:	3401      	adds	r4, #1
 8002a5c:	9305      	str	r3, [sp, #20]
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a64:	3a30      	subs	r2, #48	; 0x30
 8002a66:	2a09      	cmp	r2, #9
 8002a68:	d903      	bls.n	8002a72 <_vfiprintf_r+0x1ee>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0c5      	beq.n	80029fa <_vfiprintf_r+0x176>
 8002a6e:	9105      	str	r1, [sp, #20]
 8002a70:	e7c3      	b.n	80029fa <_vfiprintf_r+0x176>
 8002a72:	4604      	mov	r4, r0
 8002a74:	2301      	movs	r3, #1
 8002a76:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a7a:	e7f0      	b.n	8002a5e <_vfiprintf_r+0x1da>
 8002a7c:	ab03      	add	r3, sp, #12
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	462a      	mov	r2, r5
 8002a82:	4630      	mov	r0, r6
 8002a84:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <_vfiprintf_r+0x25c>)
 8002a86:	a904      	add	r1, sp, #16
 8002a88:	f3af 8000 	nop.w
 8002a8c:	4607      	mov	r7, r0
 8002a8e:	1c78      	adds	r0, r7, #1
 8002a90:	d1d6      	bne.n	8002a40 <_vfiprintf_r+0x1bc>
 8002a92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a94:	07d9      	lsls	r1, r3, #31
 8002a96:	d405      	bmi.n	8002aa4 <_vfiprintf_r+0x220>
 8002a98:	89ab      	ldrh	r3, [r5, #12]
 8002a9a:	059a      	lsls	r2, r3, #22
 8002a9c:	d402      	bmi.n	8002aa4 <_vfiprintf_r+0x220>
 8002a9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002aa0:	f000 fc33 	bl	800330a <__retarget_lock_release_recursive>
 8002aa4:	89ab      	ldrh	r3, [r5, #12]
 8002aa6:	065b      	lsls	r3, r3, #25
 8002aa8:	f53f af12 	bmi.w	80028d0 <_vfiprintf_r+0x4c>
 8002aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002aae:	e711      	b.n	80028d4 <_vfiprintf_r+0x50>
 8002ab0:	ab03      	add	r3, sp, #12
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	462a      	mov	r2, r5
 8002ab6:	4630      	mov	r0, r6
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <_vfiprintf_r+0x25c>)
 8002aba:	a904      	add	r1, sp, #16
 8002abc:	f000 f882 	bl	8002bc4 <_printf_i>
 8002ac0:	e7e4      	b.n	8002a8c <_vfiprintf_r+0x208>
 8002ac2:	bf00      	nop
 8002ac4:	08003844 	.word	0x08003844
 8002ac8:	08003864 	.word	0x08003864
 8002acc:	08003824 	.word	0x08003824
 8002ad0:	080037f1 	.word	0x080037f1
 8002ad4:	080037f7 	.word	0x080037f7
 8002ad8:	080037fb 	.word	0x080037fb
 8002adc:	00000000 	.word	0x00000000
 8002ae0:	0800285f 	.word	0x0800285f

08002ae4 <_printf_common>:
 8002ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae8:	4616      	mov	r6, r2
 8002aea:	4699      	mov	r9, r3
 8002aec:	688a      	ldr	r2, [r1, #8]
 8002aee:	690b      	ldr	r3, [r1, #16]
 8002af0:	4607      	mov	r7, r0
 8002af2:	4293      	cmp	r3, r2
 8002af4:	bfb8      	it	lt
 8002af6:	4613      	movlt	r3, r2
 8002af8:	6033      	str	r3, [r6, #0]
 8002afa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002afe:	460c      	mov	r4, r1
 8002b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b04:	b10a      	cbz	r2, 8002b0a <_printf_common+0x26>
 8002b06:	3301      	adds	r3, #1
 8002b08:	6033      	str	r3, [r6, #0]
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	0699      	lsls	r1, r3, #26
 8002b0e:	bf42      	ittt	mi
 8002b10:	6833      	ldrmi	r3, [r6, #0]
 8002b12:	3302      	addmi	r3, #2
 8002b14:	6033      	strmi	r3, [r6, #0]
 8002b16:	6825      	ldr	r5, [r4, #0]
 8002b18:	f015 0506 	ands.w	r5, r5, #6
 8002b1c:	d106      	bne.n	8002b2c <_printf_common+0x48>
 8002b1e:	f104 0a19 	add.w	sl, r4, #25
 8002b22:	68e3      	ldr	r3, [r4, #12]
 8002b24:	6832      	ldr	r2, [r6, #0]
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	42ab      	cmp	r3, r5
 8002b2a:	dc28      	bgt.n	8002b7e <_printf_common+0x9a>
 8002b2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b30:	1e13      	subs	r3, r2, #0
 8002b32:	6822      	ldr	r2, [r4, #0]
 8002b34:	bf18      	it	ne
 8002b36:	2301      	movne	r3, #1
 8002b38:	0692      	lsls	r2, r2, #26
 8002b3a:	d42d      	bmi.n	8002b98 <_printf_common+0xb4>
 8002b3c:	4649      	mov	r1, r9
 8002b3e:	4638      	mov	r0, r7
 8002b40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b44:	47c0      	blx	r8
 8002b46:	3001      	adds	r0, #1
 8002b48:	d020      	beq.n	8002b8c <_printf_common+0xa8>
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	68e5      	ldr	r5, [r4, #12]
 8002b4e:	f003 0306 	and.w	r3, r3, #6
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	bf18      	it	ne
 8002b56:	2500      	movne	r5, #0
 8002b58:	6832      	ldr	r2, [r6, #0]
 8002b5a:	f04f 0600 	mov.w	r6, #0
 8002b5e:	68a3      	ldr	r3, [r4, #8]
 8002b60:	bf08      	it	eq
 8002b62:	1aad      	subeq	r5, r5, r2
 8002b64:	6922      	ldr	r2, [r4, #16]
 8002b66:	bf08      	it	eq
 8002b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	bfc4      	itt	gt
 8002b70:	1a9b      	subgt	r3, r3, r2
 8002b72:	18ed      	addgt	r5, r5, r3
 8002b74:	341a      	adds	r4, #26
 8002b76:	42b5      	cmp	r5, r6
 8002b78:	d11a      	bne.n	8002bb0 <_printf_common+0xcc>
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	e008      	b.n	8002b90 <_printf_common+0xac>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	4652      	mov	r2, sl
 8002b82:	4649      	mov	r1, r9
 8002b84:	4638      	mov	r0, r7
 8002b86:	47c0      	blx	r8
 8002b88:	3001      	adds	r0, #1
 8002b8a:	d103      	bne.n	8002b94 <_printf_common+0xb0>
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b94:	3501      	adds	r5, #1
 8002b96:	e7c4      	b.n	8002b22 <_printf_common+0x3e>
 8002b98:	2030      	movs	r0, #48	; 0x30
 8002b9a:	18e1      	adds	r1, r4, r3
 8002b9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ba6:	4422      	add	r2, r4
 8002ba8:	3302      	adds	r3, #2
 8002baa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bae:	e7c5      	b.n	8002b3c <_printf_common+0x58>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	4649      	mov	r1, r9
 8002bb6:	4638      	mov	r0, r7
 8002bb8:	47c0      	blx	r8
 8002bba:	3001      	adds	r0, #1
 8002bbc:	d0e6      	beq.n	8002b8c <_printf_common+0xa8>
 8002bbe:	3601      	adds	r6, #1
 8002bc0:	e7d9      	b.n	8002b76 <_printf_common+0x92>
	...

08002bc4 <_printf_i>:
 8002bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc8:	7e0f      	ldrb	r7, [r1, #24]
 8002bca:	4691      	mov	r9, r2
 8002bcc:	2f78      	cmp	r7, #120	; 0x78
 8002bce:	4680      	mov	r8, r0
 8002bd0:	460c      	mov	r4, r1
 8002bd2:	469a      	mov	sl, r3
 8002bd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002bd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002bda:	d807      	bhi.n	8002bec <_printf_i+0x28>
 8002bdc:	2f62      	cmp	r7, #98	; 0x62
 8002bde:	d80a      	bhi.n	8002bf6 <_printf_i+0x32>
 8002be0:	2f00      	cmp	r7, #0
 8002be2:	f000 80d9 	beq.w	8002d98 <_printf_i+0x1d4>
 8002be6:	2f58      	cmp	r7, #88	; 0x58
 8002be8:	f000 80a4 	beq.w	8002d34 <_printf_i+0x170>
 8002bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002bf4:	e03a      	b.n	8002c6c <_printf_i+0xa8>
 8002bf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002bfa:	2b15      	cmp	r3, #21
 8002bfc:	d8f6      	bhi.n	8002bec <_printf_i+0x28>
 8002bfe:	a101      	add	r1, pc, #4	; (adr r1, 8002c04 <_printf_i+0x40>)
 8002c00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c04:	08002c5d 	.word	0x08002c5d
 8002c08:	08002c71 	.word	0x08002c71
 8002c0c:	08002bed 	.word	0x08002bed
 8002c10:	08002bed 	.word	0x08002bed
 8002c14:	08002bed 	.word	0x08002bed
 8002c18:	08002bed 	.word	0x08002bed
 8002c1c:	08002c71 	.word	0x08002c71
 8002c20:	08002bed 	.word	0x08002bed
 8002c24:	08002bed 	.word	0x08002bed
 8002c28:	08002bed 	.word	0x08002bed
 8002c2c:	08002bed 	.word	0x08002bed
 8002c30:	08002d7f 	.word	0x08002d7f
 8002c34:	08002ca1 	.word	0x08002ca1
 8002c38:	08002d61 	.word	0x08002d61
 8002c3c:	08002bed 	.word	0x08002bed
 8002c40:	08002bed 	.word	0x08002bed
 8002c44:	08002da1 	.word	0x08002da1
 8002c48:	08002bed 	.word	0x08002bed
 8002c4c:	08002ca1 	.word	0x08002ca1
 8002c50:	08002bed 	.word	0x08002bed
 8002c54:	08002bed 	.word	0x08002bed
 8002c58:	08002d69 	.word	0x08002d69
 8002c5c:	682b      	ldr	r3, [r5, #0]
 8002c5e:	1d1a      	adds	r2, r3, #4
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	602a      	str	r2, [r5, #0]
 8002c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0a4      	b.n	8002dba <_printf_i+0x1f6>
 8002c70:	6820      	ldr	r0, [r4, #0]
 8002c72:	6829      	ldr	r1, [r5, #0]
 8002c74:	0606      	lsls	r6, r0, #24
 8002c76:	f101 0304 	add.w	r3, r1, #4
 8002c7a:	d50a      	bpl.n	8002c92 <_printf_i+0xce>
 8002c7c:	680e      	ldr	r6, [r1, #0]
 8002c7e:	602b      	str	r3, [r5, #0]
 8002c80:	2e00      	cmp	r6, #0
 8002c82:	da03      	bge.n	8002c8c <_printf_i+0xc8>
 8002c84:	232d      	movs	r3, #45	; 0x2d
 8002c86:	4276      	negs	r6, r6
 8002c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c8c:	230a      	movs	r3, #10
 8002c8e:	485e      	ldr	r0, [pc, #376]	; (8002e08 <_printf_i+0x244>)
 8002c90:	e019      	b.n	8002cc6 <_printf_i+0x102>
 8002c92:	680e      	ldr	r6, [r1, #0]
 8002c94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c98:	602b      	str	r3, [r5, #0]
 8002c9a:	bf18      	it	ne
 8002c9c:	b236      	sxthne	r6, r6
 8002c9e:	e7ef      	b.n	8002c80 <_printf_i+0xbc>
 8002ca0:	682b      	ldr	r3, [r5, #0]
 8002ca2:	6820      	ldr	r0, [r4, #0]
 8002ca4:	1d19      	adds	r1, r3, #4
 8002ca6:	6029      	str	r1, [r5, #0]
 8002ca8:	0601      	lsls	r1, r0, #24
 8002caa:	d501      	bpl.n	8002cb0 <_printf_i+0xec>
 8002cac:	681e      	ldr	r6, [r3, #0]
 8002cae:	e002      	b.n	8002cb6 <_printf_i+0xf2>
 8002cb0:	0646      	lsls	r6, r0, #25
 8002cb2:	d5fb      	bpl.n	8002cac <_printf_i+0xe8>
 8002cb4:	881e      	ldrh	r6, [r3, #0]
 8002cb6:	2f6f      	cmp	r7, #111	; 0x6f
 8002cb8:	bf0c      	ite	eq
 8002cba:	2308      	moveq	r3, #8
 8002cbc:	230a      	movne	r3, #10
 8002cbe:	4852      	ldr	r0, [pc, #328]	; (8002e08 <_printf_i+0x244>)
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cc6:	6865      	ldr	r5, [r4, #4]
 8002cc8:	2d00      	cmp	r5, #0
 8002cca:	bfa8      	it	ge
 8002ccc:	6821      	ldrge	r1, [r4, #0]
 8002cce:	60a5      	str	r5, [r4, #8]
 8002cd0:	bfa4      	itt	ge
 8002cd2:	f021 0104 	bicge.w	r1, r1, #4
 8002cd6:	6021      	strge	r1, [r4, #0]
 8002cd8:	b90e      	cbnz	r6, 8002cde <_printf_i+0x11a>
 8002cda:	2d00      	cmp	r5, #0
 8002cdc:	d04d      	beq.n	8002d7a <_printf_i+0x1b6>
 8002cde:	4615      	mov	r5, r2
 8002ce0:	fbb6 f1f3 	udiv	r1, r6, r3
 8002ce4:	fb03 6711 	mls	r7, r3, r1, r6
 8002ce8:	5dc7      	ldrb	r7, [r0, r7]
 8002cea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002cee:	4637      	mov	r7, r6
 8002cf0:	42bb      	cmp	r3, r7
 8002cf2:	460e      	mov	r6, r1
 8002cf4:	d9f4      	bls.n	8002ce0 <_printf_i+0x11c>
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d10b      	bne.n	8002d12 <_printf_i+0x14e>
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	07de      	lsls	r6, r3, #31
 8002cfe:	d508      	bpl.n	8002d12 <_printf_i+0x14e>
 8002d00:	6923      	ldr	r3, [r4, #16]
 8002d02:	6861      	ldr	r1, [r4, #4]
 8002d04:	4299      	cmp	r1, r3
 8002d06:	bfde      	ittt	le
 8002d08:	2330      	movle	r3, #48	; 0x30
 8002d0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d0e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002d12:	1b52      	subs	r2, r2, r5
 8002d14:	6122      	str	r2, [r4, #16]
 8002d16:	464b      	mov	r3, r9
 8002d18:	4621      	mov	r1, r4
 8002d1a:	4640      	mov	r0, r8
 8002d1c:	f8cd a000 	str.w	sl, [sp]
 8002d20:	aa03      	add	r2, sp, #12
 8002d22:	f7ff fedf 	bl	8002ae4 <_printf_common>
 8002d26:	3001      	adds	r0, #1
 8002d28:	d14c      	bne.n	8002dc4 <_printf_i+0x200>
 8002d2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d2e:	b004      	add	sp, #16
 8002d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d34:	4834      	ldr	r0, [pc, #208]	; (8002e08 <_printf_i+0x244>)
 8002d36:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d3a:	6829      	ldr	r1, [r5, #0]
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d42:	6029      	str	r1, [r5, #0]
 8002d44:	061d      	lsls	r5, r3, #24
 8002d46:	d514      	bpl.n	8002d72 <_printf_i+0x1ae>
 8002d48:	07df      	lsls	r7, r3, #31
 8002d4a:	bf44      	itt	mi
 8002d4c:	f043 0320 	orrmi.w	r3, r3, #32
 8002d50:	6023      	strmi	r3, [r4, #0]
 8002d52:	b91e      	cbnz	r6, 8002d5c <_printf_i+0x198>
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	f023 0320 	bic.w	r3, r3, #32
 8002d5a:	6023      	str	r3, [r4, #0]
 8002d5c:	2310      	movs	r3, #16
 8002d5e:	e7af      	b.n	8002cc0 <_printf_i+0xfc>
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	f043 0320 	orr.w	r3, r3, #32
 8002d66:	6023      	str	r3, [r4, #0]
 8002d68:	2378      	movs	r3, #120	; 0x78
 8002d6a:	4828      	ldr	r0, [pc, #160]	; (8002e0c <_printf_i+0x248>)
 8002d6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d70:	e7e3      	b.n	8002d3a <_printf_i+0x176>
 8002d72:	0659      	lsls	r1, r3, #25
 8002d74:	bf48      	it	mi
 8002d76:	b2b6      	uxthmi	r6, r6
 8002d78:	e7e6      	b.n	8002d48 <_printf_i+0x184>
 8002d7a:	4615      	mov	r5, r2
 8002d7c:	e7bb      	b.n	8002cf6 <_printf_i+0x132>
 8002d7e:	682b      	ldr	r3, [r5, #0]
 8002d80:	6826      	ldr	r6, [r4, #0]
 8002d82:	1d18      	adds	r0, r3, #4
 8002d84:	6961      	ldr	r1, [r4, #20]
 8002d86:	6028      	str	r0, [r5, #0]
 8002d88:	0635      	lsls	r5, r6, #24
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	d501      	bpl.n	8002d92 <_printf_i+0x1ce>
 8002d8e:	6019      	str	r1, [r3, #0]
 8002d90:	e002      	b.n	8002d98 <_printf_i+0x1d4>
 8002d92:	0670      	lsls	r0, r6, #25
 8002d94:	d5fb      	bpl.n	8002d8e <_printf_i+0x1ca>
 8002d96:	8019      	strh	r1, [r3, #0]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	4615      	mov	r5, r2
 8002d9c:	6123      	str	r3, [r4, #16]
 8002d9e:	e7ba      	b.n	8002d16 <_printf_i+0x152>
 8002da0:	682b      	ldr	r3, [r5, #0]
 8002da2:	2100      	movs	r1, #0
 8002da4:	1d1a      	adds	r2, r3, #4
 8002da6:	602a      	str	r2, [r5, #0]
 8002da8:	681d      	ldr	r5, [r3, #0]
 8002daa:	6862      	ldr	r2, [r4, #4]
 8002dac:	4628      	mov	r0, r5
 8002dae:	f000 fb13 	bl	80033d8 <memchr>
 8002db2:	b108      	cbz	r0, 8002db8 <_printf_i+0x1f4>
 8002db4:	1b40      	subs	r0, r0, r5
 8002db6:	6060      	str	r0, [r4, #4]
 8002db8:	6863      	ldr	r3, [r4, #4]
 8002dba:	6123      	str	r3, [r4, #16]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dc2:	e7a8      	b.n	8002d16 <_printf_i+0x152>
 8002dc4:	462a      	mov	r2, r5
 8002dc6:	4649      	mov	r1, r9
 8002dc8:	4640      	mov	r0, r8
 8002dca:	6923      	ldr	r3, [r4, #16]
 8002dcc:	47d0      	blx	sl
 8002dce:	3001      	adds	r0, #1
 8002dd0:	d0ab      	beq.n	8002d2a <_printf_i+0x166>
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	079b      	lsls	r3, r3, #30
 8002dd6:	d413      	bmi.n	8002e00 <_printf_i+0x23c>
 8002dd8:	68e0      	ldr	r0, [r4, #12]
 8002dda:	9b03      	ldr	r3, [sp, #12]
 8002ddc:	4298      	cmp	r0, r3
 8002dde:	bfb8      	it	lt
 8002de0:	4618      	movlt	r0, r3
 8002de2:	e7a4      	b.n	8002d2e <_printf_i+0x16a>
 8002de4:	2301      	movs	r3, #1
 8002de6:	4632      	mov	r2, r6
 8002de8:	4649      	mov	r1, r9
 8002dea:	4640      	mov	r0, r8
 8002dec:	47d0      	blx	sl
 8002dee:	3001      	adds	r0, #1
 8002df0:	d09b      	beq.n	8002d2a <_printf_i+0x166>
 8002df2:	3501      	adds	r5, #1
 8002df4:	68e3      	ldr	r3, [r4, #12]
 8002df6:	9903      	ldr	r1, [sp, #12]
 8002df8:	1a5b      	subs	r3, r3, r1
 8002dfa:	42ab      	cmp	r3, r5
 8002dfc:	dcf2      	bgt.n	8002de4 <_printf_i+0x220>
 8002dfe:	e7eb      	b.n	8002dd8 <_printf_i+0x214>
 8002e00:	2500      	movs	r5, #0
 8002e02:	f104 0619 	add.w	r6, r4, #25
 8002e06:	e7f5      	b.n	8002df4 <_printf_i+0x230>
 8002e08:	08003802 	.word	0x08003802
 8002e0c:	08003813 	.word	0x08003813

08002e10 <__swbuf_r>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	460e      	mov	r6, r1
 8002e14:	4614      	mov	r4, r2
 8002e16:	4605      	mov	r5, r0
 8002e18:	b118      	cbz	r0, 8002e22 <__swbuf_r+0x12>
 8002e1a:	6983      	ldr	r3, [r0, #24]
 8002e1c:	b90b      	cbnz	r3, 8002e22 <__swbuf_r+0x12>
 8002e1e:	f000 f9d5 	bl	80031cc <__sinit>
 8002e22:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <__swbuf_r+0x98>)
 8002e24:	429c      	cmp	r4, r3
 8002e26:	d12b      	bne.n	8002e80 <__swbuf_r+0x70>
 8002e28:	686c      	ldr	r4, [r5, #4]
 8002e2a:	69a3      	ldr	r3, [r4, #24]
 8002e2c:	60a3      	str	r3, [r4, #8]
 8002e2e:	89a3      	ldrh	r3, [r4, #12]
 8002e30:	071a      	lsls	r2, r3, #28
 8002e32:	d52f      	bpl.n	8002e94 <__swbuf_r+0x84>
 8002e34:	6923      	ldr	r3, [r4, #16]
 8002e36:	b36b      	cbz	r3, 8002e94 <__swbuf_r+0x84>
 8002e38:	6923      	ldr	r3, [r4, #16]
 8002e3a:	6820      	ldr	r0, [r4, #0]
 8002e3c:	b2f6      	uxtb	r6, r6
 8002e3e:	1ac0      	subs	r0, r0, r3
 8002e40:	6963      	ldr	r3, [r4, #20]
 8002e42:	4637      	mov	r7, r6
 8002e44:	4283      	cmp	r3, r0
 8002e46:	dc04      	bgt.n	8002e52 <__swbuf_r+0x42>
 8002e48:	4621      	mov	r1, r4
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	f000 f92a 	bl	80030a4 <_fflush_r>
 8002e50:	bb30      	cbnz	r0, 8002ea0 <__swbuf_r+0x90>
 8002e52:	68a3      	ldr	r3, [r4, #8]
 8002e54:	3001      	adds	r0, #1
 8002e56:	3b01      	subs	r3, #1
 8002e58:	60a3      	str	r3, [r4, #8]
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	6022      	str	r2, [r4, #0]
 8002e60:	701e      	strb	r6, [r3, #0]
 8002e62:	6963      	ldr	r3, [r4, #20]
 8002e64:	4283      	cmp	r3, r0
 8002e66:	d004      	beq.n	8002e72 <__swbuf_r+0x62>
 8002e68:	89a3      	ldrh	r3, [r4, #12]
 8002e6a:	07db      	lsls	r3, r3, #31
 8002e6c:	d506      	bpl.n	8002e7c <__swbuf_r+0x6c>
 8002e6e:	2e0a      	cmp	r6, #10
 8002e70:	d104      	bne.n	8002e7c <__swbuf_r+0x6c>
 8002e72:	4621      	mov	r1, r4
 8002e74:	4628      	mov	r0, r5
 8002e76:	f000 f915 	bl	80030a4 <_fflush_r>
 8002e7a:	b988      	cbnz	r0, 8002ea0 <__swbuf_r+0x90>
 8002e7c:	4638      	mov	r0, r7
 8002e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e80:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <__swbuf_r+0x9c>)
 8002e82:	429c      	cmp	r4, r3
 8002e84:	d101      	bne.n	8002e8a <__swbuf_r+0x7a>
 8002e86:	68ac      	ldr	r4, [r5, #8]
 8002e88:	e7cf      	b.n	8002e2a <__swbuf_r+0x1a>
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <__swbuf_r+0xa0>)
 8002e8c:	429c      	cmp	r4, r3
 8002e8e:	bf08      	it	eq
 8002e90:	68ec      	ldreq	r4, [r5, #12]
 8002e92:	e7ca      	b.n	8002e2a <__swbuf_r+0x1a>
 8002e94:	4621      	mov	r1, r4
 8002e96:	4628      	mov	r0, r5
 8002e98:	f000 f80c 	bl	8002eb4 <__swsetup_r>
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	d0cb      	beq.n	8002e38 <__swbuf_r+0x28>
 8002ea0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002ea4:	e7ea      	b.n	8002e7c <__swbuf_r+0x6c>
 8002ea6:	bf00      	nop
 8002ea8:	08003844 	.word	0x08003844
 8002eac:	08003864 	.word	0x08003864
 8002eb0:	08003824 	.word	0x08003824

08002eb4 <__swsetup_r>:
 8002eb4:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <__swsetup_r+0xcc>)
 8002eb6:	b570      	push	{r4, r5, r6, lr}
 8002eb8:	681d      	ldr	r5, [r3, #0]
 8002eba:	4606      	mov	r6, r0
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	b125      	cbz	r5, 8002eca <__swsetup_r+0x16>
 8002ec0:	69ab      	ldr	r3, [r5, #24]
 8002ec2:	b913      	cbnz	r3, 8002eca <__swsetup_r+0x16>
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f000 f981 	bl	80031cc <__sinit>
 8002eca:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <__swsetup_r+0xd0>)
 8002ecc:	429c      	cmp	r4, r3
 8002ece:	d10f      	bne.n	8002ef0 <__swsetup_r+0x3c>
 8002ed0:	686c      	ldr	r4, [r5, #4]
 8002ed2:	89a3      	ldrh	r3, [r4, #12]
 8002ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ed8:	0719      	lsls	r1, r3, #28
 8002eda:	d42c      	bmi.n	8002f36 <__swsetup_r+0x82>
 8002edc:	06dd      	lsls	r5, r3, #27
 8002ede:	d411      	bmi.n	8002f04 <__swsetup_r+0x50>
 8002ee0:	2309      	movs	r3, #9
 8002ee2:	6033      	str	r3, [r6, #0]
 8002ee4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eec:	81a3      	strh	r3, [r4, #12]
 8002eee:	e03e      	b.n	8002f6e <__swsetup_r+0xba>
 8002ef0:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <__swsetup_r+0xd4>)
 8002ef2:	429c      	cmp	r4, r3
 8002ef4:	d101      	bne.n	8002efa <__swsetup_r+0x46>
 8002ef6:	68ac      	ldr	r4, [r5, #8]
 8002ef8:	e7eb      	b.n	8002ed2 <__swsetup_r+0x1e>
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <__swsetup_r+0xd8>)
 8002efc:	429c      	cmp	r4, r3
 8002efe:	bf08      	it	eq
 8002f00:	68ec      	ldreq	r4, [r5, #12]
 8002f02:	e7e6      	b.n	8002ed2 <__swsetup_r+0x1e>
 8002f04:	0758      	lsls	r0, r3, #29
 8002f06:	d512      	bpl.n	8002f2e <__swsetup_r+0x7a>
 8002f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f0a:	b141      	cbz	r1, 8002f1e <__swsetup_r+0x6a>
 8002f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f10:	4299      	cmp	r1, r3
 8002f12:	d002      	beq.n	8002f1a <__swsetup_r+0x66>
 8002f14:	4630      	mov	r0, r6
 8002f16:	f7ff fa83 	bl	8002420 <_free_r>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	6363      	str	r3, [r4, #52]	; 0x34
 8002f1e:	89a3      	ldrh	r3, [r4, #12]
 8002f20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f24:	81a3      	strh	r3, [r4, #12]
 8002f26:	2300      	movs	r3, #0
 8002f28:	6063      	str	r3, [r4, #4]
 8002f2a:	6923      	ldr	r3, [r4, #16]
 8002f2c:	6023      	str	r3, [r4, #0]
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	f043 0308 	orr.w	r3, r3, #8
 8002f34:	81a3      	strh	r3, [r4, #12]
 8002f36:	6923      	ldr	r3, [r4, #16]
 8002f38:	b94b      	cbnz	r3, 8002f4e <__swsetup_r+0x9a>
 8002f3a:	89a3      	ldrh	r3, [r4, #12]
 8002f3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f44:	d003      	beq.n	8002f4e <__swsetup_r+0x9a>
 8002f46:	4621      	mov	r1, r4
 8002f48:	4630      	mov	r0, r6
 8002f4a:	f000 fa05 	bl	8003358 <__smakebuf_r>
 8002f4e:	89a0      	ldrh	r0, [r4, #12]
 8002f50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f54:	f010 0301 	ands.w	r3, r0, #1
 8002f58:	d00a      	beq.n	8002f70 <__swsetup_r+0xbc>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60a3      	str	r3, [r4, #8]
 8002f5e:	6963      	ldr	r3, [r4, #20]
 8002f60:	425b      	negs	r3, r3
 8002f62:	61a3      	str	r3, [r4, #24]
 8002f64:	6923      	ldr	r3, [r4, #16]
 8002f66:	b943      	cbnz	r3, 8002f7a <__swsetup_r+0xc6>
 8002f68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f6c:	d1ba      	bne.n	8002ee4 <__swsetup_r+0x30>
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	0781      	lsls	r1, r0, #30
 8002f72:	bf58      	it	pl
 8002f74:	6963      	ldrpl	r3, [r4, #20]
 8002f76:	60a3      	str	r3, [r4, #8]
 8002f78:	e7f4      	b.n	8002f64 <__swsetup_r+0xb0>
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	e7f7      	b.n	8002f6e <__swsetup_r+0xba>
 8002f7e:	bf00      	nop
 8002f80:	2000000c 	.word	0x2000000c
 8002f84:	08003844 	.word	0x08003844
 8002f88:	08003864 	.word	0x08003864
 8002f8c:	08003824 	.word	0x08003824

08002f90 <abort>:
 8002f90:	2006      	movs	r0, #6
 8002f92:	b508      	push	{r3, lr}
 8002f94:	f000 fa56 	bl	8003444 <raise>
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f7fd fb80 	bl	800069e <_exit>
	...

08002fa0 <__sflush_r>:
 8002fa0:	898a      	ldrh	r2, [r1, #12]
 8002fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	0710      	lsls	r0, r2, #28
 8002fa8:	460c      	mov	r4, r1
 8002faa:	d457      	bmi.n	800305c <__sflush_r+0xbc>
 8002fac:	684b      	ldr	r3, [r1, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	dc04      	bgt.n	8002fbc <__sflush_r+0x1c>
 8002fb2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	dc01      	bgt.n	8002fbc <__sflush_r+0x1c>
 8002fb8:	2000      	movs	r0, #0
 8002fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fbe:	2e00      	cmp	r6, #0
 8002fc0:	d0fa      	beq.n	8002fb8 <__sflush_r+0x18>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fc8:	682f      	ldr	r7, [r5, #0]
 8002fca:	602b      	str	r3, [r5, #0]
 8002fcc:	d032      	beq.n	8003034 <__sflush_r+0x94>
 8002fce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fd0:	89a3      	ldrh	r3, [r4, #12]
 8002fd2:	075a      	lsls	r2, r3, #29
 8002fd4:	d505      	bpl.n	8002fe2 <__sflush_r+0x42>
 8002fd6:	6863      	ldr	r3, [r4, #4]
 8002fd8:	1ac0      	subs	r0, r0, r3
 8002fda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fdc:	b10b      	cbz	r3, 8002fe2 <__sflush_r+0x42>
 8002fde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fe0:	1ac0      	subs	r0, r0, r3
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fe8:	4628      	mov	r0, r5
 8002fea:	6a21      	ldr	r1, [r4, #32]
 8002fec:	47b0      	blx	r6
 8002fee:	1c43      	adds	r3, r0, #1
 8002ff0:	89a3      	ldrh	r3, [r4, #12]
 8002ff2:	d106      	bne.n	8003002 <__sflush_r+0x62>
 8002ff4:	6829      	ldr	r1, [r5, #0]
 8002ff6:	291d      	cmp	r1, #29
 8002ff8:	d82c      	bhi.n	8003054 <__sflush_r+0xb4>
 8002ffa:	4a29      	ldr	r2, [pc, #164]	; (80030a0 <__sflush_r+0x100>)
 8002ffc:	40ca      	lsrs	r2, r1
 8002ffe:	07d6      	lsls	r6, r2, #31
 8003000:	d528      	bpl.n	8003054 <__sflush_r+0xb4>
 8003002:	2200      	movs	r2, #0
 8003004:	6062      	str	r2, [r4, #4]
 8003006:	6922      	ldr	r2, [r4, #16]
 8003008:	04d9      	lsls	r1, r3, #19
 800300a:	6022      	str	r2, [r4, #0]
 800300c:	d504      	bpl.n	8003018 <__sflush_r+0x78>
 800300e:	1c42      	adds	r2, r0, #1
 8003010:	d101      	bne.n	8003016 <__sflush_r+0x76>
 8003012:	682b      	ldr	r3, [r5, #0]
 8003014:	b903      	cbnz	r3, 8003018 <__sflush_r+0x78>
 8003016:	6560      	str	r0, [r4, #84]	; 0x54
 8003018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800301a:	602f      	str	r7, [r5, #0]
 800301c:	2900      	cmp	r1, #0
 800301e:	d0cb      	beq.n	8002fb8 <__sflush_r+0x18>
 8003020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003024:	4299      	cmp	r1, r3
 8003026:	d002      	beq.n	800302e <__sflush_r+0x8e>
 8003028:	4628      	mov	r0, r5
 800302a:	f7ff f9f9 	bl	8002420 <_free_r>
 800302e:	2000      	movs	r0, #0
 8003030:	6360      	str	r0, [r4, #52]	; 0x34
 8003032:	e7c2      	b.n	8002fba <__sflush_r+0x1a>
 8003034:	6a21      	ldr	r1, [r4, #32]
 8003036:	2301      	movs	r3, #1
 8003038:	4628      	mov	r0, r5
 800303a:	47b0      	blx	r6
 800303c:	1c41      	adds	r1, r0, #1
 800303e:	d1c7      	bne.n	8002fd0 <__sflush_r+0x30>
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0c4      	beq.n	8002fd0 <__sflush_r+0x30>
 8003046:	2b1d      	cmp	r3, #29
 8003048:	d001      	beq.n	800304e <__sflush_r+0xae>
 800304a:	2b16      	cmp	r3, #22
 800304c:	d101      	bne.n	8003052 <__sflush_r+0xb2>
 800304e:	602f      	str	r7, [r5, #0]
 8003050:	e7b2      	b.n	8002fb8 <__sflush_r+0x18>
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003058:	81a3      	strh	r3, [r4, #12]
 800305a:	e7ae      	b.n	8002fba <__sflush_r+0x1a>
 800305c:	690f      	ldr	r7, [r1, #16]
 800305e:	2f00      	cmp	r7, #0
 8003060:	d0aa      	beq.n	8002fb8 <__sflush_r+0x18>
 8003062:	0793      	lsls	r3, r2, #30
 8003064:	bf18      	it	ne
 8003066:	2300      	movne	r3, #0
 8003068:	680e      	ldr	r6, [r1, #0]
 800306a:	bf08      	it	eq
 800306c:	694b      	ldreq	r3, [r1, #20]
 800306e:	1bf6      	subs	r6, r6, r7
 8003070:	600f      	str	r7, [r1, #0]
 8003072:	608b      	str	r3, [r1, #8]
 8003074:	2e00      	cmp	r6, #0
 8003076:	dd9f      	ble.n	8002fb8 <__sflush_r+0x18>
 8003078:	4633      	mov	r3, r6
 800307a:	463a      	mov	r2, r7
 800307c:	4628      	mov	r0, r5
 800307e:	6a21      	ldr	r1, [r4, #32]
 8003080:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003084:	47e0      	blx	ip
 8003086:	2800      	cmp	r0, #0
 8003088:	dc06      	bgt.n	8003098 <__sflush_r+0xf8>
 800308a:	89a3      	ldrh	r3, [r4, #12]
 800308c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003094:	81a3      	strh	r3, [r4, #12]
 8003096:	e790      	b.n	8002fba <__sflush_r+0x1a>
 8003098:	4407      	add	r7, r0
 800309a:	1a36      	subs	r6, r6, r0
 800309c:	e7ea      	b.n	8003074 <__sflush_r+0xd4>
 800309e:	bf00      	nop
 80030a0:	20400001 	.word	0x20400001

080030a4 <_fflush_r>:
 80030a4:	b538      	push	{r3, r4, r5, lr}
 80030a6:	690b      	ldr	r3, [r1, #16]
 80030a8:	4605      	mov	r5, r0
 80030aa:	460c      	mov	r4, r1
 80030ac:	b913      	cbnz	r3, 80030b4 <_fflush_r+0x10>
 80030ae:	2500      	movs	r5, #0
 80030b0:	4628      	mov	r0, r5
 80030b2:	bd38      	pop	{r3, r4, r5, pc}
 80030b4:	b118      	cbz	r0, 80030be <_fflush_r+0x1a>
 80030b6:	6983      	ldr	r3, [r0, #24]
 80030b8:	b90b      	cbnz	r3, 80030be <_fflush_r+0x1a>
 80030ba:	f000 f887 	bl	80031cc <__sinit>
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <_fflush_r+0x6c>)
 80030c0:	429c      	cmp	r4, r3
 80030c2:	d11b      	bne.n	80030fc <_fflush_r+0x58>
 80030c4:	686c      	ldr	r4, [r5, #4]
 80030c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0ef      	beq.n	80030ae <_fflush_r+0xa>
 80030ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030d0:	07d0      	lsls	r0, r2, #31
 80030d2:	d404      	bmi.n	80030de <_fflush_r+0x3a>
 80030d4:	0599      	lsls	r1, r3, #22
 80030d6:	d402      	bmi.n	80030de <_fflush_r+0x3a>
 80030d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030da:	f000 f915 	bl	8003308 <__retarget_lock_acquire_recursive>
 80030de:	4628      	mov	r0, r5
 80030e0:	4621      	mov	r1, r4
 80030e2:	f7ff ff5d 	bl	8002fa0 <__sflush_r>
 80030e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030e8:	4605      	mov	r5, r0
 80030ea:	07da      	lsls	r2, r3, #31
 80030ec:	d4e0      	bmi.n	80030b0 <_fflush_r+0xc>
 80030ee:	89a3      	ldrh	r3, [r4, #12]
 80030f0:	059b      	lsls	r3, r3, #22
 80030f2:	d4dd      	bmi.n	80030b0 <_fflush_r+0xc>
 80030f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030f6:	f000 f908 	bl	800330a <__retarget_lock_release_recursive>
 80030fa:	e7d9      	b.n	80030b0 <_fflush_r+0xc>
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <_fflush_r+0x70>)
 80030fe:	429c      	cmp	r4, r3
 8003100:	d101      	bne.n	8003106 <_fflush_r+0x62>
 8003102:	68ac      	ldr	r4, [r5, #8]
 8003104:	e7df      	b.n	80030c6 <_fflush_r+0x22>
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <_fflush_r+0x74>)
 8003108:	429c      	cmp	r4, r3
 800310a:	bf08      	it	eq
 800310c:	68ec      	ldreq	r4, [r5, #12]
 800310e:	e7da      	b.n	80030c6 <_fflush_r+0x22>
 8003110:	08003844 	.word	0x08003844
 8003114:	08003864 	.word	0x08003864
 8003118:	08003824 	.word	0x08003824

0800311c <std>:
 800311c:	2300      	movs	r3, #0
 800311e:	b510      	push	{r4, lr}
 8003120:	4604      	mov	r4, r0
 8003122:	e9c0 3300 	strd	r3, r3, [r0]
 8003126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800312a:	6083      	str	r3, [r0, #8]
 800312c:	8181      	strh	r1, [r0, #12]
 800312e:	6643      	str	r3, [r0, #100]	; 0x64
 8003130:	81c2      	strh	r2, [r0, #14]
 8003132:	6183      	str	r3, [r0, #24]
 8003134:	4619      	mov	r1, r3
 8003136:	2208      	movs	r2, #8
 8003138:	305c      	adds	r0, #92	; 0x5c
 800313a:	f7ff f955 	bl	80023e8 <memset>
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <std+0x38>)
 8003140:	6224      	str	r4, [r4, #32]
 8003142:	6263      	str	r3, [r4, #36]	; 0x24
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <std+0x3c>)
 8003146:	62a3      	str	r3, [r4, #40]	; 0x28
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <std+0x40>)
 800314a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <std+0x44>)
 800314e:	6323      	str	r3, [r4, #48]	; 0x30
 8003150:	bd10      	pop	{r4, pc}
 8003152:	bf00      	nop
 8003154:	0800347d 	.word	0x0800347d
 8003158:	0800349f 	.word	0x0800349f
 800315c:	080034d7 	.word	0x080034d7
 8003160:	080034fb 	.word	0x080034fb

08003164 <_cleanup_r>:
 8003164:	4901      	ldr	r1, [pc, #4]	; (800316c <_cleanup_r+0x8>)
 8003166:	f000 b8af 	b.w	80032c8 <_fwalk_reent>
 800316a:	bf00      	nop
 800316c:	080030a5 	.word	0x080030a5

08003170 <__sfmoreglue>:
 8003170:	2268      	movs	r2, #104	; 0x68
 8003172:	b570      	push	{r4, r5, r6, lr}
 8003174:	1e4d      	subs	r5, r1, #1
 8003176:	4355      	muls	r5, r2
 8003178:	460e      	mov	r6, r1
 800317a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800317e:	f7ff f9b7 	bl	80024f0 <_malloc_r>
 8003182:	4604      	mov	r4, r0
 8003184:	b140      	cbz	r0, 8003198 <__sfmoreglue+0x28>
 8003186:	2100      	movs	r1, #0
 8003188:	e9c0 1600 	strd	r1, r6, [r0]
 800318c:	300c      	adds	r0, #12
 800318e:	60a0      	str	r0, [r4, #8]
 8003190:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003194:	f7ff f928 	bl	80023e8 <memset>
 8003198:	4620      	mov	r0, r4
 800319a:	bd70      	pop	{r4, r5, r6, pc}

0800319c <__sfp_lock_acquire>:
 800319c:	4801      	ldr	r0, [pc, #4]	; (80031a4 <__sfp_lock_acquire+0x8>)
 800319e:	f000 b8b3 	b.w	8003308 <__retarget_lock_acquire_recursive>
 80031a2:	bf00      	nop
 80031a4:	20000149 	.word	0x20000149

080031a8 <__sfp_lock_release>:
 80031a8:	4801      	ldr	r0, [pc, #4]	; (80031b0 <__sfp_lock_release+0x8>)
 80031aa:	f000 b8ae 	b.w	800330a <__retarget_lock_release_recursive>
 80031ae:	bf00      	nop
 80031b0:	20000149 	.word	0x20000149

080031b4 <__sinit_lock_acquire>:
 80031b4:	4801      	ldr	r0, [pc, #4]	; (80031bc <__sinit_lock_acquire+0x8>)
 80031b6:	f000 b8a7 	b.w	8003308 <__retarget_lock_acquire_recursive>
 80031ba:	bf00      	nop
 80031bc:	2000014a 	.word	0x2000014a

080031c0 <__sinit_lock_release>:
 80031c0:	4801      	ldr	r0, [pc, #4]	; (80031c8 <__sinit_lock_release+0x8>)
 80031c2:	f000 b8a2 	b.w	800330a <__retarget_lock_release_recursive>
 80031c6:	bf00      	nop
 80031c8:	2000014a 	.word	0x2000014a

080031cc <__sinit>:
 80031cc:	b510      	push	{r4, lr}
 80031ce:	4604      	mov	r4, r0
 80031d0:	f7ff fff0 	bl	80031b4 <__sinit_lock_acquire>
 80031d4:	69a3      	ldr	r3, [r4, #24]
 80031d6:	b11b      	cbz	r3, 80031e0 <__sinit+0x14>
 80031d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031dc:	f7ff bff0 	b.w	80031c0 <__sinit_lock_release>
 80031e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80031e4:	6523      	str	r3, [r4, #80]	; 0x50
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <__sinit+0x68>)
 80031e8:	4a13      	ldr	r2, [pc, #76]	; (8003238 <__sinit+0x6c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80031ee:	42a3      	cmp	r3, r4
 80031f0:	bf08      	it	eq
 80031f2:	2301      	moveq	r3, #1
 80031f4:	4620      	mov	r0, r4
 80031f6:	bf08      	it	eq
 80031f8:	61a3      	streq	r3, [r4, #24]
 80031fa:	f000 f81f 	bl	800323c <__sfp>
 80031fe:	6060      	str	r0, [r4, #4]
 8003200:	4620      	mov	r0, r4
 8003202:	f000 f81b 	bl	800323c <__sfp>
 8003206:	60a0      	str	r0, [r4, #8]
 8003208:	4620      	mov	r0, r4
 800320a:	f000 f817 	bl	800323c <__sfp>
 800320e:	2200      	movs	r2, #0
 8003210:	2104      	movs	r1, #4
 8003212:	60e0      	str	r0, [r4, #12]
 8003214:	6860      	ldr	r0, [r4, #4]
 8003216:	f7ff ff81 	bl	800311c <std>
 800321a:	2201      	movs	r2, #1
 800321c:	2109      	movs	r1, #9
 800321e:	68a0      	ldr	r0, [r4, #8]
 8003220:	f7ff ff7c 	bl	800311c <std>
 8003224:	2202      	movs	r2, #2
 8003226:	2112      	movs	r1, #18
 8003228:	68e0      	ldr	r0, [r4, #12]
 800322a:	f7ff ff77 	bl	800311c <std>
 800322e:	2301      	movs	r3, #1
 8003230:	61a3      	str	r3, [r4, #24]
 8003232:	e7d1      	b.n	80031d8 <__sinit+0xc>
 8003234:	0800363c 	.word	0x0800363c
 8003238:	08003165 	.word	0x08003165

0800323c <__sfp>:
 800323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323e:	4607      	mov	r7, r0
 8003240:	f7ff ffac 	bl	800319c <__sfp_lock_acquire>
 8003244:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <__sfp+0x84>)
 8003246:	681e      	ldr	r6, [r3, #0]
 8003248:	69b3      	ldr	r3, [r6, #24]
 800324a:	b913      	cbnz	r3, 8003252 <__sfp+0x16>
 800324c:	4630      	mov	r0, r6
 800324e:	f7ff ffbd 	bl	80031cc <__sinit>
 8003252:	3648      	adds	r6, #72	; 0x48
 8003254:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003258:	3b01      	subs	r3, #1
 800325a:	d503      	bpl.n	8003264 <__sfp+0x28>
 800325c:	6833      	ldr	r3, [r6, #0]
 800325e:	b30b      	cbz	r3, 80032a4 <__sfp+0x68>
 8003260:	6836      	ldr	r6, [r6, #0]
 8003262:	e7f7      	b.n	8003254 <__sfp+0x18>
 8003264:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003268:	b9d5      	cbnz	r5, 80032a0 <__sfp+0x64>
 800326a:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <__sfp+0x88>)
 800326c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003270:	60e3      	str	r3, [r4, #12]
 8003272:	6665      	str	r5, [r4, #100]	; 0x64
 8003274:	f000 f847 	bl	8003306 <__retarget_lock_init_recursive>
 8003278:	f7ff ff96 	bl	80031a8 <__sfp_lock_release>
 800327c:	2208      	movs	r2, #8
 800327e:	4629      	mov	r1, r5
 8003280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003288:	6025      	str	r5, [r4, #0]
 800328a:	61a5      	str	r5, [r4, #24]
 800328c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003290:	f7ff f8aa 	bl	80023e8 <memset>
 8003294:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003298:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800329c:	4620      	mov	r0, r4
 800329e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032a0:	3468      	adds	r4, #104	; 0x68
 80032a2:	e7d9      	b.n	8003258 <__sfp+0x1c>
 80032a4:	2104      	movs	r1, #4
 80032a6:	4638      	mov	r0, r7
 80032a8:	f7ff ff62 	bl	8003170 <__sfmoreglue>
 80032ac:	4604      	mov	r4, r0
 80032ae:	6030      	str	r0, [r6, #0]
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d1d5      	bne.n	8003260 <__sfp+0x24>
 80032b4:	f7ff ff78 	bl	80031a8 <__sfp_lock_release>
 80032b8:	230c      	movs	r3, #12
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	e7ee      	b.n	800329c <__sfp+0x60>
 80032be:	bf00      	nop
 80032c0:	0800363c 	.word	0x0800363c
 80032c4:	ffff0001 	.word	0xffff0001

080032c8 <_fwalk_reent>:
 80032c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032cc:	4606      	mov	r6, r0
 80032ce:	4688      	mov	r8, r1
 80032d0:	2700      	movs	r7, #0
 80032d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032da:	f1b9 0901 	subs.w	r9, r9, #1
 80032de:	d505      	bpl.n	80032ec <_fwalk_reent+0x24>
 80032e0:	6824      	ldr	r4, [r4, #0]
 80032e2:	2c00      	cmp	r4, #0
 80032e4:	d1f7      	bne.n	80032d6 <_fwalk_reent+0xe>
 80032e6:	4638      	mov	r0, r7
 80032e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032ec:	89ab      	ldrh	r3, [r5, #12]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d907      	bls.n	8003302 <_fwalk_reent+0x3a>
 80032f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032f6:	3301      	adds	r3, #1
 80032f8:	d003      	beq.n	8003302 <_fwalk_reent+0x3a>
 80032fa:	4629      	mov	r1, r5
 80032fc:	4630      	mov	r0, r6
 80032fe:	47c0      	blx	r8
 8003300:	4307      	orrs	r7, r0
 8003302:	3568      	adds	r5, #104	; 0x68
 8003304:	e7e9      	b.n	80032da <_fwalk_reent+0x12>

08003306 <__retarget_lock_init_recursive>:
 8003306:	4770      	bx	lr

08003308 <__retarget_lock_acquire_recursive>:
 8003308:	4770      	bx	lr

0800330a <__retarget_lock_release_recursive>:
 800330a:	4770      	bx	lr

0800330c <__swhatbuf_r>:
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	460e      	mov	r6, r1
 8003310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003314:	4614      	mov	r4, r2
 8003316:	2900      	cmp	r1, #0
 8003318:	461d      	mov	r5, r3
 800331a:	b096      	sub	sp, #88	; 0x58
 800331c:	da08      	bge.n	8003330 <__swhatbuf_r+0x24>
 800331e:	2200      	movs	r2, #0
 8003320:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003324:	602a      	str	r2, [r5, #0]
 8003326:	061a      	lsls	r2, r3, #24
 8003328:	d410      	bmi.n	800334c <__swhatbuf_r+0x40>
 800332a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800332e:	e00e      	b.n	800334e <__swhatbuf_r+0x42>
 8003330:	466a      	mov	r2, sp
 8003332:	f000 f909 	bl	8003548 <_fstat_r>
 8003336:	2800      	cmp	r0, #0
 8003338:	dbf1      	blt.n	800331e <__swhatbuf_r+0x12>
 800333a:	9a01      	ldr	r2, [sp, #4]
 800333c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003340:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003344:	425a      	negs	r2, r3
 8003346:	415a      	adcs	r2, r3
 8003348:	602a      	str	r2, [r5, #0]
 800334a:	e7ee      	b.n	800332a <__swhatbuf_r+0x1e>
 800334c:	2340      	movs	r3, #64	; 0x40
 800334e:	2000      	movs	r0, #0
 8003350:	6023      	str	r3, [r4, #0]
 8003352:	b016      	add	sp, #88	; 0x58
 8003354:	bd70      	pop	{r4, r5, r6, pc}
	...

08003358 <__smakebuf_r>:
 8003358:	898b      	ldrh	r3, [r1, #12]
 800335a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800335c:	079d      	lsls	r5, r3, #30
 800335e:	4606      	mov	r6, r0
 8003360:	460c      	mov	r4, r1
 8003362:	d507      	bpl.n	8003374 <__smakebuf_r+0x1c>
 8003364:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003368:	6023      	str	r3, [r4, #0]
 800336a:	6123      	str	r3, [r4, #16]
 800336c:	2301      	movs	r3, #1
 800336e:	6163      	str	r3, [r4, #20]
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	466a      	mov	r2, sp
 8003376:	ab01      	add	r3, sp, #4
 8003378:	f7ff ffc8 	bl	800330c <__swhatbuf_r>
 800337c:	9900      	ldr	r1, [sp, #0]
 800337e:	4605      	mov	r5, r0
 8003380:	4630      	mov	r0, r6
 8003382:	f7ff f8b5 	bl	80024f0 <_malloc_r>
 8003386:	b948      	cbnz	r0, 800339c <__smakebuf_r+0x44>
 8003388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800338c:	059a      	lsls	r2, r3, #22
 800338e:	d4ef      	bmi.n	8003370 <__smakebuf_r+0x18>
 8003390:	f023 0303 	bic.w	r3, r3, #3
 8003394:	f043 0302 	orr.w	r3, r3, #2
 8003398:	81a3      	strh	r3, [r4, #12]
 800339a:	e7e3      	b.n	8003364 <__smakebuf_r+0xc>
 800339c:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <__smakebuf_r+0x7c>)
 800339e:	62b3      	str	r3, [r6, #40]	; 0x28
 80033a0:	89a3      	ldrh	r3, [r4, #12]
 80033a2:	6020      	str	r0, [r4, #0]
 80033a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a8:	81a3      	strh	r3, [r4, #12]
 80033aa:	9b00      	ldr	r3, [sp, #0]
 80033ac:	6120      	str	r0, [r4, #16]
 80033ae:	6163      	str	r3, [r4, #20]
 80033b0:	9b01      	ldr	r3, [sp, #4]
 80033b2:	b15b      	cbz	r3, 80033cc <__smakebuf_r+0x74>
 80033b4:	4630      	mov	r0, r6
 80033b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033ba:	f000 f8d7 	bl	800356c <_isatty_r>
 80033be:	b128      	cbz	r0, 80033cc <__smakebuf_r+0x74>
 80033c0:	89a3      	ldrh	r3, [r4, #12]
 80033c2:	f023 0303 	bic.w	r3, r3, #3
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	81a3      	strh	r3, [r4, #12]
 80033cc:	89a0      	ldrh	r0, [r4, #12]
 80033ce:	4305      	orrs	r5, r0
 80033d0:	81a5      	strh	r5, [r4, #12]
 80033d2:	e7cd      	b.n	8003370 <__smakebuf_r+0x18>
 80033d4:	08003165 	.word	0x08003165

080033d8 <memchr>:
 80033d8:	4603      	mov	r3, r0
 80033da:	b510      	push	{r4, lr}
 80033dc:	b2c9      	uxtb	r1, r1
 80033de:	4402      	add	r2, r0
 80033e0:	4293      	cmp	r3, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	d101      	bne.n	80033ea <memchr+0x12>
 80033e6:	2000      	movs	r0, #0
 80033e8:	e003      	b.n	80033f2 <memchr+0x1a>
 80033ea:	7804      	ldrb	r4, [r0, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	428c      	cmp	r4, r1
 80033f0:	d1f6      	bne.n	80033e0 <memchr+0x8>
 80033f2:	bd10      	pop	{r4, pc}

080033f4 <_raise_r>:
 80033f4:	291f      	cmp	r1, #31
 80033f6:	b538      	push	{r3, r4, r5, lr}
 80033f8:	4604      	mov	r4, r0
 80033fa:	460d      	mov	r5, r1
 80033fc:	d904      	bls.n	8003408 <_raise_r+0x14>
 80033fe:	2316      	movs	r3, #22
 8003400:	6003      	str	r3, [r0, #0]
 8003402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003406:	bd38      	pop	{r3, r4, r5, pc}
 8003408:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800340a:	b112      	cbz	r2, 8003412 <_raise_r+0x1e>
 800340c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003410:	b94b      	cbnz	r3, 8003426 <_raise_r+0x32>
 8003412:	4620      	mov	r0, r4
 8003414:	f000 f830 	bl	8003478 <_getpid_r>
 8003418:	462a      	mov	r2, r5
 800341a:	4601      	mov	r1, r0
 800341c:	4620      	mov	r0, r4
 800341e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003422:	f000 b817 	b.w	8003454 <_kill_r>
 8003426:	2b01      	cmp	r3, #1
 8003428:	d00a      	beq.n	8003440 <_raise_r+0x4c>
 800342a:	1c59      	adds	r1, r3, #1
 800342c:	d103      	bne.n	8003436 <_raise_r+0x42>
 800342e:	2316      	movs	r3, #22
 8003430:	6003      	str	r3, [r0, #0]
 8003432:	2001      	movs	r0, #1
 8003434:	e7e7      	b.n	8003406 <_raise_r+0x12>
 8003436:	2400      	movs	r4, #0
 8003438:	4628      	mov	r0, r5
 800343a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800343e:	4798      	blx	r3
 8003440:	2000      	movs	r0, #0
 8003442:	e7e0      	b.n	8003406 <_raise_r+0x12>

08003444 <raise>:
 8003444:	4b02      	ldr	r3, [pc, #8]	; (8003450 <raise+0xc>)
 8003446:	4601      	mov	r1, r0
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	f7ff bfd3 	b.w	80033f4 <_raise_r>
 800344e:	bf00      	nop
 8003450:	2000000c 	.word	0x2000000c

08003454 <_kill_r>:
 8003454:	b538      	push	{r3, r4, r5, lr}
 8003456:	2300      	movs	r3, #0
 8003458:	4d06      	ldr	r5, [pc, #24]	; (8003474 <_kill_r+0x20>)
 800345a:	4604      	mov	r4, r0
 800345c:	4608      	mov	r0, r1
 800345e:	4611      	mov	r1, r2
 8003460:	602b      	str	r3, [r5, #0]
 8003462:	f7fd f90c 	bl	800067e <_kill>
 8003466:	1c43      	adds	r3, r0, #1
 8003468:	d102      	bne.n	8003470 <_kill_r+0x1c>
 800346a:	682b      	ldr	r3, [r5, #0]
 800346c:	b103      	cbz	r3, 8003470 <_kill_r+0x1c>
 800346e:	6023      	str	r3, [r4, #0]
 8003470:	bd38      	pop	{r3, r4, r5, pc}
 8003472:	bf00      	nop
 8003474:	20000144 	.word	0x20000144

08003478 <_getpid_r>:
 8003478:	f7fd b8fa 	b.w	8000670 <_getpid>

0800347c <__sread>:
 800347c:	b510      	push	{r4, lr}
 800347e:	460c      	mov	r4, r1
 8003480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003484:	f000 f894 	bl	80035b0 <_read_r>
 8003488:	2800      	cmp	r0, #0
 800348a:	bfab      	itete	ge
 800348c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800348e:	89a3      	ldrhlt	r3, [r4, #12]
 8003490:	181b      	addge	r3, r3, r0
 8003492:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003496:	bfac      	ite	ge
 8003498:	6563      	strge	r3, [r4, #84]	; 0x54
 800349a:	81a3      	strhlt	r3, [r4, #12]
 800349c:	bd10      	pop	{r4, pc}

0800349e <__swrite>:
 800349e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034a2:	461f      	mov	r7, r3
 80034a4:	898b      	ldrh	r3, [r1, #12]
 80034a6:	4605      	mov	r5, r0
 80034a8:	05db      	lsls	r3, r3, #23
 80034aa:	460c      	mov	r4, r1
 80034ac:	4616      	mov	r6, r2
 80034ae:	d505      	bpl.n	80034bc <__swrite+0x1e>
 80034b0:	2302      	movs	r3, #2
 80034b2:	2200      	movs	r2, #0
 80034b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034b8:	f000 f868 	bl	800358c <_lseek_r>
 80034bc:	89a3      	ldrh	r3, [r4, #12]
 80034be:	4632      	mov	r2, r6
 80034c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034c4:	81a3      	strh	r3, [r4, #12]
 80034c6:	4628      	mov	r0, r5
 80034c8:	463b      	mov	r3, r7
 80034ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034d2:	f000 b817 	b.w	8003504 <_write_r>

080034d6 <__sseek>:
 80034d6:	b510      	push	{r4, lr}
 80034d8:	460c      	mov	r4, r1
 80034da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034de:	f000 f855 	bl	800358c <_lseek_r>
 80034e2:	1c43      	adds	r3, r0, #1
 80034e4:	89a3      	ldrh	r3, [r4, #12]
 80034e6:	bf15      	itete	ne
 80034e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80034ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034f2:	81a3      	strheq	r3, [r4, #12]
 80034f4:	bf18      	it	ne
 80034f6:	81a3      	strhne	r3, [r4, #12]
 80034f8:	bd10      	pop	{r4, pc}

080034fa <__sclose>:
 80034fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034fe:	f000 b813 	b.w	8003528 <_close_r>
	...

08003504 <_write_r>:
 8003504:	b538      	push	{r3, r4, r5, lr}
 8003506:	4604      	mov	r4, r0
 8003508:	4608      	mov	r0, r1
 800350a:	4611      	mov	r1, r2
 800350c:	2200      	movs	r2, #0
 800350e:	4d05      	ldr	r5, [pc, #20]	; (8003524 <_write_r+0x20>)
 8003510:	602a      	str	r2, [r5, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	f7fd f8ea 	bl	80006ec <_write>
 8003518:	1c43      	adds	r3, r0, #1
 800351a:	d102      	bne.n	8003522 <_write_r+0x1e>
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	b103      	cbz	r3, 8003522 <_write_r+0x1e>
 8003520:	6023      	str	r3, [r4, #0]
 8003522:	bd38      	pop	{r3, r4, r5, pc}
 8003524:	20000144 	.word	0x20000144

08003528 <_close_r>:
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	2300      	movs	r3, #0
 800352c:	4d05      	ldr	r5, [pc, #20]	; (8003544 <_close_r+0x1c>)
 800352e:	4604      	mov	r4, r0
 8003530:	4608      	mov	r0, r1
 8003532:	602b      	str	r3, [r5, #0]
 8003534:	f7fd f8f6 	bl	8000724 <_close>
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	d102      	bne.n	8003542 <_close_r+0x1a>
 800353c:	682b      	ldr	r3, [r5, #0]
 800353e:	b103      	cbz	r3, 8003542 <_close_r+0x1a>
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	bd38      	pop	{r3, r4, r5, pc}
 8003544:	20000144 	.word	0x20000144

08003548 <_fstat_r>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	2300      	movs	r3, #0
 800354c:	4d06      	ldr	r5, [pc, #24]	; (8003568 <_fstat_r+0x20>)
 800354e:	4604      	mov	r4, r0
 8003550:	4608      	mov	r0, r1
 8003552:	4611      	mov	r1, r2
 8003554:	602b      	str	r3, [r5, #0]
 8003556:	f7fd f8f0 	bl	800073a <_fstat>
 800355a:	1c43      	adds	r3, r0, #1
 800355c:	d102      	bne.n	8003564 <_fstat_r+0x1c>
 800355e:	682b      	ldr	r3, [r5, #0]
 8003560:	b103      	cbz	r3, 8003564 <_fstat_r+0x1c>
 8003562:	6023      	str	r3, [r4, #0]
 8003564:	bd38      	pop	{r3, r4, r5, pc}
 8003566:	bf00      	nop
 8003568:	20000144 	.word	0x20000144

0800356c <_isatty_r>:
 800356c:	b538      	push	{r3, r4, r5, lr}
 800356e:	2300      	movs	r3, #0
 8003570:	4d05      	ldr	r5, [pc, #20]	; (8003588 <_isatty_r+0x1c>)
 8003572:	4604      	mov	r4, r0
 8003574:	4608      	mov	r0, r1
 8003576:	602b      	str	r3, [r5, #0]
 8003578:	f7fd f8ee 	bl	8000758 <_isatty>
 800357c:	1c43      	adds	r3, r0, #1
 800357e:	d102      	bne.n	8003586 <_isatty_r+0x1a>
 8003580:	682b      	ldr	r3, [r5, #0]
 8003582:	b103      	cbz	r3, 8003586 <_isatty_r+0x1a>
 8003584:	6023      	str	r3, [r4, #0]
 8003586:	bd38      	pop	{r3, r4, r5, pc}
 8003588:	20000144 	.word	0x20000144

0800358c <_lseek_r>:
 800358c:	b538      	push	{r3, r4, r5, lr}
 800358e:	4604      	mov	r4, r0
 8003590:	4608      	mov	r0, r1
 8003592:	4611      	mov	r1, r2
 8003594:	2200      	movs	r2, #0
 8003596:	4d05      	ldr	r5, [pc, #20]	; (80035ac <_lseek_r+0x20>)
 8003598:	602a      	str	r2, [r5, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	f7fd f8e6 	bl	800076c <_lseek>
 80035a0:	1c43      	adds	r3, r0, #1
 80035a2:	d102      	bne.n	80035aa <_lseek_r+0x1e>
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	b103      	cbz	r3, 80035aa <_lseek_r+0x1e>
 80035a8:	6023      	str	r3, [r4, #0]
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
 80035ac:	20000144 	.word	0x20000144

080035b0 <_read_r>:
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	4604      	mov	r4, r0
 80035b4:	4608      	mov	r0, r1
 80035b6:	4611      	mov	r1, r2
 80035b8:	2200      	movs	r2, #0
 80035ba:	4d05      	ldr	r5, [pc, #20]	; (80035d0 <_read_r+0x20>)
 80035bc:	602a      	str	r2, [r5, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	f7fd f877 	bl	80006b2 <_read>
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	d102      	bne.n	80035ce <_read_r+0x1e>
 80035c8:	682b      	ldr	r3, [r5, #0]
 80035ca:	b103      	cbz	r3, 80035ce <_read_r+0x1e>
 80035cc:	6023      	str	r3, [r4, #0]
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
 80035d0:	20000144 	.word	0x20000144

080035d4 <_init>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	bf00      	nop
 80035d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035da:	bc08      	pop	{r3}
 80035dc:	469e      	mov	lr, r3
 80035de:	4770      	bx	lr

080035e0 <_fini>:
 80035e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e2:	bf00      	nop
 80035e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e6:	bc08      	pop	{r3}
 80035e8:	469e      	mov	lr, r3
 80035ea:	4770      	bx	lr
